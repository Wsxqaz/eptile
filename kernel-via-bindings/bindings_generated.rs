/* automatically generated by rust-bindgen 0.65.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::core::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::core::mem::transmute(self)
    }
}
impl<T> ::core::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
pub const CONFIG_SERIAL_8250_RUNTIME_UARTS: u32 = 4;
pub const CONFIG_MTRR: u32 = 1;
pub const CONFIG_ARCH_USES_HIGH_VMA_FLAGS: u32 = 1;
pub const CONFIG_SPARSEMEM_VMEMMAP_ENABLE: u32 = 1;
pub const CONFIG_NET_VENDOR_MICROSEMI: u32 = 1;
pub const CONFIG_NET_VENDOR_NI: u32 = 1;
pub const CONFIG_PAGE_SHIFT: u32 = 12;
pub const CONFIG_TREE_RCU: u32 = 1;
pub const CONFIG_PREEMPT_NONE_BUILD: u32 = 1;
pub const CONFIG_ARCH_USE_BUILTIN_BSWAP: u32 = 1;
pub const CONFIG_SBITMAP: u32 = 1;
pub const CONFIG_SERIAL_8250_DEPRECATED_OPTIONS: u32 = 1;
pub const CONFIG_INIT_STACK_ALL_ZERO: u32 = 1;
pub const CONFIG_ACPI_FAN: u32 = 1;
pub const CONFIG_RANDSTRUCT_NONE: u32 = 1;
pub const CONFIG_FUNCTION_ALIGNMENT_4B: u32 = 1;
pub const CONFIG_IPV6: u32 = 1;
pub const CONFIG_SIGNALFD: u32 = 1;
pub const CONFIG_CPU_FREQ_GOV_PERFORMANCE: u32 = 1;
pub const CONFIG_NET_VENDOR_MICREL: u32 = 1;
pub const CONFIG_NET_VENDOR_ASIX: u32 = 1;
pub const CONFIG_PERF_EVENTS_INTEL_UNCORE: u32 = 1;
pub const CONFIG_SYSFS_SYSCALL: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_DEBUG_PAGEALLOC: u32 = 1;
pub const CONFIG_HOTPLUG_SMT: u32 = 1;
pub const CONFIG_AIO: u32 = 1;
pub const CONFIG_GENERIC_IRQ_SHOW: u32 = 1;
pub const CONFIG_GENERIC_STRNLEN_USER: u32 = 1;
pub const CONFIG_PGTABLE_LEVELS: u32 = 5;
pub const CONFIG_NET_VENDOR_MICROSOFT: u32 = 1;
pub const CONFIG_NET_VENDOR_8390: u32 = 1;
pub const CONFIG_ARCH_HAS_ADD_PAGES: u32 = 1;
pub const CONFIG_ACPI_AC: u32 = 1;
pub const CONFIG_ARCH_HAS_MEMBARRIER_SYNC_CORE: u32 = 1;
pub const CONFIG_HAVE_C_RECORDMCOUNT: u32 = 1;
pub const CONFIG_NET_VENDOR_VIA: u32 = 1;
pub const CONFIG_MAC80211_STA_HASH_MAX_SIZE: u32 = 0;
pub const CONFIG_ARCH_WANT_HUGE_PMD_SHARE: u32 = 1;
pub const CONFIG_HAVE_KERNEL_LZMA: u32 = 1;
pub const CONFIG_BCMA_POSSIBLE: u32 = 1;
pub const CONFIG_HZ_PERIODIC: u32 = 1;
pub const CONFIG_NET_VENDOR_VERTEXCOM: u32 = 1;
pub const CONFIG_HAVE_KPROBES_ON_FTRACE: u32 = 1;
pub const CONFIG_NET_VENDOR_DAVICOM: u32 = 1;
pub const CONFIG_EVENTFD: u32 = 1;
pub const CONFIG_GENERIC_CPU_VULNERABILITIES: u32 = 1;
pub const CONFIG_PNP: u32 = 1;
pub const CONFIG_NET_VENDOR_CHELSIO: u32 = 1;
pub const CONFIG_FILE_LOCKING: u32 = 1;
pub const CONFIG_PAGE_SIZE_4KB: u32 = 1;
pub const CONFIG_DMI: u32 = 1;
pub const CONFIG_HAVE_DYNAMIC_FTRACE: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_CRASH_DUMP: u32 = 1;
pub const CONFIG_CC_HAS_SLS: u32 = 1;
pub const CONFIG_CC_IS_CLANG: u32 = 1;
pub const CONFIG_NET_VENDOR_SUN: u32 = 1;
pub const CONFIG_POWER_SUPPLY: u32 = 1;
pub const CONFIG_HAVE_MOD_ARCH_SPECIFIC: u32 = 1;
pub const CONFIG_WLAN_VENDOR_ATMEL: u32 = 1;
pub const CONFIG_DEVTMPFS: u32 = 1;
pub const CONFIG_HAVE_DEBUG_KMEMLEAK: u32 = 1;
pub const CONFIG_NET_VENDOR_CORTINA: u32 = 1;
pub const CONFIG_INPUT_EVDEV: u32 = 1;
pub const CONFIG_NETWORK_FILESYSTEMS: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KMAP_LOCAL_FORCE_MAP: u32 = 1;
pub const CONFIG_ARCH_HAS_DEBUG_WX: u32 = 1;
pub const CONFIG_LD_ORPHAN_WARN: u32 = 1;
pub const CONFIG_INLINE_SPIN_UNLOCK_IRQ: u32 = 1;
pub const CONFIG_INET_TCP_DIAG: u32 = 1;
pub const CONFIG_KEYBOARD_ATKBD: u32 = 1;
pub const CONFIG_ARCH_WANT_LD_ORPHAN_WARN: u32 = 1;
pub const CONFIG_VGA_CONSOLE: u32 = 1;
pub const CONFIG_GENERIC_EARLY_IOREMAP: u32 = 1;
pub const CONFIG_BINDGEN_VERSION_TEXT: &[u8; 15usize] = b"bindgen 0.65.1\0";
pub const CONFIG_ARCH_SUPPORTS_PAGE_TABLE_CHECK: u32 = 1;
pub const CONFIG_ACPI_SYSTEM_POWER_STATES_SUPPORT: u32 = 1;
pub const CONFIG_XZ_DEC_SPARC: u32 = 1;
pub const CONFIG_CC_HAS_NO_PROFILE_FN_ATTR: u32 = 1;
pub const CONFIG_ACPI_SPCR_TABLE: u32 = 1;
pub const CONFIG_GENERIC_IOMAP: u32 = 1;
pub const CONFIG_RCU_CPU_STALL_TIMEOUT: u32 = 21;
pub const CONFIG_RCU_TRACE: u32 = 1;
pub const CONFIG_STRICT_KERNEL_RWX: u32 = 1;
pub const CONFIG_GENERIC_CLOCKEVENTS_MIN_ADJUST: u32 = 1;
pub const CONFIG_SPARSEMEM_VMEMMAP: u32 = 1;
pub const CONFIG_CLOCKSOURCE_WATCHDOG_MAX_SKEW_US: u32 = 125;
pub const CONFIG_NET_VENDOR_ROCKER: u32 = 1;
pub const CONFIG_HOTPLUG_CORE_SYNC_FULL: u32 = 1;
pub const CONFIG_WLAN_VENDOR_ADMTEK: u32 = 1;
pub const CONFIG_GENERIC_PTDUMP: u32 = 1;
pub const CONFIG_FUNCTION_PADDING_BYTES: u32 = 16;
pub const CONFIG_PACKET: u32 = 1;
pub const CONFIG_VGA_ARB_MAX_GPUS: u32 = 16;
pub const CONFIG_CC_HAS_SANE_FUNCTION_ALIGNMENT: u32 = 1;
pub const CONFIG_I8253_LOCK: u32 = 1;
pub const CONFIG_STACKDEPOT_MAX_FRAMES: u32 = 64;
pub const CONFIG_ZSTD_DECOMPRESS: u32 = 1;
pub const CONFIG_GENERIC_TIME_VSYSCALL: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_PER_VMA_LOCK: u32 = 1;
pub const CONFIG_NR_CPUS: u32 = 2;
pub const CONFIG_ARCH_HIBERNATION_POSSIBLE: u32 = 1;
pub const CONFIG_HAVE_FUNCTION_TRACER: u32 = 1;
pub const CONFIG_LOG_BUF_SHIFT: u32 = 17;
pub const CONFIG_INPUT: u32 = 1;
pub const CONFIG_WLAN_VENDOR_RSI: u32 = 1;
pub const CONFIG_HAVE_MMIOTRACE_SUPPORT: u32 = 1;
pub const CONFIG_HAVE_OBJTOOL_MCOUNT: u32 = 1;
pub const CONFIG_HAVE_GCC_PLUGINS: u32 = 1;
pub const CONFIG_X86_CMPXCHG64: u32 = 1;
pub const CONFIG_SCHED_MC_PRIO: u32 = 1;
pub const CONFIG_HARDIRQS_SW_RESEND: u32 = 1;
pub const CONFIG_ARCH_HAVE_NMI_SAFE_CMPXCHG: u32 = 1;
pub const CONFIG_VM_EVENT_COUNTERS: u32 = 1;
pub const CONFIG_PAGE_SIZE_LESS_THAN_64KB: u32 = 1;
pub const CONFIG_X86_UMIP: u32 = 1;
pub const CONFIG_INSTRUCTION_DECODER: u32 = 1;
pub const CONFIG_NET_RX_BUSY_POLL: u32 = 1;
pub const CONFIG_PHYSICAL_START: u32 = 16777216;
pub const CONFIG_PAHOLE_VERSION: u32 = 0;
pub const CONFIG_CC_HAS_ENTRY_PADDING: u32 = 1;
pub const CONFIG_NET_VENDOR_SMSC: u32 = 1;
pub const CONFIG_TRACE_CLOCK: u32 = 1;
pub const CONFIG_ACPI_BUTTON: u32 = 1;
pub const CONFIG_ACPI_TABLE_UPGRADE: u32 = 1;
pub const CONFIG_CLOCKSOURCE_VALIDATE_LAST_CYCLE: u32 = 1;
pub const CONFIG_CONTEXT_TRACKING: u32 = 1;
pub const CONFIG_NET_VENDOR_SEEQ: u32 = 1;
pub const CONFIG_WLAN: u32 = 1;
pub const CONFIG_CPU_SUP_CENTAUR: u32 = 1;
pub const CONFIG_WLAN_VENDOR_INTERSIL: u32 = 1;
pub const CONFIG_X86_INTEL_TSX_MODE_OFF: u32 = 1;
pub const CONFIG_DEFAULT_MMAP_MIN_ADDR: u32 = 4096;
pub const CONFIG_WLAN_VENDOR_BROADCOM: u32 = 1;
pub const CONFIG_SERIAL_8250_EXAR: u32 = 1;
pub const CONFIG_NET_VENDOR_STMICRO: u32 = 1;
pub const CONFIG_AMD_NB: u32 = 1;
pub const CONFIG_BUILD_SALT: &[u8; 1usize] = b"\0";
pub const CONFIG_X86_INTERNODE_CACHE_SHIFT: u32 = 6;
pub const CONFIG_DUMMY_CONSOLE_ROWS: u32 = 25;
pub const CONFIG_MODPROBE_PATH: &[u8; 15usize] = b"/sbin/modprobe\0";
pub const CONFIG_X86_64_SMP: u32 = 1;
pub const CONFIG_FUTEX: u32 = 1;
pub const CONFIG_NEED_PER_CPU_EMBED_FIRST_CHUNK: u32 = 1;
pub const CONFIG_ARCH_HAS_CURRENT_STACK_POINTER: u32 = 1;
pub const CONFIG_SERIAL_8250_PNP: u32 = 1;
pub const CONFIG_HAVE_FUNCTION_ERROR_INJECTION: u32 = 1;
pub const CONFIG_HAS_DMA: u32 = 1;
pub const CONFIG_SOFTIRQ_ON_OWN_STACK: u32 = 1;
pub const CONFIG_ARCH_WANT_BATCHED_UNMAP_TLB_FLUSH: u32 = 1;
pub const CONFIG_STACKDEPOT: u32 = 1;
pub const CONFIG_ARCH_HAS_ACPI_TABLE_UPGRADE: u32 = 1;
pub const CONFIG_GENERIC_BUG: u32 = 1;
pub const CONFIG_HAVE_ALIGNED_STRUCT_PAGE: u32 = 1;
pub const CONFIG_LOCK_SPIN_ON_OWNER: u32 = 1;
pub const CONFIG_HAVE_PERF_USER_STACK_DUMP: u32 = 1;
pub const CONFIG_HAVE_ARCH_RANDOMIZE_KSTACK_OFFSET: u32 = 1;
pub const CONFIG_SERIAL_CORE: u32 = 1;
pub const CONFIG_GENERIC_GETTIMEOFDAY: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC_JUMP: u32 = 1;
pub const CONFIG_ARCH_MIGHT_HAVE_ACPI_PDC: u32 = 1;
pub const CONFIG_ARCH_HAS_FORTIFY_SOURCE: u32 = 1;
pub const CONFIG_NET_VENDOR_QUALCOMM: u32 = 1;
pub const CONFIG_STACKTRACE_SUPPORT: u32 = 1;
pub const CONFIG_PCIEASPM_DEFAULT: u32 = 1;
pub const CONFIG_ARCH_HAS_SYNC_CORE_BEFORE_USERMODE: u32 = 1;
pub const CONFIG_CMDLINE: &[u8; 40usize] = b"console=ttyS0 nokaslr rdinit=/sbin/init\0";
pub const CONFIG_HAVE_CMPXCHG_LOCAL: u32 = 1;
pub const CONFIG_EARLY_PRINTK: u32 = 1;
pub const CONFIG_RD_BZIP2: u32 = 1;
pub const CONFIG_PHYS_ADDR_T_64BIT: u32 = 1;
pub const CONFIG_SERIAL_8250_MID: u32 = 1;
pub const CONFIG_LOCK_DEBUGGING_SUPPORT: u32 = 1;
pub const CONFIG_BUG: u32 = 1;
pub const CONFIG_X86_5LEVEL: u32 = 1;
pub const CONFIG_GDB_SCRIPTS: u32 = 1;
pub const CONFIG_NET_VENDOR_SYNOPSYS: u32 = 1;
pub const CONFIG_ARCH_HAS_GCOV_PROFILE_ALL: u32 = 1;
pub const CONFIG_XZ_DEC_BCJ: u32 = 1;
pub const CONFIG_TRACING_SUPPORT: u32 = 1;
pub const CONFIG_ISA_DMA_API: u32 = 1;
pub const CONFIG_RUST_OVERFLOW_CHECKS: u32 = 1;
pub const CONFIG_NET_VENDOR_CADENCE: u32 = 1;
pub const CONFIG_NET_VENDOR_BROCADE: u32 = 1;
pub const CONFIG_HAVE_IOREMAP_PROT: u32 = 1;
pub const CONFIG_AS_HAS_NON_CONST_ULEB128: u32 = 1;
pub const CONFIG_LLD_VERSION: u32 = 160006;
pub const CONFIG_ARCH_ENABLE_MEMORY_HOTPLUG: u32 = 1;
pub const CONFIG_INLINE_READ_UNLOCK_IRQ: u32 = 1;
pub const CONFIG_THERMAL_EMERGENCY_POWEROFF_DELAY_MS: u32 = 0;
pub const CONFIG_GENERIC_CPU_DEVICES: u32 = 1;
pub const CONFIG_ARCH_WANT_FRAME_POINTERS: u32 = 1;
pub const CONFIG_CPU_IDLE: u32 = 1;
pub const CONFIG_OBJTOOL: u32 = 1;
pub const CONFIG_COREDUMP: u32 = 1;
pub const CONFIG_CC_HAS_ZERO_CALL_USED_REGS: u32 = 1;
pub const CONFIG_SGETMASK_SYSCALL: u32 = 1;
pub const CONFIG_SHMEM: u32 = 1;
pub const CONFIG_ARCH_HAS_NMI_SAFE_THIS_CPU_OPS: u32 = 1;
pub const CONFIG_NET_VENDOR_ALTEON: u32 = 1;
pub const CONFIG_HAVE_POSIX_CPU_TIMERS_TASK_WORK: u32 = 1;
pub const CONFIG_CPU_SUP_INTEL: u32 = 1;
pub const CONFIG_IRQ_FORCED_THREADING: u32 = 1;
pub const CONFIG_NET_VENDOR_MICROCHIP: u32 = 1;
pub const CONFIG_MESSAGE_LOGLEVEL_DEFAULT: u32 = 4;
pub const CONFIG_WLAN_VENDOR_ATH: u32 = 1;
pub const CONFIG_WLAN_VENDOR_MARVELL: u32 = 1;
pub const CONFIG_HAVE_DYNAMIC_FTRACE_NO_PATCHABLE: u32 = 1;
pub const CONFIG_SOCK_RX_QUEUE_MAPPING: u32 = 1;
pub const CONFIG_DECOMPRESS_LZ4: u32 = 1;
pub const CONFIG_ARCH_WANT_DEFAULT_BPF_JIT: u32 = 1;
pub const CONFIG_ARCH_HAS_KCOV: u32 = 1;
pub const CONFIG_NET_VENDOR_CAVIUM: u32 = 1;
pub const CONFIG_WLAN_VENDOR_ZYDAS: u32 = 1;
pub const CONFIG_EXCLUSIVE_SYSTEM_RAM: u32 = 1;
pub const CONFIG_CRYPTO_LIB_POLY1305_RSIZE: u32 = 11;
pub const CONFIG_INIT_ENV_ARG_LIMIT: u32 = 32;
pub const CONFIG_CC_HAS_AUTO_VAR_INIT_ZERO: u32 = 1;
pub const CONFIG_HOTPLUG_PARALLEL: u32 = 1;
pub const CONFIG_SAMPLE_RUST_MINIMAL: u32 = 1;
pub const CONFIG_DEFAULT_TCP_CONG: &[u8; 6usize] = b"cubic\0";
pub const CONFIG_WLAN_VENDOR_SILABS: u32 = 1;
pub const CONFIG_HAVE_KERNEL_ZSTD: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_LTO_CLANG: u32 = 1;
pub const CONFIG_NET_VENDOR_OKI: u32 = 1;
pub const CONFIG_GCC_NO_STRINGOP_OVERFLOW: u32 = 1;
pub const CONFIG_PCI_DIRECT: u32 = 1;
pub const CONFIG_CPU_FREQ_GOV_ATTR_SET: u32 = 1;
pub const CONFIG_RWSEM_SPIN_ON_OWNER: u32 = 1;
pub const CONFIG_ARCH_HAS_STRICT_MODULE_RWX: u32 = 1;
pub const CONFIG_PROC_PID_ARCH_STATUS: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC_BZIMAGE_VERIFY_SIG: u32 = 1;
pub const CONFIG_WLAN_VENDOR_INTEL: u32 = 1;
pub const CONFIG_HAVE_IRQ_EXIT_ON_IRQ_STACK: u32 = 1;
pub const CONFIG_ARCH_HAS_KERNEL_FPU_SUPPORT: u32 = 1;
pub const CONFIG_HOTPLUG_CORE_SYNC: u32 = 1;
pub const CONFIG_NET_VENDOR_ATHEROS: u32 = 1;
pub const CONFIG_ELFCORE: u32 = 1;
pub const CONFIG_X86_PM_TIMER: u32 = 1;
pub const CONFIG_NET_VENDOR_SILAN: u32 = 1;
pub const CONFIG_DYNAMIC_SIGFRAME: u32 = 1;
pub const CONFIG_INLINE_WRITE_UNLOCK: u32 = 1;
pub const CONFIG_GENERIC_CPU_AUTOPROBE: u32 = 1;
pub const CONFIG_WLAN_VENDOR_ST: u32 = 1;
pub const CONFIG_NETDEVICES: u32 = 1;
pub const CONFIG_NR_CPUS_RANGE_END: u32 = 512;
pub const CONFIG_ARCH_CLOCKSOURCE_INIT: u32 = 1;
pub const CONFIG_ETHTOOL_NETLINK: u32 = 1;
pub const CONFIG_DEBUG_INFO: u32 = 1;
pub const CONFIG_MODULES: u32 = 1;
pub const CONFIG_CACHESTAT_SYSCALL: u32 = 1;
pub const CONFIG_PVH: u32 = 1;
pub const CONFIG_MAX_SKB_FRAGS: u32 = 17;
pub const CONFIG_INET_TABLE_PERTURB_ORDER: u32 = 16;
pub const CONFIG_IO_DELAY_0X80: u32 = 1;
pub const CONFIG_HAVE_CONTEXT_TRACKING_USER_OFFSTACK: u32 = 1;
pub const CONFIG_NET_VENDOR_I825XX: u32 = 1;
pub const CONFIG_BITREVERSE: u32 = 1;
pub const CONFIG_ACPI_LEGACY_TABLES_LOOKUP: u32 = 1;
pub const CONFIG_HAVE_ARCH_KASAN_VMALLOC: u32 = 1;
pub const CONFIG_IPV6_NDISC_NODETYPE: u32 = 1;
pub const CONFIG_NET_VENDOR_PACKET_ENGINES: u32 = 1;
pub const CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE: u32 = 1;
pub const CONFIG_HAVE_KPROBES: u32 = 1;
pub const CONFIG_ACPI_HOTPLUG_CPU: u32 = 1;
pub const CONFIG_DEBUG_MEMORY_INIT: u32 = 1;
pub const CONFIG_HAVE_PCSPKR_PLATFORM: u32 = 1;
pub const CONFIG_ACPI_CPU_FREQ_PSS: u32 = 1;
pub const CONFIG_X86_CMOV: u32 = 1;
pub const CONFIG_HAS_LTO_CLANG: u32 = 1;
pub const CONFIG_PHYSICAL_ALIGN: u32 = 2097152;
pub const CONFIG_NET_IP_TUNNEL: u32 = 1;
pub const CONFIG_HAVE_NOINSTR_HACK: u32 = 1;
pub const CONFIG_HAVE_PCI: u32 = 1;
pub const CONFIG_GENERIC_CPU: u32 = 1;
pub const CONFIG_ACPI_CONTAINER: u32 = 1;
pub const CONFIG_ARCH_HAS_HW_PTE_YOUNG: u32 = 1;
pub const CONFIG_MMU: u32 = 1;
pub const CONFIG_AS_SHA256_NI: u32 = 1;
pub const CONFIG_AS_SHA1_NI: u32 = 1;
pub const CONFIG_HAVE_DYNAMIC_FTRACE_WITH_REGS: u32 = 1;
pub const CONFIG_WLAN_VENDOR_MEDIATEK: u32 = 1;
pub const CONFIG_ARCH_HAS_DEBUG_VIRTUAL: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC_PURGATORY: u32 = 1;
pub const CONFIG_MEMBARRIER: u32 = 1;
pub const CONFIG_X86_16BIT: u32 = 1;
pub const CONFIG_NET_VENDOR_NETRONOME: u32 = 1;
pub const CONFIG_ARCH_HAS_PARANOID_L1D_FLUSH: u32 = 1;
pub const CONFIG_XZ_DEC: u32 = 1;
pub const CONFIG_CC_HAS_KASAN_SW_TAGS: u32 = 1;
pub const CONFIG_HAVE_OBJTOOL: u32 = 1;
pub const CONFIG_HAVE_KERNEL_LZ4: u32 = 1;
pub const CONFIG_PCI_QUIRKS: u32 = 1;
pub const CONFIG_NET_VENDOR_FUNGIBLE: u32 = 1;
pub const CONFIG_PCPU_DEV_REFCNT: u32 = 1;
pub const CONFIG_EDAC_ATOMIC_SCRUB: u32 = 1;
pub const CONFIG_NET_VENDOR_AMAZON: u32 = 1;
pub const CONFIG_MODULE_UNLOAD: u32 = 1;
pub const CONFIG_NET_VENDOR_INTEL: u32 = 1;
pub const CONFIG_THERMAL_DEFAULT_GOV_STEP_WISE: u32 = 1;
pub const CONFIG_CONSOLE_LOGLEVEL_DEFAULT: u32 = 7;
pub const CONFIG_CONSOLE_TRANSLATIONS: u32 = 1;
pub const CONFIG_BUILDTIME_TABLE_SORT: u32 = 1;
pub const CONFIG_HAVE_CONTEXT_TRACKING_USER: u32 = 1;
pub const CONFIG_CPU_IDLE_GOV_LADDER: u32 = 1;
pub const CONFIG_ARCH_HAS_COPY_MC: u32 = 1;
pub const CONFIG_MULTIUSER: u32 = 1;
pub const CONFIG_PNP_DEBUG_MESSAGES: u32 = 1;
pub const CONFIG_TOOLS_SUPPORT_RELR: u32 = 1;
pub const CONFIG_NEED_PER_CPU_PAGE_FIRST_CHUNK: u32 = 1;
pub const CONFIG_BLOCK: u32 = 1;
pub const CONFIG_PCI_LABEL: u32 = 1;
pub const CONFIG_PTP_1588_CLOCK_OPTIONAL: u32 = 1;
pub const CONFIG_DEBUG_MISC: u32 = 1;
pub const CONFIG_NET_VENDOR_3COM: u32 = 1;
pub const CONFIG_CPU_FREQ: u32 = 1;
pub const CONFIG_PREEMPT_NONE: u32 = 1;
pub const CONFIG_TTY: u32 = 1;
pub const CONFIG_HAVE_UNSTABLE_SCHED_CLOCK: u32 = 1;
pub const CONFIG_DECOMPRESS_LZMA: u32 = 1;
pub const CONFIG_QUEUED_SPINLOCKS: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_INT128: u32 = 1;
pub const CONFIG_SERIAL_8250_CONSOLE: u32 = 1;
pub const CONFIG_LOCK_MM_AND_FIND_VMA: u32 = 1;
pub const CONFIG_ARCH_USE_CMPXCHG_LOCKREF: u32 = 1;
pub const CONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT: u32 = 1;
pub const CONFIG_HAVE_KERNEL_XZ: u32 = 1;
pub const CONFIG_FUNCTION_ALIGNMENT: u32 = 16;
pub const CONFIG_X86_LOCAL_APIC: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_CRASH_HOTPLUG: u32 = 1;
pub const CONFIG_PPS: u32 = 1;
pub const CONFIG_LSM: &[u8; 45usize] = b"landlock,lockdown,yama,loadpin,safesetid,bpf\0";
pub const CONFIG_ARCH_HAS_PKEYS: u32 = 1;
pub const CONFIG_SERIAL_EARLYCON: u32 = 1;
pub const CONFIG_AS_AVX512: u32 = 1;
pub const CONFIG_ELF_CORE: u32 = 1;
pub const CONFIG_THERMAL: u32 = 1;
pub const CONFIG_NET_VENDOR_DLINK: u32 = 1;
pub const CONFIG_TICK_CPU_ACCOUNTING: u32 = 1;
pub const CONFIG_NET_VENDOR_EZCHIP: u32 = 1;
pub const CONFIG_XZ_DEC_X86: u32 = 1;
pub const CONFIG_NET_VENDOR_SOCIONEXT: u32 = 1;
pub const CONFIG_KERNEL_GZIP: u32 = 1;
pub const CONFIG_DEBUG_KERNEL: u32 = 1;
pub const CONFIG_WLAN_VENDOR_TI: u32 = 1;
pub const CONFIG_ARCH_HAS_GIGANTIC_PAGE: u32 = 1;
pub const CONFIG_NR_CPUS_DEFAULT: u32 = 64;
pub const CONFIG_X86_DEBUGCTLMSR: u32 = 1;
pub const CONFIG_MODULE_FORCE_LOAD: u32 = 1;
pub const CONFIG_HAVE_ARCH_SOFT_DIRTY: u32 = 1;
pub const CONFIG_HZ_250: u32 = 1;
pub const CONFIG_HAVE_DYNAMIC_FTRACE_WITH_ARGS: u32 = 1;
pub const CONFIG_ARCH_HAS_SYSCALL_WRAPPER: u32 = 1;
pub const CONFIG_WLAN_VENDOR_QUANTENNA: u32 = 1;
pub const CONFIG_NLATTR: u32 = 1;
pub const CONFIG_HAVE_GUP_FAST: u32 = 1;
pub const CONFIG_SCHED_MC: u32 = 1;
pub const CONFIG_HAVE_EBPF_JIT: u32 = 1;
pub const CONFIG_NET_VENDOR_ADAPTEC: u32 = 1;
pub const CONFIG_NET_VENDOR_WANGXUN: u32 = 1;
pub const CONFIG_RFS_ACCEL: u32 = 1;
pub const CONFIG_FUNCTION_ALIGNMENT_16B: u32 = 1;
pub const CONFIG_KALLSYMS: u32 = 1;
pub const CONFIG_X86_AMD_PSTATE_DEFAULT_MODE: u32 = 3;
pub const CONFIG_SCSI_MOD: u32 = 1;
pub const CONFIG_HZ: u32 = 250;
pub const CONFIG_ACPI: u32 = 1;
pub const CONFIG_ARCH_USE_QUEUED_SPINLOCKS: u32 = 1;
pub const CONFIG_PCI_LOCKLESS_CONFIG: u32 = 1;
pub const CONFIG_GENERIC_CLOCKEVENTS_BROADCAST_IDLE: u32 = 1;
pub const CONFIG_IPV6_SIT: u32 = 1;
pub const CONFIG_AS_VPCLMULQDQ: u32 = 1;
pub const CONFIG_HAVE_ARCH_KCSAN: u32 = 1;
pub const CONFIG_HAVE_PERF_EVENTS_NMI: u32 = 1;
pub const CONFIG_TRACE_IRQFLAGS_SUPPORT: u32 = 1;
pub const CONFIG_TIMERFD: u32 = 1;
pub const CONFIG_GENERIC_VDSO_TIME_NS: u32 = 1;
pub const CONFIG_NET_VENDOR_MYRI: u32 = 1;
pub const CONFIG_SERIO_I8042: u32 = 1;
pub const CONFIG_IRQ_DOMAIN: u32 = 1;
pub const CONFIG_HAVE_KERNEL_GZIP: u32 = 1;
pub const CONFIG_SWIOTLB: u32 = 1;
pub const CONFIG_HAVE_ARCH_HUGE_VMALLOC: u32 = 1;
pub const CONFIG_INTEL_MEI: u32 = 1;
pub const CONFIG_CRYPTO_LIB_BLAKE2S_GENERIC: u32 = 1;
pub const CONFIG_HAS_IOMEM: u32 = 1;
pub const CONFIG_HAVE_CMPXCHG_DOUBLE: u32 = 1;
pub const CONFIG_PCIEASPM: u32 = 1;
pub const CONFIG_AS_IS_LLVM: u32 = 1;
pub const CONFIG_ARCH_HAS_DEVMEM_IS_ALLOWED: u32 = 1;
pub const CONFIG_XZ_DEC_POWERPC: u32 = 1;
pub const CONFIG_BPF: u32 = 1;
pub const CONFIG_LOCALVERSION: &[u8; 1usize] = b"\0";
pub const CONFIG_SLUB: u32 = 1;
pub const CONFIG_NET_VENDOR_AMD: u32 = 1;
pub const CONFIG_HAVE_REGS_AND_STACK_ACCESS_API: u32 = 1;
pub const CONFIG_HAVE_STACK_VALIDATION: u32 = 1;
pub const CONFIG_HAVE_SAMPLE_FTRACE_DIRECT: u32 = 1;
pub const CONFIG_FIRMWARE_MEMMAP: u32 = 1;
pub const CONFIG_ARCH_DMA_ADDR_T_64BIT: u32 = 1;
pub const CONFIG_HAVE_IRQ_TIME_ACCOUNTING: u32 = 1;
pub const CONFIG_SERIAL_8250_PCILIB: u32 = 1;
pub const CONFIG_POSIX_CPU_TIMERS_TASK_WORK: u32 = 1;
pub const CONFIG_LOG_CPU_MAX_BUF_SHIFT: u32 = 12;
pub const CONFIG_HAVE_KERNEL_LZO: u32 = 1;
pub const CONFIG_HOTPLUG_CORE_SYNC_DEAD: u32 = 1;
pub const CONFIG_HAVE_STACKPROTECTOR: u32 = 1;
pub const CONFIG_HAVE_ARCH_JUMP_LABEL: u32 = 1;
pub const CONFIG_ARCH_HAS_NON_OVERLAPPING_ADDRESS_SPACE: u32 = 1;
pub const CONFIG_HAVE_SYSCALL_TRACEPOINTS: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC: u32 = 1;
pub const CONFIG_HAVE_HW_BREAKPOINT: u32 = 1;
pub const CONFIG_HAVE_NMI: u32 = 1;
pub const CONFIG_CC_HAS_INT128: u32 = 1;
pub const CONFIG_HAVE_VIRT_CPU_ACCOUNTING_GEN: u32 = 1;
pub const CONFIG_GENERIC_CLOCKEVENTS_BROADCAST: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC_FILE: u32 = 1;
pub const CONFIG_HAVE_ARCH_PREL32_RELOCATIONS: u32 = 1;
pub const CONFIG_AS_WRUSS: u32 = 1;
pub const CONFIG_X86_MPPARSE: u32 = 1;
pub const CONFIG_X86_HAVE_PAE: u32 = 1;
pub const CONFIG_XZ_DEC_ARM: u32 = 1;
pub const CONFIG_HAVE_FENTRY: u32 = 1;
pub const CONFIG_NET_VENDOR_HUAWEI: u32 = 1;
pub const CONFIG_HAVE_MIXED_BREAKPOINTS_REGS: u32 = 1;
pub const CONFIG_DEFAULT_INIT: &[u8; 1usize] = b"\0";
pub const CONFIG_LD_IS_LLD: u32 = 1;
pub const CONFIG_ARCH_MIGHT_HAVE_PC_SERIO: u32 = 1;
pub const CONFIG_HAVE_EXIT_THREAD: u32 = 1;
pub const CONFIG_NET_VENDOR_AGERE: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC_SIG: u32 = 1;
pub const CONFIG_DCACHE_WORD_ACCESS: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_CFI_CLANG: u32 = 1;
pub const CONFIG_INPUT_KEYBOARD: u32 = 1;
pub const CONFIG_ACPI_REV_OVERRIDE_POSSIBLE: u32 = 1;
pub const CONFIG_THREAD_INFO_IN_TASK: u32 = 1;
pub const CONFIG_SYSFS: u32 = 1;
pub const CONFIG_RD_ZSTD: u32 = 1;
pub const CONFIG_HAVE_ARCH_THREAD_STRUCT_WHITELIST: u32 = 1;
pub const CONFIG_X86_64: u32 = 1;
pub const CONFIG_HAVE_RSEQ: u32 = 1;
pub const CONFIG_HAVE_KCSAN_COMPILER: u32 = 1;
pub const CONFIG_GCC10_NO_ARRAY_BOUNDS: u32 = 1;
pub const CONFIG_CC_HAS_SANE_STACKPROTECTOR: u32 = 1;
pub const CONFIG_HAVE_RETHOOK: u32 = 1;
pub const CONFIG_GENERIC_CLOCKEVENTS: u32 = 1;
pub const CONFIG_AS_TPAUSE: u32 = 1;
pub const CONFIG_PERF_EVENTS: u32 = 1;
pub const CONFIG_HAVE_HARDLOCKUP_DETECTOR_PERF: u32 = 1;
pub const CONFIG_SERIAL_8250_NR_UARTS: u32 = 4;
pub const CONFIG_X86_ESPFIX64: u32 = 1;
pub const CONFIG_INLINE_READ_UNLOCK: u32 = 1;
pub const CONFIG_BQL: u32 = 1;
pub const CONFIG_IO_URING: u32 = 1;
pub const CONFIG_DECOMPRESS_XZ: u32 = 1;
pub const CONFIG_MODULES_USE_ELF_RELA: u32 = 1;
pub const CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL: u32 = 1;
pub const CONFIG_X86_CET: u32 = 1;
pub const CONFIG_ETHERNET: u32 = 1;
pub const CONFIG_TREE_SRCU: u32 = 1;
pub const CONFIG_ACPI_PROCESSOR: u32 = 1;
pub const CONFIG_ARCH_HAS_STRICT_KERNEL_RWX: u32 = 1;
pub const CONFIG_HAVE_LIVEPATCH: u32 = 1;
pub const CONFIG_INTEL_TCC: u32 = 1;
pub const CONFIG_CRC32_SLICEBY8: u32 = 1;
pub const CONFIG_GENERIC_IRQ_MATRIX_ALLOCATOR: u32 = 1;
pub const CONFIG_8139CP: u32 = 1;
pub const CONFIG_NET_NS: u32 = 1;
pub const CONFIG_SCHED_CLUSTER: u32 = 1;
pub const CONFIG_ARCH_MMAP_RND_COMPAT_BITS_MAX: u32 = 16;
pub const CONFIG_MUTEX_SPIN_ON_OWNER: u32 = 1;
pub const CONFIG_NET_FLOW_LIMIT: u32 = 1;
pub const CONFIG_HAVE_KERNEL_BZIP2: u32 = 1;
pub const CONFIG_ARCH_MMAP_RND_BITS_MAX: u32 = 32;
pub const CONFIG_RD_LZMA: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_UPROBES: u32 = 1;
pub const CONFIG_ARCH_HAS_DEBUG_VM_PGTABLE: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_ACPI: u32 = 1;
pub const CONFIG_HAVE_KRETPROBES: u32 = 1;
pub const CONFIG_NET_VENDOR_EMULEX: u32 = 1;
pub const CONFIG_X86_IO_APIC: u32 = 1;
pub const CONFIG_X86_THERMAL_VECTOR: u32 = 1;
pub const CONFIG_HAVE_USER_RETURN_NOTIFIER: u32 = 1;
pub const CONFIG_IO_WQ: u32 = 1;
pub const CONFIG_INTEL_MEI_ME: u32 = 1;
pub const CONFIG_HAVE_ARCH_HUGE_VMAP: u32 = 1;
pub const CONFIG_AS_VERSION: u32 = 160006;
pub const CONFIG_ARCH_USE_QUEUED_RWLOCKS: u32 = 1;
pub const CONFIG_NET_VENDOR_NATSEMI: u32 = 1;
pub const CONFIG_FUTEX_PI: u32 = 1;
pub const CONFIG_HAS_IOPORT_MAP: u32 = 1;
pub const CONFIG_CMDLINE_BOOL: u32 = 1;
pub const CONFIG_RUST_IS_AVAILABLE: u32 = 1;
pub const CONFIG_AS_VAES: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_LTO_CLANG_THIN: u32 = 1;
pub const CONFIG_ARCH_MMAP_RND_BITS: u32 = 28;
pub const CONFIG_NET_VENDOR_ALACRITECH: u32 = 1;
pub const CONFIG_HAVE_ARCH_TRANSPARENT_HUGEPAGE: u32 = 1;
pub const CONFIG_TRACE_IRQFLAGS_NMI_SUPPORT: u32 = 1;
pub const CONFIG_NLS_DEFAULT: &[u8; 10usize] = b"iso8859-1\0";
pub const CONFIG_DMA_NEED_SYNC: u32 = 1;
pub const CONFIG_DYNAMIC_MEMORY_LAYOUT: u32 = 1;
pub const CONFIG_DMI_SCAN_MACHINE_NON_EFI_FALLBACK: u32 = 1;
pub const CONFIG_GRO_CELLS: u32 = 1;
pub const CONFIG_GENERIC_STRNCPY_FROM_USER: u32 = 1;
pub const CONFIG_HAVE_MOVE_PMD: u32 = 1;
pub const CONFIG_X86: u32 = 1;
pub const CONFIG_CC_HAS_WORKING_NOSANITIZE_ADDRESS: u32 = 1;
pub const CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS: u32 = 1;
pub const CONFIG_ADVISE_SYSCALLS: u32 = 1;
pub const CONFIG_THERMAL_GOV_STEP_WISE: u32 = 1;
pub const CONFIG_NET: u32 = 1;
pub const CONFIG_MODULE_FORCE_UNLOAD: u32 = 1;
pub const CONFIG_X86_VSYSCALL_EMULATION: u32 = 1;
pub const CONFIG_ARCH_ENABLE_SPLIT_PMD_PTLOCK: u32 = 1;
pub const CONFIG_HAVE_OPTPROBES: u32 = 1;
pub const CONFIG_WLAN_VENDOR_MICROCHIP: u32 = 1;
pub const CONFIG_ACPI_THERMAL: u32 = 1;
pub const CONFIG_NET_VENDOR_ENGLEDER: u32 = 1;
pub const CONFIG_SCHED_SMT: u32 = 1;
pub const CONFIG_PCSPKR_PLATFORM: u32 = 1;
pub const CONFIG_INITRAMFS_SOURCE: &[u8; 1usize] = b"\0";
pub const CONFIG_UNIX98_PTYS: u32 = 1;
pub const CONFIG_RANDOMIZE_KSTACK_OFFSET: u32 = 1;
pub const CONFIG_CLKBLD_I8253: u32 = 1;
pub const CONFIG_ARCH_HAS_NONLEAF_PMD_YOUNG: u32 = 1;
pub const CONFIG_ACPI_PROCESSOR_CSTATE: u32 = 1;
pub const CONFIG_ARCH_WANT_OPTIMIZE_HUGETLB_VMEMMAP: u32 = 1;
pub const CONFIG_ARCH_SPARSEMEM_DEFAULT: u32 = 1;
pub const CONFIG_EXECMEM: u32 = 1;
pub const CONFIG_NET_VENDOR_REALTEK: u32 = 1;
pub const CONFIG_HOTPLUG_SPLIT_STARTUP: u32 = 1;
pub const CONFIG_VT: u32 = 1;
pub const CONFIG_SMP: u32 = 1;
pub const CONFIG_QUEUED_RWLOCKS: u32 = 1;
pub const CONFIG_X86_KERNEL_IBT: u32 = 1;
pub const CONFIG_HAVE_ARCH_AUDITSYSCALL: u32 = 1;
pub const CONFIG_RCU_STALL_COMMON: u32 = 1;
pub const CONFIG_HAVE_ASM_MODVERSIONS: u32 = 1;
pub const CONFIG_HAVE_PERF_EVENTS: u32 = 1;
pub const CONFIG_SECRETMEM: u32 = 1;
pub const CONFIG_X86_L1_CACHE_SHIFT: u32 = 6;
pub const CONFIG_LTO_NONE: u32 = 1;
pub const CONFIG_HAVE_DMA_CONTIGUOUS: u32 = 1;
pub const CONFIG_NET_VENDOR_MARVELL: u32 = 1;
pub const CONFIG_CPU_SUP_HYGON: u32 = 1;
pub const CONFIG_DECOMPRESS_LZO: u32 = 1;
pub const CONFIG_HAVE_ARCH_STACKLEAK: u32 = 1;
pub const CONFIG_LZ4_DECOMPRESS: u32 = 1;
pub const CONFIG_SAMPLES_RUST: u32 = 1;
pub const CONFIG_RTC_MC146818_LIB: u32 = 1;
pub const CONFIG_RD_LZO: u32 = 1;
pub const CONFIG_NET_VENDOR_AQUANTIA: u32 = 1;
pub const CONFIG_ACPI_LPIT: u32 = 1;
pub const CONFIG_ACPI_PROCESSOR_IDLE: u32 = 1;
pub const CONFIG_CC_HAS_SANCOV_TRACE_PC: u32 = 1;
pub const CONFIG_ARCH_HAS_CPU_RELAX: u32 = 1;
pub const CONFIG_XZ_DEC_ARMTHUMB: u32 = 1;
pub const CONFIG_ZONE_DMA32: u32 = 1;
pub const CONFIG_CC_HAS_KASAN_GENERIC: u32 = 1;
pub const CONFIG_PRINTK_TIME: u32 = 1;
pub const CONFIG_ACPI_CPPC_LIB: u32 = 1;
pub const CONFIG_ZLIB_INFLATE: u32 = 1;
pub const CONFIG_ARCH_WANTS_THP_SWAP: u32 = 1;
pub const CONFIG_VGA_ARB: u32 = 1;
pub const CONFIG_ARCH_USE_MEMTEST: u32 = 1;
pub const CONFIG_MAILBOX: u32 = 1;
pub const CONFIG_SPARSE_IRQ: u32 = 1;
pub const CONFIG_NEED_SG_DMA_LENGTH: u32 = 1;
pub const CONFIG_HAVE_FUNCTION_ARG_ACCESS_API: u32 = 1;
pub const CONFIG_CC_IMPLICIT_FALLTHROUGH: &[u8; 23usize] = b"-Wimplicit-fallthrough\0";
pub const CONFIG_WLAN_VENDOR_RALINK: u32 = 1;
pub const CONFIG_RATIONAL: u32 = 1;
pub const CONFIG_ARCH_WANT_GENERAL_HUGETLB: u32 = 1;
pub const CONFIG_ZONE_DMA: u32 = 1;
pub const CONFIG_ARCH_HAS_PMEM_API: u32 = 1;
pub const CONFIG_CLOCKSOURCE_WATCHDOG: u32 = 1;
pub const CONFIG_ARCH_MIGHT_HAVE_PC_PARPORT: u32 = 1;
pub const CONFIG_RD_GZIP: u32 = 1;
pub const CONFIG_MSDOS_PARTITION: u32 = 1;
pub const CONFIG_PCC: u32 = 1;
pub const CONFIG_ZSTD_COMMON: u32 = 1;
pub const CONFIG_DEFAULT_SECURITY_DAC: u32 = 1;
pub const CONFIG_AS_GFNI: u32 = 1;
pub const CONFIG_NET_VENDOR_RDC: u32 = 1;
pub const CONFIG_HAVE_NOINSTR_VALIDATION: u32 = 1;
pub const CONFIG_INLINE_WRITE_UNLOCK_IRQ: u32 = 1;
pub const CONFIG_FIX_EARLYCON_MEM: u32 = 1;
pub const CONFIG_ARCH_HAS_FAST_MULTIPLIER: u32 = 1;
pub const CONFIG_FW_LOADER: u32 = 1;
pub const CONFIG_CC_HAS_RANDSTRUCT: u32 = 1;
pub const CONFIG_ARCH_HAS_CACHE_LINE_SIZE: u32 = 1;
pub const CONFIG_X86_MINIMUM_CPU_FAMILY: u32 = 64;
pub const CONFIG_EXPORTFS: u32 = 1;
pub const CONFIG_PANIC_TIMEOUT: u32 = 0;
pub const CONFIG_PTP_1588_CLOCK: u32 = 1;
pub const CONFIG_NET_CORE: u32 = 1;
pub const CONFIG_MMU_LAZY_TLB_REFCOUNT: u32 = 1;
pub const CONFIG_NAMESPACES: u32 = 1;
pub const CONFIG_DECOMPRESS_GZIP: u32 = 1;
pub const CONFIG_ACPI_BATTERY: u32 = 1;
pub const CONFIG_CPU_RMAP: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_NUMA_BALANCING: u32 = 1;
pub const CONFIG_PERF_EVENTS_INTEL_CSTATE: u32 = 1;
pub const CONFIG_CC_HAS_AUTO_VAR_INIT_PATTERN: u32 = 1;
pub const CONFIG_NET_VENDOR_MELLANOX: u32 = 1;
pub const CONFIG_NET_VENDOR_SAMSUNG: u32 = 1;
pub const CONFIG_X86_TSC: u32 = 1;
pub const CONFIG_PCI_DOMAINS: u32 = 1;
pub const CONFIG_CPU_FREQ_GOV_SCHEDUTIL: u32 = 1;
pub const CONFIG_PROC_SYSCTL: u32 = 1;
pub const CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS: u32 = 1;
pub const CONFIG_HAVE_HARDLOCKUP_DETECTOR_BUDDY: u32 = 1;
pub const CONFIG_CPU_SUP_AMD: u32 = 1;
pub const CONFIG_MII: u32 = 1;
pub const CONFIG_SPARSEMEM_EXTREME: u32 = 1;
pub const CONFIG_RSEQ: u32 = 1;
pub const CONFIG_SYSCTL_EXCEPTION_TRACE: u32 = 1;
pub const CONFIG_SERIAL_8250_PERICOM: u32 = 1;
pub const CONFIG_ARCH_HAS_PTE_SPECIAL: u32 = 1;
pub const CONFIG_CC_HAS_ASM_INLINE: u32 = 1;
pub const CONFIG_HAVE_ACPI_APEI_NMI: u32 = 1;
pub const CONFIG_HAVE_ACPI_APEI: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_KEXEC_SIG_FORCE: u32 = 1;
pub const CONFIG_CC_HAS_ASM_GOTO_TIED_OUTPUT: u32 = 1;
pub const CONFIG_BLK_DEV_INITRD: u32 = 1;
pub const CONFIG_INET: u32 = 1;
pub const CONFIG_NR_CPUS_RANGE_BEGIN: u32 = 2;
pub const CONFIG_HAVE_EISA: u32 = 1;
pub const CONFIG_RPS: u32 = 1;
pub const CONFIG_FIRMWARE_TABLE: u32 = 1;
pub const CONFIG_EPOLL: u32 = 1;
pub const CONFIG_HAVE_ARCH_KMSAN: u32 = 1;
pub const CONFIG_SERIAL_8250: u32 = 1;
pub const CONFIG_HAVE_ARCH_KASAN: u32 = 1;
pub const CONFIG_HAVE_KMSAN_COMPILER: u32 = 1;
pub const CONFIG_CRC32: u32 = 1;
pub const CONFIG_ARCH_HAS_UACCESS_FLUSHCACHE: u32 = 1;
pub const CONFIG_RUST: u32 = 1;
pub const CONFIG_HAVE_SETUP_PER_CPU_AREA: u32 = 1;
pub const CONFIG_ARCH_HAS_SET_DIRECT_MAP: u32 = 1;
pub const CONFIG_RUSTC_VERSION_TEXT: &[u8; 36usize] = b"rustc 1.78.0 (9b00956e5 2024-04-29)\0";
pub const CONFIG_DECOMPRESS_BZIP2: u32 = 1;
pub const CONFIG_ACPI_HOTPLUG_IOAPIC: u32 = 1;
pub const CONFIG_HAVE_ARCH_VMAP_STACK: u32 = 1;
pub const CONFIG_HAVE_OBJTOOL_NOP_MCOUNT: u32 = 1;
pub const CONFIG_RTC_LIB: u32 = 1;
pub const CONFIG_HAVE_MOVE_PUD: u32 = 1;
pub const CONFIG_PER_VMA_LOCK: u32 = 1;
pub const CONFIG_DQL: u32 = 1;
pub const CONFIG_GCC_VERSION: u32 = 0;
pub const CONFIG_HAVE_ARCH_JUMP_LABEL_RELATIVE: u32 = 1;
pub const CONFIG_NET_VENDOR_RENESAS: u32 = 1;
pub const CONFIG_SYSCTL: u32 = 1;
pub const CONFIG_THERMAL_GOV_USER_SPACE: u32 = 1;
pub const CONFIG_PANIC_ON_OOPS_VALUE: u32 = 0;
pub const CONFIG_CRYPTO_LIB_SHA1: u32 = 1;
pub const CONFIG_SSB_POSSIBLE: u32 = 1;
pub const CONFIG_NET_VENDOR_XILINX: u32 = 1;
pub const CONFIG_WLAN_VENDOR_REALTEK: u32 = 1;
pub const CONFIG_ARCH_MAY_HAVE_PC_FDC: u32 = 1;
pub const CONFIG_OUTPUT_FORMAT: &[u8; 13usize] = b"elf64-x86-64\0";
pub const CONFIG_SERIAL_CORE_CONSOLE: u32 = 1;
pub const CONFIG_NET_VENDOR_CISCO: u32 = 1;
pub const CONFIG_XXHASH: u32 = 1;
pub const CONFIG_MODIFY_LDT_SYSCALL: u32 = 1;
pub const CONFIG_MMCONF_FAM10H: u32 = 1;
pub const CONFIG_ARCH_CONFIGURES_CPU_MITIGATIONS: u32 = 1;
pub const CONFIG_IA32_FEAT_CTL: u32 = 1;
pub const CONFIG_IRQ_DOMAIN_HIERARCHY: u32 = 1;
pub const CONFIG_SLUB_CPU_PARTIAL: u32 = 1;
pub const CONFIG_CC_HAS_IBT: u32 = 1;
pub const CONFIG_GENERIC_IRQ_PROBE: u32 = 1;
pub const CONFIG_FRAME_WARN: u32 = 1024;
pub const CONFIG_LD_VERSION: u32 = 0;
pub const CONFIG_VT_CONSOLE: u32 = 1;
pub const CONFIG_X86_INTEL_MEMORY_PROTECTION_KEYS: u32 = 1;
pub const CONFIG_NET_PTP_CLASSIFY: u32 = 1;
pub const CONFIG_CC_HAS_RETURN_THUNK: u32 = 1;
pub const CONFIG_VMAP_STACK: u32 = 1;
pub const CONFIG_DST_CACHE: u32 = 1;
pub const CONFIG_NET_VENDOR_GOOGLE: u32 = 1;
pub const CONFIG_ARCH_SPARSEMEM_ENABLE: u32 = 1;
pub const CONFIG_ACPI_THERMAL_LIB: u32 = 1;
pub const CONFIG_NLS: u32 = 1;
pub const CONFIG_GENERIC_IRQ_RESERVATION_MODE: u32 = 1;
pub const CONFIG_USER_STACKTRACE_SUPPORT: u32 = 1;
pub const CONFIG_GENERIC_IRQ_MIGRATION: u32 = 1;
pub const CONFIG_NET_VENDOR_WIZNET: u32 = 1;
pub const CONFIG_CONTEXT_TRACKING_IDLE: u32 = 1;
pub const CONFIG_GENERIC_IRQ_EFFECTIVE_AFF_MASK: u32 = 1;
pub const CONFIG_WIRELESS: u32 = 1;
pub const CONFIG_X86_AMD_PSTATE: u32 = 1;
pub const CONFIG_KALLSYMS_BASE_RELATIVE: u32 = 1;
pub const CONFIG_PCP_BATCH_SCALE_MAX: u32 = 5;
pub const CONFIG_SERIO_LIBPS2: u32 = 1;
pub const CONFIG_HAVE_PREEMPT_DYNAMIC: u32 = 1;
pub const CONFIG_TCP_CONG_CUBIC: u32 = 1;
pub const CONFIG_SPLIT_PTLOCK_CPUS: u32 = 4;
pub const CONFIG_ARCH_HAS_UBSAN: u32 = 1;
pub const CONFIG_HAVE_SOFTIRQ_ON_OWN_STACK: u32 = 1;
pub const CONFIG_HPET_TIMER: u32 = 1;
pub const CONFIG_ARCH_HAS_MEM_ENCRYPT: u32 = 1;
pub const CONFIG_HAVE_RUST: u32 = 1;
pub const CONFIG_MMU_GATHER_MERGE_VMAS: u32 = 1;
pub const CONFIG_AUDIT_ARCH: u32 = 1;
pub const CONFIG_EDAC_SUPPORT: u32 = 1;
pub const CONFIG_SERIAL_8250_LPSS: u32 = 1;
pub const CONFIG_EFI_PARTITION: u32 = 1;
pub const CONFIG_HAVE_PREEMPT_DYNAMIC_CALL: u32 = 1;
pub const CONFIG_FHANDLE: u32 = 1;
pub const CONFIG_ARCH_MHP_MEMMAP_ON_MEMORY_ENABLE: u32 = 1;
pub const CONFIG_GENERIC_PCI_IOMAP: u32 = 1;
pub const CONFIG_HAVE_ARCH_KGDB: u32 = 1;
pub const CONFIG_GENERIC_BUG_RELATIVE_POINTERS: u32 = 1;
pub const CONFIG_ARCH_STACKWALK: u32 = 1;
pub const CONFIG_HAVE_ARCH_MMAP_RND_BITS: u32 = 1;
pub const CONFIG_HAVE_PERF_REGS: u32 = 1;
pub const CONFIG_GENERIC_PENDING_IRQ: u32 = 1;
pub const CONFIG_PAGE_SIZE_LESS_THAN_256KB: u32 = 1;
pub const CONFIG_HAS_IOPORT: u32 = 1;
pub const CONFIG_STRICT_MODULE_RWX: u32 = 1;
pub const CONFIG_HAVE_JUMP_LABEL_HACK: u32 = 1;
pub const CONFIG_X86_DEBUG_FPU: u32 = 1;
pub const CONFIG_PCI: u32 = 1;
pub const CONFIG_CLANG_VERSION: u32 = 160006;
pub const CONFIG_HAVE_ARCH_WITHIN_STACK_FRAMES: u32 = 1;
pub const CONFIG_ARCH_HAS_ELF_RANDOMIZE: u32 = 1;
pub const CONFIG_GENERIC_CALIBRATE_DELAY: u32 = 1;
pub const CONFIG_NET_VENDOR_SOLARFLARE: u32 = 1;
pub const CONFIG_LD_ORPHAN_WARN_LEVEL: &[u8; 5usize] = b"warn\0";
pub const CONFIG_CC_HAS_ASM_GOTO_OUTPUT: u32 = 1;
pub const CONFIG_64BIT: u32 = 1;
pub const CONFIG_USB_OHCI_LITTLE_ENDIAN: u32 = 1;
pub const CONFIG_HAVE_STATIC_CALL_INLINE: u32 = 1;
pub const CONFIG_NET_VENDOR_TI: u32 = 1;
pub const CONFIG_HARDLOCKUP_CHECK_TIMESTAMP: u32 = 1;
pub const CONFIG_HAVE_ARCH_KFENCE: u32 = 1;
pub const CONFIG_DECOMPRESS_ZSTD: u32 = 1;
pub const CONFIG_ACPI_CUSTOM_DSDT_FILE: &[u8; 1usize] = b"\0";
pub const CONFIG_XPS: u32 = 1;
pub const CONFIG_HOTPLUG_CPU: u32 = 1;
pub const CONFIG_NET_VENDOR_PENSANDO: u32 = 1;
pub const CONFIG_ARCH_HAS_SET_MEMORY: u32 = 1;
pub const CONFIG_CC_CAN_LINK: u32 = 1;
pub const CONFIG_FUNCTION_PADDING_CFI: u32 = 11;
pub const CONFIG_CC_HAS_AUTO_VAR_INIT_ZERO_BARE: u32 = 1;
pub const CONFIG_KERNFS: u32 = 1;
pub const CONFIG_SERIO_SERPORT: u32 = 1;
pub const CONFIG_RD_XZ: u32 = 1;
pub const CONFIG_HAVE_PAGE_SIZE_4KB: u32 = 1;
pub const CONFIG_ARCH_WANTS_DYNAMIC_TASK_STRUCT: u32 = 1;
pub const CONFIG_PERF_EVENTS_INTEL_RAPL: u32 = 1;
pub const CONFIG_PCI_MMCONFIG: u32 = 1;
pub const CONFIG_PROC_PAGE_MONITOR: u32 = 1;
pub const CONFIG_HAVE_ARCH_SECCOMP_FILTER: u32 = 1;
pub const CONFIG_DEBUG_BUGVERBOSE: u32 = 1;
pub const CONFIG_ARCH_SUSPEND_POSSIBLE: u32 = 1;
pub const CONFIG_RT_MUTEXES: u32 = 1;
pub const CONFIG_GENERIC_VDSO_OVERFLOW_PROTECT: u32 = 1;
pub const CONFIG_RD_LZ4: u32 = 1;
pub const CONFIG_DEFAULT_HOSTNAME: &[u8; 7usize] = b"(none)\0";
pub const CONFIG_GENERIC_NET_UTILS: u32 = 1;
pub const CONFIG_GENERIC_ISA_DMA: u32 = 1;
pub const CONFIG_FRAME_POINTER: u32 = 1;
pub const CONFIG_SPARSEMEM: u32 = 1;
pub const CONFIG_NET_VENDOR_BROADCOM: u32 = 1;
pub const CONFIG_ARCH_HAS_PTE_DEVMAP: u32 = 1;
pub const CONFIG_ARCH_WANTS_NO_INSTR: u32 = 1;
pub const CONFIG_HAVE_GENERIC_VDSO: u32 = 1;
pub const CONFIG_UNWINDER_FRAME_POINTER: u32 = 1;
pub const CONFIG_WLAN_VENDOR_PURELIFI: u32 = 1;
pub const CONFIG_MODULES_TREE_LOOKUP: u32 = 1;
pub const CONFIG_X86_VMX_FEATURE_NAMES: u32 = 1;
pub const CONFIG_KALLSYMS_ABSOLUTE_PERCPU: u32 = 1;
pub const CONFIG_X86_DIRECT_GBPAGES: u32 = 1;
pub const CONFIG_HAVE_DYNAMIC_FTRACE_WITH_DIRECT_CALLS: u32 = 1;
pub const CONFIG_ILLEGAL_POINTER_VALUE: i64 = -2401263026318606336;
pub const CONFIG_ARCH_CORRECT_STACKTRACE_ON_KRETPROBE: u32 = 1;
pub const CONFIG_LEGACY_VSYSCALL_XONLY: u32 = 1;
pub const CONFIG_DUMMY_CONSOLE: u32 = 1;
pub const CONFIG_HAVE_ARCH_TRACEHOOK: u32 = 1;
pub const CONFIG_X86_INTEL_PSTATE: u32 = 1;
pub const CONFIG_SAMPLES: u32 = 1;
pub const CONFIG_SLUB_DEBUG: u32 = 1;
pub const CONFIG_HAVE_BUILDTIME_MCOUNT_SORT: u32 = 1;
pub const CONFIG_NET_VENDOR_ARC: u32 = 1;
pub const CONFIG_NET_VENDOR_NVIDIA: u32 = 1;
pub const CONFIG_IRQ_WORK: u32 = 1;
pub const CONFIG_HYPERVISOR_GUEST: u32 = 1;
pub const CONFIG_DUMMY_CONSOLE_COLUMNS: u32 = 80;
pub const CONFIG_STACKTRACE: u32 = 1;
pub const CONFIG_HAVE_ARCH_TRANSPARENT_HUGEPAGE_PUD: u32 = 1;
pub const CONFIG_CLKEVT_I8253: u32 = 1;
pub const CONFIG_ARCH_USE_SYM_ANNOTATIONS: u32 = 1;
pub const CONFIG_RCU_NEED_SEGCBLIST: u32 = 1;
pub const CONFIG_NEED_DMA_MAP_STATE: u32 = 1;
pub const CONFIG_RCU_EXP_CPU_STALL_TIMEOUT: u32 = 0;
pub const CONFIG_ARCH_MMAP_RND_BITS_MIN: u32 = 28;
pub const CONFIG_ARCH_WANT_OPTIMIZE_DAX_VMEMMAP: u32 = 1;
pub const CONFIG_NET_VENDOR_DEC: u32 = 1;
pub const CONFIG_BLK_MQ_PCI: u32 = 1;
pub const CONFIG_LOCKDEP_SUPPORT: u32 = 1;
pub const CONFIG_NET_VENDOR_NETERION: u32 = 1;
pub const CONFIG_MODULE_COMPRESS_NONE: u32 = 1;
pub const CONFIG_X86_PKG_TEMP_THERMAL: u32 = 1;
pub const CONFIG_ARCH_HAS_ELFCORE_COMPAT: u32 = 1;
pub const CONFIG_HAVE_ARCH_SECCOMP: u32 = 1;
pub const CONFIG_PROC_FS: u32 = 1;
pub const CONFIG_HAVE_UACCESS_VALIDATION: u32 = 1;
pub const CONFIG_DEBUG_INFO_COMPRESSED_NONE: u32 = 1;
pub const CONFIG_NET_VENDOR_TEHUTI: u32 = 1;
pub const CONFIG_GENERIC_ENTRY: u32 = 1;
pub const CONFIG_POSIX_TIMERS: u32 = 1;
pub const CONFIG_ARCH_HAS_CPU_FINALIZE_INIT: u32 = 1;
pub const CONFIG_CPU_SUP_ZHAOXIN: u32 = 1;
pub const CONFIG_NET_VENDOR_SIS: u32 = 1;
pub const CONFIG_INET_DIAG: u32 = 1;
pub const CONFIG_FS_IOMAP: u32 = 1;
pub const CONFIG_INPUT_VIVALDIFMAP: u32 = 1;
pub const CONFIG_ALLOW_DEV_COREDUMP: u32 = 1;
pub const CONFIG_HAVE_FTRACE_MCOUNT_RECORD: u32 = 1;
pub const CONFIG_CONSOLE_LOGLEVEL_QUIET: u32 = 4;
pub const CONFIG_ACPI_PCC: u32 = 1;
pub const CONFIG_INET_TUNNEL: u32 = 1;
pub const CONFIG_LZO_DECOMPRESS: u32 = 1;
pub const CONFIG_GENERIC_SMP_IDLE_THREAD: u32 = 1;
pub const CONFIG_ARCH_MMAP_RND_COMPAT_BITS_MIN: u32 = 8;
pub const CONFIG_EXTRA_FIRMWARE: &[u8; 1usize] = b"\0";
pub const CONFIG_PNPACPI: u32 = 1;
pub const CONFIG_SERIAL_8250_DWLIB: u32 = 1;
pub const CONFIG_X86_PAT: u32 = 1;
pub const CONFIG_ARCH_HAS_CPU_CACHE_INVALIDATE_MEMREGION: u32 = 1;
pub const CONFIG_NET_VENDOR_LITEX: u32 = 1;
pub const CONFIG_MICROCODE: u32 = 1;
pub const CONFIG_ARCH_USES_PG_UNCACHED: u32 = 1;
pub const CONFIG_CPU_ISOLATION: u32 = 1;
pub const CONFIG_GENERIC_CMOS_UPDATE: u32 = 1;
pub const CONFIG_SERIAL_8250_PCI: u32 = 1;
pub const CONFIG_NET_VENDOR_QLOGIC: u32 = 1;
pub const CONFIG_SERIO: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_ATOMIC_RMW: u32 = 1;
pub const CONFIG_PRINTK: u32 = 1;
pub const CONFIG_HAVE_STATIC_CALL: u32 = 1;
pub const CONFIG_CC_VERSION_TEXT: &[u8; 44usize] = b"clang version 16.0.6 (Fedora 16.0.6-4.fc38)\0";
pub const CONFIG_BINFMT_ELF: u32 = 1;
pub const CONFIG_HAVE_SAMPLE_FTRACE_DIRECT_MULTI: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const KASAN_ABI_VERSION: u32 = 5;
pub const ASM_INPUT_G: &[u8; 3usize] = b"ir\0";
pub const ASM_INPUT_RM: &[u8; 2usize] = b"r\0";
pub const __BITS_PER_LONG: u32 = 64;
pub const __BITS_PER_LONG_LONG: u32 = 64;
pub const BITS_PER_LONG: u32 = 64;
pub const BITS_PER_LONG_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const KCSAN_ACCESS_WRITE: u32 = 1;
pub const KCSAN_ACCESS_COMPOUND: u32 = 2;
pub const KCSAN_ACCESS_ATOMIC: u32 = 4;
pub const KCSAN_ACCESS_ASSERT: u32 = 8;
pub const KCSAN_ACCESS_SCOPED: u32 = 16;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const MAX_ERRNO: u32 = 4095;
pub const KERN_SOH: &[u8; 2usize] = b"\x01\0";
pub const KERN_SOH_ASCII: u8 = 1u8;
pub const KERN_EMERG: &[u8; 3usize] = b"\x010\0";
pub const KERN_ALERT: &[u8; 3usize] = b"\x011\0";
pub const KERN_CRIT: &[u8; 3usize] = b"\x012\0";
pub const KERN_ERR: &[u8; 3usize] = b"\x013\0";
pub const KERN_WARNING: &[u8; 3usize] = b"\x014\0";
pub const KERN_NOTICE: &[u8; 3usize] = b"\x015\0";
pub const KERN_INFO: &[u8; 3usize] = b"\x016\0";
pub const KERN_DEBUG: &[u8; 3usize] = b"\x017\0";
pub const KERN_DEFAULT: &[u8; 1usize] = b"\0";
pub const KERN_CONT: &[u8; 3usize] = b"\x01c\0";
pub const LOGLEVEL_SCHED: i32 = -2;
pub const LOGLEVEL_DEFAULT: i32 = -1;
pub const LOGLEVEL_EMERG: u32 = 0;
pub const LOGLEVEL_ALERT: u32 = 1;
pub const LOGLEVEL_CRIT: u32 = 2;
pub const LOGLEVEL_ERR: u32 = 3;
pub const LOGLEVEL_WARNING: u32 = 4;
pub const LOGLEVEL_NOTICE: u32 = 5;
pub const LOGLEVEL_INFO: u32 = 6;
pub const LOGLEVEL_DEBUG: u32 = 7;
pub const HAS_KERNEL_IBT: u32 = 1;
pub const ASM_ENDBR: &[u8; 10usize] = b"endbr64\n\t\0";
pub const ENDBR_INSN_SIZE: u32 = 4;
pub const ASM_RET: &[u8; 6usize] = b"ret\n\t\0";
pub const BITS_PER_BYTE: u32 = 8;
pub const HZ: u32 = 100;
pub const EXEC_PAGESIZE: u32 = 4096;
pub const NOGROUP: i32 = -1;
pub const MAXHOSTNAMELEN: u32 = 64;
pub const USER_HZ: u32 = 100;
pub const CLOCKS_PER_SEC: u32 = 100;
pub const _Q_LOCKED_OFFSET: u32 = 0;
pub const _Q_LOCKED_BITS: u32 = 8;
pub const _Q_PENDING_OFFSET: u32 = 8;
pub const _Q_PENDING_BITS: u32 = 8;
pub const _Q_TAIL_IDX_OFFSET: u32 = 16;
pub const _Q_TAIL_IDX_BITS: u32 = 2;
pub const _Q_TAIL_CPU_OFFSET: u32 = 18;
pub const _Q_TAIL_CPU_BITS: u32 = 14;
pub const _Q_TAIL_OFFSET: u32 = 16;
pub const _Q_LOCKED_VAL: u32 = 1;
pub const _Q_PENDING_VAL: u32 = 256;
pub const MAX_LOCKDEP_SUBCLASSES: u32 = 8;
pub const SPINLOCK_MAGIC: u32 = 3735899821;
pub const DEFAULT_RATELIMIT_INTERVAL: u32 = 1250;
pub const DEFAULT_RATELIMIT_BURST: u32 = 10;
pub const PRINTK_MAX_SINGLE_HEADER_LEN: u32 = 2;
pub const MESSAGE_LOGLEVEL_DEFAULT: u32 = 4;
pub const CONSOLE_LOGLEVEL_SILENT: u32 = 0;
pub const CONSOLE_LOGLEVEL_MIN: u32 = 1;
pub const CONSOLE_LOGLEVEL_DEBUG: u32 = 10;
pub const CONSOLE_LOGLEVEL_MOTORMOUTH: u32 = 15;
pub const CONSOLE_LOGLEVEL_DEFAULT: u32 = 7;
pub const CONSOLE_LOGLEVEL_QUIET: u32 = 4;
pub const DEVKMSG_STR_MAX_SIZE: u32 = 10;
pub const FW_BUG: &[u8; 17usize] = b"[Firmware Bug]: \0";
pub const FW_WARN: &[u8; 18usize] = b"[Firmware Warn]: \0";
pub const FW_INFO: &[u8; 18usize] = b"[Firmware Info]: \0";
pub const HW_ERR: &[u8; 19usize] = b"[Hardware Error]: \0";
pub const DEPRECATED: &[u8; 15usize] = b"[Deprecated]: \0";
pub const EX_DATA_REG_SHIFT: u32 = 8;
pub const EX_DATA_FLAG_SHIFT: u32 = 12;
pub const EX_DATA_IMM_SHIFT: u32 = 16;
pub const EX_TYPE_NONE: u32 = 0;
pub const EX_TYPE_DEFAULT: u32 = 1;
pub const EX_TYPE_FAULT: u32 = 2;
pub const EX_TYPE_UACCESS: u32 = 3;
pub const EX_TYPE_CLEAR_FS: u32 = 5;
pub const EX_TYPE_FPU_RESTORE: u32 = 6;
pub const EX_TYPE_BPF: u32 = 7;
pub const EX_TYPE_WRMSR: u32 = 8;
pub const EX_TYPE_RDMSR: u32 = 9;
pub const EX_TYPE_WRMSR_SAFE: u32 = 10;
pub const EX_TYPE_RDMSR_SAFE: u32 = 11;
pub const EX_TYPE_WRMSR_IN_MCE: u32 = 12;
pub const EX_TYPE_RDMSR_IN_MCE: u32 = 13;
pub const EX_TYPE_DEFAULT_MCE_SAFE: u32 = 14;
pub const EX_TYPE_FAULT_MCE_SAFE: u32 = 15;
pub const EX_TYPE_POP_REG: u32 = 16;
pub const EX_TYPE_IMM_REG: u32 = 17;
pub const EX_TYPE_FAULT_SGX: u32 = 18;
pub const EX_TYPE_UCOPY_LEN: u32 = 19;
pub const EX_TYPE_ZEROPAD: u32 = 20;
pub const EX_TYPE_ERETU: u32 = 21;
pub const DEFINE_EXTABLE_TYPE_REG : & [u8 ; 533usize] = b".macro extable_type_reg type:req reg:req\n.set .Lfound, 0\n.set .Lregnr, 0\n.irp rs,rax,rcx,rdx,rbx,rsp,rbp,rsi,rdi,r8,r9,r10,r11,r12,r13,r14,r15\n.ifc \\reg, %%\\rs\n.set .Lfound, .Lfound+1\n.long \\type + (.Lregnr << 8)\n.endif\n.set .Lregnr, .Lregnr+1\n.endr\n.set .Lregnr, 0\n.irp rs,eax,ecx,edx,ebx,esp,ebp,esi,edi,r8d,r9d,r10d,r11d,r12d,r13d,r14d,r15d\n.ifc \\reg, %%\\rs\n.set .Lfound, .Lfound+1\n.long \\type + (.Lregnr << 8)\n.endif\n.set .Lregnr, .Lregnr+1\n.endr\n.if (.Lfound != 1)\n.error \"extable_type_reg: bad register argument\"\n.endif\n.endm\n\0" ;
pub const UNDEFINE_EXTABLE_TYPE_REG: &[u8; 26usize] = b".purgem extable_type_reg\n\0";
pub const ALT_FLAGS_SHIFT: u32 = 16;
pub const ALT_FLAG_NOT: u32 = 1;
pub const ALT_FLAG_DIRECT_CALL: u32 = 2;
pub const LOCK_PREFIX_HERE: &[u8; 70usize] =
    b".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\0";
pub const LOCK_PREFIX: &[u8; 78usize] =
    b".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; \0";
pub const ANNOTATE_IGNORE_ALTERNATIVE: &[u8; 67usize] =
    b"999:\n\t.pushsection .discard.ignore_alts\n\t.long 999b\n\t.popsection\n\t\0";
pub const ALT_CALL_INSTR: &[u8; 14usize] = b"call BUG_func\0";
pub const alt_end_marker: &[u8; 4usize] = b"663\0";
pub const alt_slen: &[u8; 10usize] = b"662b-661b\0";
pub const alt_total_slen: &[u8; 10usize] = b"663b-661b\0";
pub const NEED_3DNOW: u32 = 0;
pub const NEED_MOVBE: u32 = 0;
pub const REQUIRED_MASK2: u32 = 0;
pub const REQUIRED_MASK4: u32 = 0;
pub const REQUIRED_MASK5: u32 = 0;
pub const REQUIRED_MASK6: u32 = 0;
pub const REQUIRED_MASK7: u32 = 0;
pub const REQUIRED_MASK8: u32 = 0;
pub const REQUIRED_MASK9: u32 = 0;
pub const REQUIRED_MASK10: u32 = 0;
pub const REQUIRED_MASK11: u32 = 0;
pub const REQUIRED_MASK12: u32 = 0;
pub const REQUIRED_MASK13: u32 = 0;
pub const REQUIRED_MASK14: u32 = 0;
pub const REQUIRED_MASK15: u32 = 0;
pub const REQUIRED_MASK16: u32 = 0;
pub const REQUIRED_MASK17: u32 = 0;
pub const REQUIRED_MASK18: u32 = 0;
pub const REQUIRED_MASK19: u32 = 0;
pub const REQUIRED_MASK20: u32 = 0;
pub const REQUIRED_MASK21: u32 = 0;
pub const DISABLE_UMIP: u32 = 0;
pub const DISABLE_PCID: u32 = 0;
pub const DISABLE_PKU: u32 = 0;
pub const DISABLE_OSPKE: u32 = 0;
pub const DISABLE_LA57: u32 = 0;
pub const DISABLE_IBT: u32 = 0;
pub const DISABLED_MASK1: u32 = 0;
pub const DISABLED_MASK2: u32 = 0;
pub const DISABLED_MASK4: u32 = 0;
pub const DISABLED_MASK5: u32 = 0;
pub const DISABLED_MASK6: u32 = 0;
pub const DISABLED_MASK10: u32 = 0;
pub const DISABLED_MASK13: u32 = 0;
pub const DISABLED_MASK14: u32 = 0;
pub const DISABLED_MASK15: u32 = 0;
pub const DISABLED_MASK17: u32 = 0;
pub const DISABLED_MASK18: u32 = 0;
pub const DISABLED_MASK20: u32 = 0;
pub const DISABLED_MASK21: u32 = 0;
pub const NCAPINTS: u32 = 22;
pub const NBUGINTS: u32 = 2;
pub const X86_FEATURE_FPU: u32 = 0;
pub const X86_FEATURE_VME: u32 = 1;
pub const X86_FEATURE_DE: u32 = 2;
pub const X86_FEATURE_PSE: u32 = 3;
pub const X86_FEATURE_TSC: u32 = 4;
pub const X86_FEATURE_MSR: u32 = 5;
pub const X86_FEATURE_PAE: u32 = 6;
pub const X86_FEATURE_MCE: u32 = 7;
pub const X86_FEATURE_CX8: u32 = 8;
pub const X86_FEATURE_APIC: u32 = 9;
pub const X86_FEATURE_SEP: u32 = 11;
pub const X86_FEATURE_MTRR: u32 = 12;
pub const X86_FEATURE_PGE: u32 = 13;
pub const X86_FEATURE_MCA: u32 = 14;
pub const X86_FEATURE_CMOV: u32 = 15;
pub const X86_FEATURE_PAT: u32 = 16;
pub const X86_FEATURE_PSE36: u32 = 17;
pub const X86_FEATURE_PN: u32 = 18;
pub const X86_FEATURE_CLFLUSH: u32 = 19;
pub const X86_FEATURE_DS: u32 = 21;
pub const X86_FEATURE_ACPI: u32 = 22;
pub const X86_FEATURE_MMX: u32 = 23;
pub const X86_FEATURE_FXSR: u32 = 24;
pub const X86_FEATURE_XMM: u32 = 25;
pub const X86_FEATURE_XMM2: u32 = 26;
pub const X86_FEATURE_SELFSNOOP: u32 = 27;
pub const X86_FEATURE_HT: u32 = 28;
pub const X86_FEATURE_ACC: u32 = 29;
pub const X86_FEATURE_IA64: u32 = 30;
pub const X86_FEATURE_PBE: u32 = 31;
pub const X86_FEATURE_SYSCALL: u32 = 43;
pub const X86_FEATURE_MP: u32 = 51;
pub const X86_FEATURE_NX: u32 = 52;
pub const X86_FEATURE_MMXEXT: u32 = 54;
pub const X86_FEATURE_FXSR_OPT: u32 = 57;
pub const X86_FEATURE_GBPAGES: u32 = 58;
pub const X86_FEATURE_RDTSCP: u32 = 59;
pub const X86_FEATURE_LM: u32 = 61;
pub const X86_FEATURE_3DNOWEXT: u32 = 62;
pub const X86_FEATURE_3DNOW: u32 = 63;
pub const X86_FEATURE_RECOVERY: u32 = 64;
pub const X86_FEATURE_LONGRUN: u32 = 65;
pub const X86_FEATURE_LRTI: u32 = 67;
pub const X86_FEATURE_CXMMX: u32 = 96;
pub const X86_FEATURE_K6_MTRR: u32 = 97;
pub const X86_FEATURE_CYRIX_ARR: u32 = 98;
pub const X86_FEATURE_CENTAUR_MCR: u32 = 99;
pub const X86_FEATURE_K8: u32 = 100;
pub const X86_FEATURE_ZEN5: u32 = 101;
pub const X86_FEATURE_P3: u32 = 102;
pub const X86_FEATURE_P4: u32 = 103;
pub const X86_FEATURE_CONSTANT_TSC: u32 = 104;
pub const X86_FEATURE_UP: u32 = 105;
pub const X86_FEATURE_ART: u32 = 106;
pub const X86_FEATURE_ARCH_PERFMON: u32 = 107;
pub const X86_FEATURE_PEBS: u32 = 108;
pub const X86_FEATURE_BTS: u32 = 109;
pub const X86_FEATURE_SYSCALL32: u32 = 110;
pub const X86_FEATURE_SYSENTER32: u32 = 111;
pub const X86_FEATURE_REP_GOOD: u32 = 112;
pub const X86_FEATURE_AMD_LBR_V2: u32 = 113;
pub const X86_FEATURE_CLEAR_CPU_BUF: u32 = 114;
pub const X86_FEATURE_ACC_POWER: u32 = 115;
pub const X86_FEATURE_NOPL: u32 = 116;
pub const X86_FEATURE_ALWAYS: u32 = 117;
pub const X86_FEATURE_XTOPOLOGY: u32 = 118;
pub const X86_FEATURE_TSC_RELIABLE: u32 = 119;
pub const X86_FEATURE_NONSTOP_TSC: u32 = 120;
pub const X86_FEATURE_CPUID: u32 = 121;
pub const X86_FEATURE_EXTD_APICID: u32 = 122;
pub const X86_FEATURE_AMD_DCM: u32 = 123;
pub const X86_FEATURE_APERFMPERF: u32 = 124;
pub const X86_FEATURE_RAPL: u32 = 125;
pub const X86_FEATURE_NONSTOP_TSC_S3: u32 = 126;
pub const X86_FEATURE_TSC_KNOWN_FREQ: u32 = 127;
pub const X86_FEATURE_XMM3: u32 = 128;
pub const X86_FEATURE_PCLMULQDQ: u32 = 129;
pub const X86_FEATURE_DTES64: u32 = 130;
pub const X86_FEATURE_MWAIT: u32 = 131;
pub const X86_FEATURE_DSCPL: u32 = 132;
pub const X86_FEATURE_VMX: u32 = 133;
pub const X86_FEATURE_SMX: u32 = 134;
pub const X86_FEATURE_EST: u32 = 135;
pub const X86_FEATURE_TM2: u32 = 136;
pub const X86_FEATURE_SSSE3: u32 = 137;
pub const X86_FEATURE_CID: u32 = 138;
pub const X86_FEATURE_SDBG: u32 = 139;
pub const X86_FEATURE_FMA: u32 = 140;
pub const X86_FEATURE_CX16: u32 = 141;
pub const X86_FEATURE_XTPR: u32 = 142;
pub const X86_FEATURE_PDCM: u32 = 143;
pub const X86_FEATURE_PCID: u32 = 145;
pub const X86_FEATURE_DCA: u32 = 146;
pub const X86_FEATURE_XMM4_1: u32 = 147;
pub const X86_FEATURE_XMM4_2: u32 = 148;
pub const X86_FEATURE_X2APIC: u32 = 149;
pub const X86_FEATURE_MOVBE: u32 = 150;
pub const X86_FEATURE_POPCNT: u32 = 151;
pub const X86_FEATURE_TSC_DEADLINE_TIMER: u32 = 152;
pub const X86_FEATURE_AES: u32 = 153;
pub const X86_FEATURE_XSAVE: u32 = 154;
pub const X86_FEATURE_OSXSAVE: u32 = 155;
pub const X86_FEATURE_AVX: u32 = 156;
pub const X86_FEATURE_F16C: u32 = 157;
pub const X86_FEATURE_RDRAND: u32 = 158;
pub const X86_FEATURE_HYPERVISOR: u32 = 159;
pub const X86_FEATURE_XSTORE: u32 = 162;
pub const X86_FEATURE_XSTORE_EN: u32 = 163;
pub const X86_FEATURE_XCRYPT: u32 = 166;
pub const X86_FEATURE_XCRYPT_EN: u32 = 167;
pub const X86_FEATURE_ACE2: u32 = 168;
pub const X86_FEATURE_ACE2_EN: u32 = 169;
pub const X86_FEATURE_PHE: u32 = 170;
pub const X86_FEATURE_PHE_EN: u32 = 171;
pub const X86_FEATURE_PMM: u32 = 172;
pub const X86_FEATURE_PMM_EN: u32 = 173;
pub const X86_FEATURE_LAHF_LM: u32 = 192;
pub const X86_FEATURE_CMP_LEGACY: u32 = 193;
pub const X86_FEATURE_SVM: u32 = 194;
pub const X86_FEATURE_EXTAPIC: u32 = 195;
pub const X86_FEATURE_CR8_LEGACY: u32 = 196;
pub const X86_FEATURE_ABM: u32 = 197;
pub const X86_FEATURE_SSE4A: u32 = 198;
pub const X86_FEATURE_MISALIGNSSE: u32 = 199;
pub const X86_FEATURE_3DNOWPREFETCH: u32 = 200;
pub const X86_FEATURE_OSVW: u32 = 201;
pub const X86_FEATURE_IBS: u32 = 202;
pub const X86_FEATURE_XOP: u32 = 203;
pub const X86_FEATURE_SKINIT: u32 = 204;
pub const X86_FEATURE_WDT: u32 = 205;
pub const X86_FEATURE_LWP: u32 = 207;
pub const X86_FEATURE_FMA4: u32 = 208;
pub const X86_FEATURE_TCE: u32 = 209;
pub const X86_FEATURE_NODEID_MSR: u32 = 211;
pub const X86_FEATURE_TBM: u32 = 213;
pub const X86_FEATURE_TOPOEXT: u32 = 214;
pub const X86_FEATURE_PERFCTR_CORE: u32 = 215;
pub const X86_FEATURE_PERFCTR_NB: u32 = 216;
pub const X86_FEATURE_BPEXT: u32 = 218;
pub const X86_FEATURE_PTSC: u32 = 219;
pub const X86_FEATURE_PERFCTR_LLC: u32 = 220;
pub const X86_FEATURE_MWAITX: u32 = 221;
pub const X86_FEATURE_RING3MWAIT: u32 = 224;
pub const X86_FEATURE_CPUID_FAULT: u32 = 225;
pub const X86_FEATURE_CPB: u32 = 226;
pub const X86_FEATURE_EPB: u32 = 227;
pub const X86_FEATURE_CAT_L3: u32 = 228;
pub const X86_FEATURE_CAT_L2: u32 = 229;
pub const X86_FEATURE_CDP_L3: u32 = 230;
pub const X86_FEATURE_TDX_HOST_PLATFORM: u32 = 231;
pub const X86_FEATURE_HW_PSTATE: u32 = 232;
pub const X86_FEATURE_PROC_FEEDBACK: u32 = 233;
pub const X86_FEATURE_XCOMPACTED: u32 = 234;
pub const X86_FEATURE_PTI: u32 = 235;
pub const X86_FEATURE_KERNEL_IBRS: u32 = 236;
pub const X86_FEATURE_RSB_VMEXIT: u32 = 237;
pub const X86_FEATURE_INTEL_PPIN: u32 = 238;
pub const X86_FEATURE_CDP_L2: u32 = 239;
pub const X86_FEATURE_MSR_SPEC_CTRL: u32 = 240;
pub const X86_FEATURE_SSBD: u32 = 241;
pub const X86_FEATURE_MBA: u32 = 242;
pub const X86_FEATURE_RSB_CTXSW: u32 = 243;
pub const X86_FEATURE_PERFMON_V2: u32 = 244;
pub const X86_FEATURE_USE_IBPB: u32 = 245;
pub const X86_FEATURE_USE_IBRS_FW: u32 = 246;
pub const X86_FEATURE_SPEC_STORE_BYPASS_DISABLE: u32 = 247;
pub const X86_FEATURE_LS_CFG_SSBD: u32 = 248;
pub const X86_FEATURE_IBRS: u32 = 249;
pub const X86_FEATURE_IBPB: u32 = 250;
pub const X86_FEATURE_STIBP: u32 = 251;
pub const X86_FEATURE_ZEN: u32 = 252;
pub const X86_FEATURE_L1TF_PTEINV: u32 = 253;
pub const X86_FEATURE_IBRS_ENHANCED: u32 = 254;
pub const X86_FEATURE_MSR_IA32_FEAT_CTL: u32 = 255;
pub const X86_FEATURE_TPR_SHADOW: u32 = 256;
pub const X86_FEATURE_FLEXPRIORITY: u32 = 257;
pub const X86_FEATURE_EPT: u32 = 258;
pub const X86_FEATURE_VPID: u32 = 259;
pub const X86_FEATURE_VMMCALL: u32 = 271;
pub const X86_FEATURE_XENPV: u32 = 272;
pub const X86_FEATURE_EPT_AD: u32 = 273;
pub const X86_FEATURE_VMCALL: u32 = 274;
pub const X86_FEATURE_VMW_VMMCALL: u32 = 275;
pub const X86_FEATURE_PVUNLOCK: u32 = 276;
pub const X86_FEATURE_VCPUPREEMPT: u32 = 277;
pub const X86_FEATURE_TDX_GUEST: u32 = 278;
pub const X86_FEATURE_FSGSBASE: u32 = 288;
pub const X86_FEATURE_TSC_ADJUST: u32 = 289;
pub const X86_FEATURE_SGX: u32 = 290;
pub const X86_FEATURE_BMI1: u32 = 291;
pub const X86_FEATURE_HLE: u32 = 292;
pub const X86_FEATURE_AVX2: u32 = 293;
pub const X86_FEATURE_FDP_EXCPTN_ONLY: u32 = 294;
pub const X86_FEATURE_SMEP: u32 = 295;
pub const X86_FEATURE_BMI2: u32 = 296;
pub const X86_FEATURE_ERMS: u32 = 297;
pub const X86_FEATURE_INVPCID: u32 = 298;
pub const X86_FEATURE_RTM: u32 = 299;
pub const X86_FEATURE_CQM: u32 = 300;
pub const X86_FEATURE_ZERO_FCS_FDS: u32 = 301;
pub const X86_FEATURE_MPX: u32 = 302;
pub const X86_FEATURE_RDT_A: u32 = 303;
pub const X86_FEATURE_AVX512F: u32 = 304;
pub const X86_FEATURE_AVX512DQ: u32 = 305;
pub const X86_FEATURE_RDSEED: u32 = 306;
pub const X86_FEATURE_ADX: u32 = 307;
pub const X86_FEATURE_SMAP: u32 = 308;
pub const X86_FEATURE_AVX512IFMA: u32 = 309;
pub const X86_FEATURE_CLFLUSHOPT: u32 = 311;
pub const X86_FEATURE_CLWB: u32 = 312;
pub const X86_FEATURE_INTEL_PT: u32 = 313;
pub const X86_FEATURE_AVX512PF: u32 = 314;
pub const X86_FEATURE_AVX512ER: u32 = 315;
pub const X86_FEATURE_AVX512CD: u32 = 316;
pub const X86_FEATURE_SHA_NI: u32 = 317;
pub const X86_FEATURE_AVX512BW: u32 = 318;
pub const X86_FEATURE_AVX512VL: u32 = 319;
pub const X86_FEATURE_XSAVEOPT: u32 = 320;
pub const X86_FEATURE_XSAVEC: u32 = 321;
pub const X86_FEATURE_XGETBV1: u32 = 322;
pub const X86_FEATURE_XSAVES: u32 = 323;
pub const X86_FEATURE_XFD: u32 = 324;
pub const X86_FEATURE_CQM_LLC: u32 = 352;
pub const X86_FEATURE_CQM_OCCUP_LLC: u32 = 353;
pub const X86_FEATURE_CQM_MBM_TOTAL: u32 = 354;
pub const X86_FEATURE_CQM_MBM_LOCAL: u32 = 355;
pub const X86_FEATURE_FENCE_SWAPGS_USER: u32 = 356;
pub const X86_FEATURE_FENCE_SWAPGS_KERNEL: u32 = 357;
pub const X86_FEATURE_SPLIT_LOCK_DETECT: u32 = 358;
pub const X86_FEATURE_PER_THREAD_MBA: u32 = 359;
pub const X86_FEATURE_SGX1: u32 = 360;
pub const X86_FEATURE_SGX2: u32 = 361;
pub const X86_FEATURE_ENTRY_IBPB: u32 = 362;
pub const X86_FEATURE_RRSBA_CTRL: u32 = 363;
pub const X86_FEATURE_RETPOLINE: u32 = 364;
pub const X86_FEATURE_RETPOLINE_LFENCE: u32 = 365;
pub const X86_FEATURE_RETHUNK: u32 = 366;
pub const X86_FEATURE_UNRET: u32 = 367;
pub const X86_FEATURE_USE_IBPB_FW: u32 = 368;
pub const X86_FEATURE_RSB_VMEXIT_LITE: u32 = 369;
pub const X86_FEATURE_SGX_EDECCSSA: u32 = 370;
pub const X86_FEATURE_CALL_DEPTH: u32 = 371;
pub const X86_FEATURE_MSR_TSX_CTRL: u32 = 372;
pub const X86_FEATURE_SMBA: u32 = 373;
pub const X86_FEATURE_BMEC: u32 = 374;
pub const X86_FEATURE_USER_SHSTK: u32 = 375;
pub const X86_FEATURE_SRSO: u32 = 376;
pub const X86_FEATURE_SRSO_ALIAS: u32 = 377;
pub const X86_FEATURE_IBPB_ON_VMEXIT: u32 = 378;
pub const X86_FEATURE_APIC_MSRS_FENCE: u32 = 379;
pub const X86_FEATURE_ZEN2: u32 = 380;
pub const X86_FEATURE_ZEN3: u32 = 381;
pub const X86_FEATURE_ZEN4: u32 = 382;
pub const X86_FEATURE_ZEN1: u32 = 383;
pub const X86_FEATURE_AVX_VNNI: u32 = 388;
pub const X86_FEATURE_AVX512_BF16: u32 = 389;
pub const X86_FEATURE_CMPCCXADD: u32 = 391;
pub const X86_FEATURE_ARCH_PERFMON_EXT: u32 = 392;
pub const X86_FEATURE_FZRM: u32 = 394;
pub const X86_FEATURE_FSRS: u32 = 395;
pub const X86_FEATURE_FSRC: u32 = 396;
pub const X86_FEATURE_FRED: u32 = 401;
pub const X86_FEATURE_LKGS: u32 = 402;
pub const X86_FEATURE_WRMSRNS: u32 = 403;
pub const X86_FEATURE_AMX_FP16: u32 = 405;
pub const X86_FEATURE_AVX_IFMA: u32 = 407;
pub const X86_FEATURE_LAM: u32 = 410;
pub const X86_FEATURE_CLZERO: u32 = 416;
pub const X86_FEATURE_IRPERF: u32 = 417;
pub const X86_FEATURE_XSAVEERPTR: u32 = 418;
pub const X86_FEATURE_RDPRU: u32 = 420;
pub const X86_FEATURE_WBNOINVD: u32 = 425;
pub const X86_FEATURE_AMD_IBPB: u32 = 428;
pub const X86_FEATURE_AMD_IBRS: u32 = 430;
pub const X86_FEATURE_AMD_STIBP: u32 = 431;
pub const X86_FEATURE_AMD_STIBP_ALWAYS_ON: u32 = 433;
pub const X86_FEATURE_AMD_PPIN: u32 = 439;
pub const X86_FEATURE_AMD_SSBD: u32 = 440;
pub const X86_FEATURE_VIRT_SSBD: u32 = 441;
pub const X86_FEATURE_AMD_SSB_NO: u32 = 442;
pub const X86_FEATURE_CPPC: u32 = 443;
pub const X86_FEATURE_AMD_PSFD: u32 = 444;
pub const X86_FEATURE_BTC_NO: u32 = 445;
pub const X86_FEATURE_BRS: u32 = 447;
pub const X86_FEATURE_DTHERM: u32 = 448;
pub const X86_FEATURE_IDA: u32 = 449;
pub const X86_FEATURE_ARAT: u32 = 450;
pub const X86_FEATURE_PLN: u32 = 452;
pub const X86_FEATURE_PTS: u32 = 454;
pub const X86_FEATURE_HWP: u32 = 455;
pub const X86_FEATURE_HWP_NOTIFY: u32 = 456;
pub const X86_FEATURE_HWP_ACT_WINDOW: u32 = 457;
pub const X86_FEATURE_HWP_EPP: u32 = 458;
pub const X86_FEATURE_HWP_PKG_REQ: u32 = 459;
pub const X86_FEATURE_HFI: u32 = 467;
pub const X86_FEATURE_NPT: u32 = 480;
pub const X86_FEATURE_LBRV: u32 = 481;
pub const X86_FEATURE_SVML: u32 = 482;
pub const X86_FEATURE_NRIPS: u32 = 483;
pub const X86_FEATURE_TSCRATEMSR: u32 = 484;
pub const X86_FEATURE_VMCBCLEAN: u32 = 485;
pub const X86_FEATURE_FLUSHBYASID: u32 = 486;
pub const X86_FEATURE_DECODEASSISTS: u32 = 487;
pub const X86_FEATURE_PAUSEFILTER: u32 = 490;
pub const X86_FEATURE_PFTHRESHOLD: u32 = 492;
pub const X86_FEATURE_AVIC: u32 = 493;
pub const X86_FEATURE_V_VMSAVE_VMLOAD: u32 = 495;
pub const X86_FEATURE_VGIF: u32 = 496;
pub const X86_FEATURE_X2AVIC: u32 = 498;
pub const X86_FEATURE_V_SPEC_CTRL: u32 = 500;
pub const X86_FEATURE_VNMI: u32 = 505;
pub const X86_FEATURE_SVME_ADDR_CHK: u32 = 508;
pub const X86_FEATURE_AVX512VBMI: u32 = 513;
pub const X86_FEATURE_UMIP: u32 = 514;
pub const X86_FEATURE_PKU: u32 = 515;
pub const X86_FEATURE_OSPKE: u32 = 516;
pub const X86_FEATURE_WAITPKG: u32 = 517;
pub const X86_FEATURE_AVX512_VBMI2: u32 = 518;
pub const X86_FEATURE_SHSTK: u32 = 519;
pub const X86_FEATURE_GFNI: u32 = 520;
pub const X86_FEATURE_VAES: u32 = 521;
pub const X86_FEATURE_VPCLMULQDQ: u32 = 522;
pub const X86_FEATURE_AVX512_VNNI: u32 = 523;
pub const X86_FEATURE_AVX512_BITALG: u32 = 524;
pub const X86_FEATURE_TME: u32 = 525;
pub const X86_FEATURE_AVX512_VPOPCNTDQ: u32 = 526;
pub const X86_FEATURE_LA57: u32 = 528;
pub const X86_FEATURE_RDPID: u32 = 534;
pub const X86_FEATURE_BUS_LOCK_DETECT: u32 = 536;
pub const X86_FEATURE_CLDEMOTE: u32 = 537;
pub const X86_FEATURE_MOVDIRI: u32 = 539;
pub const X86_FEATURE_MOVDIR64B: u32 = 540;
pub const X86_FEATURE_ENQCMD: u32 = 541;
pub const X86_FEATURE_SGX_LC: u32 = 542;
pub const X86_FEATURE_OVERFLOW_RECOV: u32 = 544;
pub const X86_FEATURE_SUCCOR: u32 = 545;
pub const X86_FEATURE_SMCA: u32 = 547;
pub const X86_FEATURE_AVX512_4VNNIW: u32 = 578;
pub const X86_FEATURE_AVX512_4FMAPS: u32 = 579;
pub const X86_FEATURE_FSRM: u32 = 580;
pub const X86_FEATURE_AVX512_VP2INTERSECT: u32 = 584;
pub const X86_FEATURE_SRBDS_CTRL: u32 = 585;
pub const X86_FEATURE_MD_CLEAR: u32 = 586;
pub const X86_FEATURE_RTM_ALWAYS_ABORT: u32 = 587;
pub const X86_FEATURE_TSX_FORCE_ABORT: u32 = 589;
pub const X86_FEATURE_SERIALIZE: u32 = 590;
pub const X86_FEATURE_HYBRID_CPU: u32 = 591;
pub const X86_FEATURE_TSXLDTRK: u32 = 592;
pub const X86_FEATURE_PCONFIG: u32 = 594;
pub const X86_FEATURE_ARCH_LBR: u32 = 595;
pub const X86_FEATURE_IBT: u32 = 596;
pub const X86_FEATURE_AMX_BF16: u32 = 598;
pub const X86_FEATURE_AVX512_FP16: u32 = 599;
pub const X86_FEATURE_AMX_TILE: u32 = 600;
pub const X86_FEATURE_AMX_INT8: u32 = 601;
pub const X86_FEATURE_SPEC_CTRL: u32 = 602;
pub const X86_FEATURE_INTEL_STIBP: u32 = 603;
pub const X86_FEATURE_FLUSH_L1D: u32 = 604;
pub const X86_FEATURE_ARCH_CAPABILITIES: u32 = 605;
pub const X86_FEATURE_CORE_CAPABILITIES: u32 = 606;
pub const X86_FEATURE_SPEC_CTRL_SSBD: u32 = 607;
pub const X86_FEATURE_SME: u32 = 608;
pub const X86_FEATURE_SEV: u32 = 609;
pub const X86_FEATURE_VM_PAGE_FLUSH: u32 = 610;
pub const X86_FEATURE_SEV_ES: u32 = 611;
pub const X86_FEATURE_SEV_SNP: u32 = 612;
pub const X86_FEATURE_V_TSC_AUX: u32 = 617;
pub const X86_FEATURE_SME_COHERENT: u32 = 618;
pub const X86_FEATURE_DEBUG_SWAP: u32 = 622;
pub const X86_FEATURE_NO_NESTED_DATA_BP: u32 = 640;
pub const X86_FEATURE_WRMSR_XX_BASE_NS: u32 = 641;
pub const X86_FEATURE_LFENCE_RDTSC: u32 = 642;
pub const X86_FEATURE_NULL_SEL_CLR_BASE: u32 = 646;
pub const X86_FEATURE_AUTOIBRS: u32 = 648;
pub const X86_FEATURE_NO_SMM_CTL_MSR: u32 = 649;
pub const X86_FEATURE_SBPB: u32 = 667;
pub const X86_FEATURE_IBPB_BRTYPE: u32 = 668;
pub const X86_FEATURE_SRSO_NO: u32 = 669;
pub const X86_FEATURE_AMD_LBR_PMC_FREEZE: u32 = 672;
pub const X86_FEATURE_CLEAR_BHB_LOOP: u32 = 673;
pub const X86_FEATURE_BHI_CTRL: u32 = 674;
pub const X86_FEATURE_CLEAR_BHB_HW: u32 = 675;
pub const X86_FEATURE_CLEAR_BHB_LOOP_ON_VMEXIT: u32 = 676;
pub const __X86_CASE_B: u32 = 1;
pub const __X86_CASE_W: u32 = 2;
pub const __X86_CASE_L: u32 = 4;
pub const __X86_CASE_Q: u32 = 8;
pub const BYTES_NOP1: u32 = 144;
pub const ASM_NOP_MAX: u32 = 11;
pub const UNWIND_HINT_TYPE_UNDEFINED: u32 = 0;
pub const UNWIND_HINT_TYPE_END_OF_STACK: u32 = 1;
pub const UNWIND_HINT_TYPE_CALL: u32 = 2;
pub const UNWIND_HINT_TYPE_REGS: u32 = 3;
pub const UNWIND_HINT_TYPE_REGS_PARTIAL: u32 = 4;
pub const UNWIND_HINT_TYPE_FUNC: u32 = 5;
pub const UNWIND_HINT_TYPE_SAVE: u32 = 6;
pub const UNWIND_HINT_TYPE_RESTORE: u32 = 7;
pub const ANNOTATE_NOENDBR: &[u8; 64usize] =
    b"986: \n\t.pushsection .discard.noendbr\n\t.long 986b\n\t.popsection\n\t\0";
pub const ASM_REACHABLE: &[u8; 65usize] =
    b"998:\n\t.pushsection .discard.reachable\n\t.long 998b\n\t.popsection\n\t\0";
pub const ASM_UD2: &[u8; 17usize] = b".byte 0x0f, 0x0b\0";
pub const INSN_UD2: u32 = 2831;
pub const LEN_UD2: u32 = 2;
pub const CUT_HERE: &[u8; 38usize] = b"------------[ cut here ]------------\n\0";
pub const BUGFLAG_WARNING: u32 = 1;
pub const BUGFLAG_ONCE: u32 = 2;
pub const BUGFLAG_DONE: u32 = 4;
pub const BUGFLAG_NO_CUT_HERE: u32 = 8;
pub const PANIC_CPU_INVALID: i32 = -1;
pub const TAINT_PROPRIETARY_MODULE: u32 = 0;
pub const TAINT_FORCED_MODULE: u32 = 1;
pub const TAINT_CPU_OUT_OF_SPEC: u32 = 2;
pub const TAINT_FORCED_RMMOD: u32 = 3;
pub const TAINT_MACHINE_CHECK: u32 = 4;
pub const TAINT_BAD_PAGE: u32 = 5;
pub const TAINT_USER: u32 = 6;
pub const TAINT_DIE: u32 = 7;
pub const TAINT_OVERRIDDEN_ACPI_TABLE: u32 = 8;
pub const TAINT_WARN: u32 = 9;
pub const TAINT_CRAP: u32 = 10;
pub const TAINT_FIRMWARE_WORKAROUND: u32 = 11;
pub const TAINT_OOT_MODULE: u32 = 12;
pub const TAINT_UNSIGNED_MODULE: u32 = 13;
pub const TAINT_SOFTLOCKUP: u32 = 14;
pub const TAINT_LIVEPATCH: u32 = 15;
pub const TAINT_AUX: u32 = 16;
pub const TAINT_RANDSTRUCT: u32 = 17;
pub const TAINT_TEST: u32 = 18;
pub const TAINT_FLAGS_COUNT: u32 = 19;
pub const TAINT_FLAGS_MAX: u32 = 524287;
pub const PREEMPT_BITS: u32 = 8;
pub const SOFTIRQ_BITS: u32 = 8;
pub const HARDIRQ_BITS: u32 = 4;
pub const NMI_BITS: u32 = 4;
pub const PREEMPT_SHIFT: u32 = 0;
pub const SOFTIRQ_SHIFT: u32 = 8;
pub const HARDIRQ_SHIFT: u32 = 16;
pub const NMI_SHIFT: u32 = 20;
pub const PREEMPT_OFFSET: u32 = 1;
pub const SOFTIRQ_OFFSET: u32 = 256;
pub const HARDIRQ_OFFSET: u32 = 65536;
pub const NMI_OFFSET: u32 = 1048576;
pub const SOFTIRQ_DISABLE_OFFSET: u32 = 512;
pub const INIT_PREEMPT_COUNT: u32 = 1;
pub const NR_CPUS: u32 = 2;
pub const MIN_THREADS_LEFT_FOR_ROOT: u32 = 4;
pub const PIDS_PER_CPU_DEFAULT: u32 = 1024;
pub const PIDS_PER_CPU_MIN: u32 = 8;
pub const PER_CPU_SHARED_ALIGNED_SECTION: &[u8; 1usize] = b"\0";
pub const PER_CPU_ALIGNED_SECTION: &[u8; 1usize] = b"\0";
pub const PER_CPU_FIRST_SECTION: &[u8; 8usize] = b"..first\0";
pub const PER_CPU_BASE_SECTION: &[u8; 14usize] = b".data..percpu\0";
pub const SI_LOAD_SHIFT: u32 = 16;
pub const L1_CACHE_SHIFT: u32 = 6;
pub const L1_CACHE_BYTES: u32 = 64;
pub const INTERNODE_CACHE_SHIFT: u32 = 6;
pub const INTERNODE_CACHE_BYTES: u32 = 64;
pub const SMP_CACHE_BYTES: u32 = 64;
pub const STATIC_CALL_SITE_TAIL: u32 = 1;
pub const STATIC_CALL_SITE_INIT: u32 = 2;
pub const STATIC_CALL_SITE_FLAGS: u32 = 3;
pub const PREEMPT_NEED_RESCHED: u32 = 2147483648;
pub const PREEMPT_ENABLED: u32 = 2147483648;
pub const PREEMPT_DISABLE_OFFSET: u32 = 0;
pub const PREEMPT_LOCK_OFFSET: u32 = 0;
pub const SOFTIRQ_LOCK_OFFSET: u32 = 512;
pub const X86_EFLAGS_CF_BIT: u32 = 0;
pub const X86_EFLAGS_FIXED_BIT: u32 = 1;
pub const X86_EFLAGS_PF_BIT: u32 = 2;
pub const X86_EFLAGS_AF_BIT: u32 = 4;
pub const X86_EFLAGS_ZF_BIT: u32 = 6;
pub const X86_EFLAGS_SF_BIT: u32 = 7;
pub const X86_EFLAGS_TF_BIT: u32 = 8;
pub const X86_EFLAGS_IF_BIT: u32 = 9;
pub const X86_EFLAGS_DF_BIT: u32 = 10;
pub const X86_EFLAGS_OF_BIT: u32 = 11;
pub const X86_EFLAGS_IOPL_BIT: u32 = 12;
pub const X86_EFLAGS_NT_BIT: u32 = 14;
pub const X86_EFLAGS_RF_BIT: u32 = 16;
pub const X86_EFLAGS_VM_BIT: u32 = 17;
pub const X86_EFLAGS_AC_BIT: u32 = 18;
pub const X86_EFLAGS_VIF_BIT: u32 = 19;
pub const X86_EFLAGS_VIP_BIT: u32 = 20;
pub const X86_EFLAGS_ID_BIT: u32 = 21;
pub const X86_CR0_PE_BIT: u32 = 0;
pub const X86_CR0_MP_BIT: u32 = 1;
pub const X86_CR0_EM_BIT: u32 = 2;
pub const X86_CR0_TS_BIT: u32 = 3;
pub const X86_CR0_ET_BIT: u32 = 4;
pub const X86_CR0_NE_BIT: u32 = 5;
pub const X86_CR0_WP_BIT: u32 = 16;
pub const X86_CR0_AM_BIT: u32 = 18;
pub const X86_CR0_NW_BIT: u32 = 29;
pub const X86_CR0_CD_BIT: u32 = 30;
pub const X86_CR0_PG_BIT: u32 = 31;
pub const X86_CR3_PWT_BIT: u32 = 3;
pub const X86_CR3_PCD_BIT: u32 = 4;
pub const X86_CR3_PCID_BITS: u32 = 12;
pub const X86_CR3_LAM_U57_BIT: u32 = 61;
pub const X86_CR3_LAM_U48_BIT: u32 = 62;
pub const X86_CR3_PCID_NOFLUSH_BIT: u32 = 63;
pub const X86_CR4_VME_BIT: u32 = 0;
pub const X86_CR4_PVI_BIT: u32 = 1;
pub const X86_CR4_TSD_BIT: u32 = 2;
pub const X86_CR4_DE_BIT: u32 = 3;
pub const X86_CR4_PSE_BIT: u32 = 4;
pub const X86_CR4_PAE_BIT: u32 = 5;
pub const X86_CR4_MCE_BIT: u32 = 6;
pub const X86_CR4_PGE_BIT: u32 = 7;
pub const X86_CR4_PCE_BIT: u32 = 8;
pub const X86_CR4_OSFXSR_BIT: u32 = 9;
pub const X86_CR4_OSXMMEXCPT_BIT: u32 = 10;
pub const X86_CR4_UMIP_BIT: u32 = 11;
pub const X86_CR4_LA57_BIT: u32 = 12;
pub const X86_CR4_VMXE_BIT: u32 = 13;
pub const X86_CR4_SMXE_BIT: u32 = 14;
pub const X86_CR4_FSGSBASE_BIT: u32 = 16;
pub const X86_CR4_PCIDE_BIT: u32 = 17;
pub const X86_CR4_OSXSAVE_BIT: u32 = 18;
pub const X86_CR4_SMEP_BIT: u32 = 20;
pub const X86_CR4_SMAP_BIT: u32 = 21;
pub const X86_CR4_PKE_BIT: u32 = 22;
pub const X86_CR4_CET_BIT: u32 = 23;
pub const X86_CR4_LAM_SUP_BIT: u32 = 28;
pub const X86_CR4_FRED_BIT: u32 = 32;
pub const CX86_PCR0: u32 = 32;
pub const CX86_GCR: u32 = 184;
pub const CX86_CCR0: u32 = 192;
pub const CX86_CCR1: u32 = 193;
pub const CX86_CCR2: u32 = 194;
pub const CX86_CCR3: u32 = 195;
pub const CX86_CCR4: u32 = 232;
pub const CX86_CCR5: u32 = 233;
pub const CX86_CCR6: u32 = 234;
pub const CX86_CCR7: u32 = 235;
pub const CX86_PCR1: u32 = 240;
pub const CX86_DIR0: u32 = 254;
pub const CX86_DIR1: u32 = 255;
pub const CX86_ARR_BASE: u32 = 196;
pub const CX86_RCR_BASE: u32 = 220;
pub const sme_me_mask: u32 = 0;
pub const sev_status: u32 = 0;
pub const X86_VM_MASK: u32 = 0;
pub const CR3_PCID_MASK: u32 = 4095;
pub const MSR_EFER: u32 = 3221225600;
pub const MSR_STAR: u32 = 3221225601;
pub const MSR_LSTAR: u32 = 3221225602;
pub const MSR_CSTAR: u32 = 3221225603;
pub const MSR_SYSCALL_MASK: u32 = 3221225604;
pub const MSR_FS_BASE: u32 = 3221225728;
pub const MSR_GS_BASE: u32 = 3221225729;
pub const MSR_KERNEL_GS_BASE: u32 = 3221225730;
pub const MSR_TSC_AUX: u32 = 3221225731;
pub const _EFER_SCE: u32 = 0;
pub const _EFER_LME: u32 = 8;
pub const _EFER_LMA: u32 = 10;
pub const _EFER_NX: u32 = 11;
pub const _EFER_SVME: u32 = 12;
pub const _EFER_LMSLE: u32 = 13;
pub const _EFER_FFXSR: u32 = 14;
pub const _EFER_AUTOIBRS: u32 = 21;
pub const EFER_SCE: u32 = 1;
pub const EFER_LME: u32 = 256;
pub const EFER_LMA: u32 = 1024;
pub const EFER_NX: u32 = 2048;
pub const EFER_SVME: u32 = 4096;
pub const EFER_LMSLE: u32 = 8192;
pub const EFER_FFXSR: u32 = 16384;
pub const EFER_AUTOIBRS: u32 = 2097152;
pub const MSR_IA32_FRED_RSP0: u32 = 460;
pub const MSR_IA32_FRED_RSP1: u32 = 461;
pub const MSR_IA32_FRED_RSP2: u32 = 462;
pub const MSR_IA32_FRED_RSP3: u32 = 463;
pub const MSR_IA32_FRED_STKLVLS: u32 = 464;
pub const MSR_IA32_FRED_SSP1: u32 = 465;
pub const MSR_IA32_FRED_SSP2: u32 = 466;
pub const MSR_IA32_FRED_SSP3: u32 = 467;
pub const MSR_IA32_FRED_CONFIG: u32 = 468;
pub const MSR_TEST_CTRL: u32 = 51;
pub const MSR_TEST_CTRL_SPLIT_LOCK_DETECT_BIT: u32 = 29;
pub const MSR_IA32_SPEC_CTRL: u32 = 72;
pub const SPEC_CTRL_STIBP_SHIFT: u32 = 1;
pub const SPEC_CTRL_SSBD_SHIFT: u32 = 2;
pub const SPEC_CTRL_RRSBA_DIS_S_SHIFT: u32 = 6;
pub const SPEC_CTRL_BHI_DIS_S_SHIFT: u32 = 10;
pub const MSR_IA32_PRED_CMD: u32 = 73;
pub const MSR_PPIN_CTL: u32 = 78;
pub const MSR_PPIN: u32 = 79;
pub const MSR_IA32_PERFCTR0: u32 = 193;
pub const MSR_IA32_PERFCTR1: u32 = 194;
pub const MSR_FSB_FREQ: u32 = 205;
pub const MSR_PLATFORM_INFO: u32 = 206;
pub const MSR_PLATFORM_INFO_CPUID_FAULT_BIT: u32 = 31;
pub const MSR_IA32_UMWAIT_CONTROL: u32 = 225;
pub const MSR_IA32_UMWAIT_CONTROL_TIME_MASK: i32 = -4;
pub const MSR_IA32_CORE_CAPS: u32 = 207;
pub const MSR_IA32_CORE_CAPS_INTEGRITY_CAPS_BIT: u32 = 2;
pub const MSR_IA32_CORE_CAPS_SPLIT_LOCK_DETECT_BIT: u32 = 5;
pub const MSR_PKG_CST_CONFIG_CONTROL: u32 = 226;
pub const NHM_C3_AUTO_DEMOTE: u32 = 33554432;
pub const NHM_C1_AUTO_DEMOTE: u32 = 67108864;
pub const ATM_LNC_C6_AUTO_DEMOTE: u32 = 33554432;
pub const SNB_C3_AUTO_UNDEMOTE: u32 = 134217728;
pub const SNB_C1_AUTO_UNDEMOTE: u32 = 268435456;
pub const MSR_MTRRcap: u32 = 254;
pub const MSR_IA32_ARCH_CAPABILITIES: u32 = 266;
pub const MSR_IA32_FLUSH_CMD: u32 = 267;
pub const MSR_IA32_BBL_CR_CTL: u32 = 281;
pub const MSR_IA32_BBL_CR_CTL3: u32 = 286;
pub const MSR_IA32_TSX_CTRL: u32 = 290;
pub const MSR_IA32_MCU_OPT_CTRL: u32 = 291;
pub const MSR_IA32_SYSENTER_CS: u32 = 372;
pub const MSR_IA32_SYSENTER_ESP: u32 = 373;
pub const MSR_IA32_SYSENTER_EIP: u32 = 374;
pub const MSR_IA32_MCG_CAP: u32 = 377;
pub const MSR_IA32_MCG_STATUS: u32 = 378;
pub const MSR_IA32_MCG_CTL: u32 = 379;
pub const MSR_ERROR_CONTROL: u32 = 383;
pub const MSR_IA32_MCG_EXT_CTL: u32 = 1232;
pub const MSR_OFFCORE_RSP_0: u32 = 422;
pub const MSR_OFFCORE_RSP_1: u32 = 423;
pub const MSR_TURBO_RATIO_LIMIT: u32 = 429;
pub const MSR_TURBO_RATIO_LIMIT1: u32 = 430;
pub const MSR_TURBO_RATIO_LIMIT2: u32 = 431;
pub const MSR_SNOOP_RSP_0: u32 = 4904;
pub const MSR_SNOOP_RSP_1: u32 = 4905;
pub const MSR_LBR_SELECT: u32 = 456;
pub const MSR_LBR_TOS: u32 = 457;
pub const MSR_IA32_POWER_CTL: u32 = 508;
pub const MSR_IA32_POWER_CTL_BIT_EE: u32 = 19;
pub const MSR_INTEGRITY_CAPS: u32 = 729;
pub const MSR_INTEGRITY_CAPS_ARRAY_BIST_BIT: u32 = 2;
pub const MSR_INTEGRITY_CAPS_PERIODIC_BIST_BIT: u32 = 4;
pub const MSR_LBR_NHM_FROM: u32 = 1664;
pub const MSR_LBR_NHM_TO: u32 = 1728;
pub const MSR_LBR_CORE_FROM: u32 = 64;
pub const MSR_LBR_CORE_TO: u32 = 96;
pub const MSR_LBR_INFO_0: u32 = 3520;
pub const LBR_INFO_CYCLES: u32 = 65535;
pub const LBR_INFO_BR_TYPE_OFFSET: u32 = 56;
pub const LBR_INFO_BR_TYPE: u64 = 1080863910568919040;
pub const LBR_INFO_BR_CNTR_OFFSET: u32 = 32;
pub const LBR_INFO_BR_CNTR_NUM: u32 = 4;
pub const LBR_INFO_BR_CNTR_BITS: u32 = 2;
pub const MSR_ARCH_LBR_CTL: u32 = 5326;
pub const ARCH_LBR_CTL_CPL_OFFSET: u32 = 1;
pub const ARCH_LBR_CTL_CPL: u32 = 6;
pub const ARCH_LBR_CTL_STACK_OFFSET: u32 = 3;
pub const ARCH_LBR_CTL_STACK: u32 = 8;
pub const ARCH_LBR_CTL_FILTER_OFFSET: u32 = 16;
pub const ARCH_LBR_CTL_FILTER: u32 = 8323072;
pub const MSR_ARCH_LBR_DEPTH: u32 = 5327;
pub const MSR_ARCH_LBR_FROM_0: u32 = 5376;
pub const MSR_ARCH_LBR_TO_0: u32 = 5632;
pub const MSR_ARCH_LBR_INFO_0: u32 = 4608;
pub const MSR_IA32_PEBS_ENABLE: u32 = 1009;
pub const MSR_PEBS_DATA_CFG: u32 = 1010;
pub const MSR_IA32_DS_AREA: u32 = 1536;
pub const MSR_IA32_PERF_CAPABILITIES: u32 = 837;
pub const PERF_CAP_METRICS_IDX: u32 = 15;
pub const PERF_CAP_PT_IDX: u32 = 16;
pub const MSR_PEBS_LD_LAT_THRESHOLD: u32 = 1014;
pub const PERF_CAP_PEBS_FORMAT: u32 = 3840;
pub const MSR_IA32_RTIT_CTL: u32 = 1392;
pub const RTIT_CTL_MTC_RANGE_OFFSET: u32 = 14;
pub const RTIT_CTL_MTC_RANGE: u32 = 245760;
pub const RTIT_CTL_CYC_THRESH_OFFSET: u32 = 19;
pub const RTIT_CTL_CYC_THRESH: u32 = 7864320;
pub const RTIT_CTL_PSB_FREQ_OFFSET: u32 = 24;
pub const RTIT_CTL_PSB_FREQ: u32 = 251658240;
pub const RTIT_CTL_ADDR0_OFFSET: u32 = 32;
pub const RTIT_CTL_ADDR0: u64 = 64424509440;
pub const RTIT_CTL_ADDR1_OFFSET: u32 = 36;
pub const RTIT_CTL_ADDR1: u64 = 1030792151040;
pub const RTIT_CTL_ADDR2_OFFSET: u32 = 40;
pub const RTIT_CTL_ADDR2: u64 = 16492674416640;
pub const RTIT_CTL_ADDR3_OFFSET: u32 = 44;
pub const RTIT_CTL_ADDR3: u64 = 263882790666240;
pub const MSR_IA32_RTIT_STATUS: u32 = 1393;
pub const RTIT_STATUS_BYTECNT_OFFSET: u32 = 32;
pub const RTIT_STATUS_BYTECNT: u64 = 562945658454016;
pub const MSR_IA32_RTIT_ADDR0_A: u32 = 1408;
pub const MSR_IA32_RTIT_ADDR0_B: u32 = 1409;
pub const MSR_IA32_RTIT_ADDR1_A: u32 = 1410;
pub const MSR_IA32_RTIT_ADDR1_B: u32 = 1411;
pub const MSR_IA32_RTIT_ADDR2_A: u32 = 1412;
pub const MSR_IA32_RTIT_ADDR2_B: u32 = 1413;
pub const MSR_IA32_RTIT_ADDR3_A: u32 = 1414;
pub const MSR_IA32_RTIT_ADDR3_B: u32 = 1415;
pub const MSR_IA32_RTIT_CR3_MATCH: u32 = 1394;
pub const MSR_IA32_RTIT_OUTPUT_BASE: u32 = 1376;
pub const MSR_IA32_RTIT_OUTPUT_MASK: u32 = 1377;
pub const MSR_MTRRfix64K_00000: u32 = 592;
pub const MSR_MTRRfix16K_80000: u32 = 600;
pub const MSR_MTRRfix16K_A0000: u32 = 601;
pub const MSR_MTRRfix4K_C0000: u32 = 616;
pub const MSR_MTRRfix4K_C8000: u32 = 617;
pub const MSR_MTRRfix4K_D0000: u32 = 618;
pub const MSR_MTRRfix4K_D8000: u32 = 619;
pub const MSR_MTRRfix4K_E0000: u32 = 620;
pub const MSR_MTRRfix4K_E8000: u32 = 621;
pub const MSR_MTRRfix4K_F0000: u32 = 622;
pub const MSR_MTRRfix4K_F8000: u32 = 623;
pub const MSR_MTRRdefType: u32 = 767;
pub const MSR_IA32_CR_PAT: u32 = 631;
pub const MSR_IA32_DEBUGCTLMSR: u32 = 473;
pub const MSR_IA32_LASTBRANCHFROMIP: u32 = 475;
pub const MSR_IA32_LASTBRANCHTOIP: u32 = 476;
pub const MSR_IA32_LASTINTFROMIP: u32 = 477;
pub const MSR_IA32_LASTINTTOIP: u32 = 478;
pub const MSR_IA32_PASID: u32 = 3475;
pub const DEBUGCTLMSR_LBR: u32 = 1;
pub const DEBUGCTLMSR_BTF_SHIFT: u32 = 1;
pub const DEBUGCTLMSR_BTF: u32 = 2;
pub const DEBUGCTLMSR_BUS_LOCK_DETECT: u32 = 4;
pub const DEBUGCTLMSR_TR: u32 = 64;
pub const DEBUGCTLMSR_BTS: u32 = 128;
pub const DEBUGCTLMSR_BTINT: u32 = 256;
pub const DEBUGCTLMSR_BTS_OFF_OS: u32 = 512;
pub const DEBUGCTLMSR_BTS_OFF_USR: u32 = 1024;
pub const DEBUGCTLMSR_FREEZE_LBRS_ON_PMI: u32 = 2048;
pub const DEBUGCTLMSR_FREEZE_PERFMON_ON_PMI: u32 = 4096;
pub const DEBUGCTLMSR_FREEZE_IN_SMM_BIT: u32 = 14;
pub const DEBUGCTLMSR_FREEZE_IN_SMM: u32 = 16384;
pub const MSR_PEBS_FRONTEND: u32 = 1015;
pub const MSR_IA32_MC0_CTL: u32 = 1024;
pub const MSR_IA32_MC0_STATUS: u32 = 1025;
pub const MSR_IA32_MC0_ADDR: u32 = 1026;
pub const MSR_IA32_MC0_MISC: u32 = 1027;
pub const MSR_PKG_C3_RESIDENCY: u32 = 1016;
pub const MSR_PKG_C6_RESIDENCY: u32 = 1017;
pub const MSR_ATOM_PKG_C6_RESIDENCY: u32 = 1018;
pub const MSR_PKG_C7_RESIDENCY: u32 = 1018;
pub const MSR_CORE_C3_RESIDENCY: u32 = 1020;
pub const MSR_CORE_C6_RESIDENCY: u32 = 1021;
pub const MSR_CORE_C7_RESIDENCY: u32 = 1022;
pub const MSR_KNL_CORE_C6_RESIDENCY: u32 = 1023;
pub const MSR_PKG_C2_RESIDENCY: u32 = 1549;
pub const MSR_PKG_C8_RESIDENCY: u32 = 1584;
pub const MSR_PKG_C9_RESIDENCY: u32 = 1585;
pub const MSR_PKG_C10_RESIDENCY: u32 = 1586;
pub const MSR_PKGC3_IRTL: u32 = 1546;
pub const MSR_PKGC6_IRTL: u32 = 1547;
pub const MSR_PKGC7_IRTL: u32 = 1548;
pub const MSR_PKGC8_IRTL: u32 = 1587;
pub const MSR_PKGC9_IRTL: u32 = 1588;
pub const MSR_PKGC10_IRTL: u32 = 1589;
pub const MSR_VR_CURRENT_CONFIG: u32 = 1537;
pub const MSR_RAPL_POWER_UNIT: u32 = 1542;
pub const MSR_PKG_POWER_LIMIT: u32 = 1552;
pub const MSR_PKG_ENERGY_STATUS: u32 = 1553;
pub const MSR_PKG_PERF_STATUS: u32 = 1555;
pub const MSR_PKG_POWER_INFO: u32 = 1556;
pub const MSR_DRAM_POWER_LIMIT: u32 = 1560;
pub const MSR_DRAM_ENERGY_STATUS: u32 = 1561;
pub const MSR_DRAM_PERF_STATUS: u32 = 1563;
pub const MSR_DRAM_POWER_INFO: u32 = 1564;
pub const MSR_PP0_POWER_LIMIT: u32 = 1592;
pub const MSR_PP0_ENERGY_STATUS: u32 = 1593;
pub const MSR_PP0_POLICY: u32 = 1594;
pub const MSR_PP0_PERF_STATUS: u32 = 1595;
pub const MSR_PP1_POWER_LIMIT: u32 = 1600;
pub const MSR_PP1_ENERGY_STATUS: u32 = 1601;
pub const MSR_PP1_POLICY: u32 = 1602;
pub const MSR_AMD_RAPL_POWER_UNIT: u32 = 3221291673;
pub const MSR_AMD_CORE_ENERGY_STATUS: u32 = 3221291674;
pub const MSR_AMD_PKG_ENERGY_STATUS: u32 = 3221291675;
pub const MSR_CONFIG_TDP_NOMINAL: u32 = 1608;
pub const MSR_CONFIG_TDP_LEVEL_1: u32 = 1609;
pub const MSR_CONFIG_TDP_LEVEL_2: u32 = 1610;
pub const MSR_CONFIG_TDP_CONTROL: u32 = 1611;
pub const MSR_TURBO_ACTIVATION_RATIO: u32 = 1612;
pub const MSR_PLATFORM_ENERGY_STATUS: u32 = 1613;
pub const MSR_SECONDARY_TURBO_RATIO_LIMIT: u32 = 1616;
pub const MSR_PKG_WEIGHTED_CORE_C0_RES: u32 = 1624;
pub const MSR_PKG_ANY_CORE_C0_RES: u32 = 1625;
pub const MSR_PKG_ANY_GFXE_C0_RES: u32 = 1626;
pub const MSR_PKG_BOTH_CORE_GFXE_C0_RES: u32 = 1627;
pub const MSR_CORE_C1_RES: u32 = 1632;
pub const MSR_MODULE_C6_RES_MS: u32 = 1636;
pub const MSR_CC6_DEMOTION_POLICY_CONFIG: u32 = 1640;
pub const MSR_MC6_DEMOTION_POLICY_CONFIG: u32 = 1641;
pub const MSR_ATOM_CORE_RATIOS: u32 = 1642;
pub const MSR_ATOM_CORE_VIDS: u32 = 1643;
pub const MSR_ATOM_CORE_TURBO_RATIOS: u32 = 1644;
pub const MSR_ATOM_CORE_TURBO_VIDS: u32 = 1645;
pub const MSR_CORE_PERF_LIMIT_REASONS: u32 = 1680;
pub const MSR_GFX_PERF_LIMIT_REASONS: u32 = 1712;
pub const MSR_RING_PERF_LIMIT_REASONS: u32 = 1713;
pub const MSR_IA32_U_CET: u32 = 1696;
pub const MSR_IA32_S_CET: u32 = 1698;
pub const MSR_IA32_PL0_SSP: u32 = 1700;
pub const MSR_IA32_PL1_SSP: u32 = 1701;
pub const MSR_IA32_PL2_SSP: u32 = 1702;
pub const MSR_IA32_PL3_SSP: u32 = 1703;
pub const MSR_IA32_INT_SSP_TAB: u32 = 1704;
pub const MSR_PPERF: u32 = 1614;
pub const MSR_PERF_LIMIT_REASONS: u32 = 1615;
pub const MSR_PM_ENABLE: u32 = 1904;
pub const MSR_HWP_CAPABILITIES: u32 = 1905;
pub const MSR_HWP_REQUEST_PKG: u32 = 1906;
pub const MSR_HWP_INTERRUPT: u32 = 1907;
pub const MSR_HWP_REQUEST: u32 = 1908;
pub const MSR_HWP_STATUS: u32 = 1911;
pub const HWP_BASE_BIT: u32 = 128;
pub const HWP_NOTIFICATIONS_BIT: u32 = 256;
pub const HWP_ACTIVITY_WINDOW_BIT: u32 = 512;
pub const HWP_ENERGY_PERF_PREFERENCE_BIT: u32 = 1024;
pub const HWP_PACKAGE_LEVEL_REQUEST_BIT: u32 = 2048;
pub const HWP_EPP_PERFORMANCE: u32 = 0;
pub const HWP_EPP_BALANCE_PERFORMANCE: u32 = 128;
pub const HWP_EPP_BALANCE_POWERSAVE: u32 = 192;
pub const HWP_EPP_POWERSAVE: u32 = 255;
pub const MSR_AMD64_MC0_MASK: u32 = 3221291076;
pub const MSR_IA32_MC0_CTL2: u32 = 640;
pub const MSR_P6_PERFCTR0: u32 = 193;
pub const MSR_P6_PERFCTR1: u32 = 194;
pub const MSR_P6_EVNTSEL0: u32 = 390;
pub const MSR_P6_EVNTSEL1: u32 = 391;
pub const MSR_KNC_PERFCTR0: u32 = 32;
pub const MSR_KNC_PERFCTR1: u32 = 33;
pub const MSR_KNC_EVNTSEL0: u32 = 40;
pub const MSR_KNC_EVNTSEL1: u32 = 41;
pub const MSR_IA32_PMC0: u32 = 1217;
pub const MSR_RELOAD_PMC0: u32 = 5313;
pub const MSR_RELOAD_FIXED_CTR0: u32 = 4873;
pub const MSR_IA32_MKTME_KEYID_PARTITIONING: u32 = 135;
pub const MSR_AMD64_PATCH_LEVEL: u32 = 139;
pub const MSR_AMD64_TSC_RATIO: u32 = 3221225732;
pub const MSR_AMD64_NB_CFG: u32 = 3221291039;
pub const MSR_AMD64_PATCH_LOADER: u32 = 3221291040;
pub const MSR_AMD_PERF_CTL: u32 = 3221291106;
pub const MSR_AMD_PERF_STATUS: u32 = 3221291107;
pub const MSR_AMD_PSTATE_DEF_BASE: u32 = 3221291108;
pub const MSR_AMD64_OSVW_ID_LENGTH: u32 = 3221291328;
pub const MSR_AMD64_OSVW_STATUS: u32 = 3221291329;
pub const MSR_AMD_PPIN_CTL: u32 = 3221291760;
pub const MSR_AMD_PPIN: u32 = 3221291761;
pub const MSR_AMD64_CPUID_FN_1: u32 = 3221295108;
pub const MSR_AMD64_LS_CFG: u32 = 3221295136;
pub const MSR_AMD64_DC_CFG: u32 = 3221295138;
pub const MSR_AMD64_TW_CFG: u32 = 3221295139;
pub const MSR_AMD64_DE_CFG: u32 = 3221295145;
pub const MSR_AMD64_DE_CFG_LFENCE_SERIALIZE_BIT: u32 = 1;
pub const MSR_AMD64_DE_CFG_ZEN2_FP_BACKUP_FIX_BIT: u32 = 9;
pub const MSR_AMD64_BU_CFG2: u32 = 3221295146;
pub const MSR_AMD64_IBSFETCHCTL: u32 = 3221295152;
pub const MSR_AMD64_IBSFETCHLINAD: u32 = 3221295153;
pub const MSR_AMD64_IBSFETCHPHYSAD: u32 = 3221295154;
pub const MSR_AMD64_IBSFETCH_REG_COUNT: u32 = 3;
pub const MSR_AMD64_IBSFETCH_REG_MASK: u32 = 7;
pub const MSR_AMD64_IBSOPCTL: u32 = 3221295155;
pub const MSR_AMD64_IBSOPRIP: u32 = 3221295156;
pub const MSR_AMD64_IBSOPDATA: u32 = 3221295157;
pub const MSR_AMD64_IBSOPDATA2: u32 = 3221295158;
pub const MSR_AMD64_IBSOPDATA3: u32 = 3221295159;
pub const MSR_AMD64_IBSDCLINAD: u32 = 3221295160;
pub const MSR_AMD64_IBSDCPHYSAD: u32 = 3221295161;
pub const MSR_AMD64_IBSOP_REG_COUNT: u32 = 7;
pub const MSR_AMD64_IBSOP_REG_MASK: u32 = 127;
pub const MSR_AMD64_IBSCTL: u32 = 3221295162;
pub const MSR_AMD64_IBSBRTARGET: u32 = 3221295163;
pub const MSR_AMD64_ICIBSEXTDCTL: u32 = 3221295164;
pub const MSR_AMD64_IBSOPDATA4: u32 = 3221295165;
pub const MSR_AMD64_IBS_REG_COUNT_MAX: u32 = 8;
pub const MSR_AMD64_SVM_AVIC_DOORBELL: u32 = 3221291291;
pub const MSR_AMD64_VM_PAGE_FLUSH: u32 = 3221291294;
pub const MSR_AMD64_SEV_ES_GHCB: u32 = 3221291312;
pub const MSR_AMD64_SEV: u32 = 3221291313;
pub const MSR_AMD64_SEV_ENABLED_BIT: u32 = 0;
pub const MSR_AMD64_SEV_ES_ENABLED_BIT: u32 = 1;
pub const MSR_AMD64_SEV_SNP_ENABLED_BIT: u32 = 2;
pub const MSR_AMD64_SNP_VTOM_BIT: u32 = 3;
pub const MSR_AMD64_SNP_REFLECT_VC_BIT: u32 = 4;
pub const MSR_AMD64_SNP_RESTRICTED_INJ_BIT: u32 = 5;
pub const MSR_AMD64_SNP_ALT_INJ_BIT: u32 = 6;
pub const MSR_AMD64_SNP_DEBUG_SWAP_BIT: u32 = 7;
pub const MSR_AMD64_SNP_PREVENT_HOST_IBS_BIT: u32 = 8;
pub const MSR_AMD64_SNP_BTB_ISOLATION_BIT: u32 = 9;
pub const MSR_AMD64_SNP_VMPL_SSS_BIT: u32 = 10;
pub const MSR_AMD64_SNP_SECURE_TSC_BIT: u32 = 11;
pub const MSR_AMD64_SNP_VMGEXIT_PARAM_BIT: u32 = 12;
pub const MSR_AMD64_SNP_IBS_VIRT_BIT: u32 = 14;
pub const MSR_AMD64_SNP_VMSA_REG_PROT_BIT: u32 = 16;
pub const MSR_AMD64_SNP_SMT_PROT_BIT: u32 = 17;
pub const MSR_AMD64_SNP_RESV_BIT: u32 = 18;
pub const MSR_AMD64_VIRT_SPEC_CTRL: u32 = 3221291295;
pub const MSR_AMD64_RMP_BASE: u32 = 3221291314;
pub const MSR_AMD64_RMP_END: u32 = 3221291315;
pub const MSR_AMD_CPPC_CAP1: u32 = 3221291696;
pub const MSR_AMD_CPPC_ENABLE: u32 = 3221291697;
pub const MSR_AMD_CPPC_CAP2: u32 = 3221291698;
pub const MSR_AMD_CPPC_REQ: u32 = 3221291699;
pub const MSR_AMD_CPPC_STATUS: u32 = 3221291700;
pub const MSR_AMD64_PERF_CNTR_GLOBAL_STATUS: u32 = 3221226240;
pub const MSR_AMD64_PERF_CNTR_GLOBAL_CTL: u32 = 3221226241;
pub const MSR_AMD64_PERF_CNTR_GLOBAL_STATUS_CLR: u32 = 3221226242;
pub const MSR_AMD64_LBR_SELECT: u32 = 3221225742;
pub const MSR_ZEN4_BP_CFG: u32 = 3221295150;
pub const MSR_ZEN4_BP_CFG_SHARED_BTB_FIX_BIT: u32 = 5;
pub const MSR_F19H_UMC_PERF_CTL: u32 = 3221293056;
pub const MSR_F19H_UMC_PERF_CTR: u32 = 3221293057;
pub const MSR_ZEN2_SPECTRAL_CHICKEN: u32 = 3221295331;
pub const MSR_F17H_IRPERF: u32 = 3221225705;
pub const MSR_F16H_L2I_PERF_CTL: u32 = 3221291568;
pub const MSR_F16H_L2I_PERF_CTR: u32 = 3221291569;
pub const MSR_F16H_DR1_ADDR_MASK: u32 = 3221295129;
pub const MSR_F16H_DR2_ADDR_MASK: u32 = 3221295130;
pub const MSR_F16H_DR3_ADDR_MASK: u32 = 3221295131;
pub const MSR_F16H_DR0_ADDR_MASK: u32 = 3221295143;
pub const MSR_F15H_CU_PWR_ACCUMULATOR: u32 = 3221291130;
pub const MSR_F15H_CU_MAX_PWR_ACCUMULATOR: u32 = 3221291131;
pub const MSR_F15H_PERF_CTL: u32 = 3221291520;
pub const MSR_F15H_PERF_CTL0: u32 = 3221291520;
pub const MSR_F15H_PERF_CTL1: u32 = 3221291522;
pub const MSR_F15H_PERF_CTL2: u32 = 3221291524;
pub const MSR_F15H_PERF_CTL3: u32 = 3221291526;
pub const MSR_F15H_PERF_CTL4: u32 = 3221291528;
pub const MSR_F15H_PERF_CTL5: u32 = 3221291530;
pub const MSR_F15H_PERF_CTR: u32 = 3221291521;
pub const MSR_F15H_PERF_CTR0: u32 = 3221291521;
pub const MSR_F15H_PERF_CTR1: u32 = 3221291523;
pub const MSR_F15H_PERF_CTR2: u32 = 3221291525;
pub const MSR_F15H_PERF_CTR3: u32 = 3221291527;
pub const MSR_F15H_PERF_CTR4: u32 = 3221291529;
pub const MSR_F15H_PERF_CTR5: u32 = 3221291531;
pub const MSR_F15H_NB_PERF_CTL: u32 = 3221291584;
pub const MSR_F15H_NB_PERF_CTR: u32 = 3221291585;
pub const MSR_F15H_PTSC: u32 = 3221291648;
pub const MSR_F15H_IC_CFG: u32 = 3221295137;
pub const MSR_F15H_EX_CFG: u32 = 3221295148;
pub const MSR_FAM10H_MMIO_CONF_BASE: u32 = 3221291096;
pub const FAM10H_MMIO_CONF_ENABLE: u32 = 1;
pub const FAM10H_MMIO_CONF_BUSRANGE_MASK: u32 = 15;
pub const FAM10H_MMIO_CONF_BUSRANGE_SHIFT: u32 = 2;
pub const FAM10H_MMIO_CONF_BASE_MASK: u32 = 268435455;
pub const FAM10H_MMIO_CONF_BASE_SHIFT: u32 = 20;
pub const MSR_FAM10H_NODE_ID: u32 = 3221295116;
pub const MSR_K8_TOP_MEM1: u32 = 3221291034;
pub const MSR_K8_TOP_MEM2: u32 = 3221291037;
pub const MSR_AMD64_SYSCFG: u32 = 3221291024;
pub const MSR_AMD64_SYSCFG_MEM_ENCRYPT_BIT: u32 = 23;
pub const MSR_AMD64_SYSCFG_SNP_EN_BIT: u32 = 24;
pub const MSR_AMD64_SYSCFG_SNP_VMPL_EN_BIT: u32 = 25;
pub const MSR_AMD64_SYSCFG_MFDM_BIT: u32 = 19;
pub const MSR_K8_INT_PENDING_MSG: u32 = 3221291093;
pub const K8_INTP_C1E_ACTIVE_MASK: u32 = 402653184;
pub const MSR_K8_TSEG_ADDR: u32 = 3221291282;
pub const MSR_K8_TSEG_MASK: u32 = 3221291283;
pub const K8_MTRRFIXRANGE_DRAM_ENABLE: u32 = 262144;
pub const K8_MTRRFIXRANGE_DRAM_MODIFY: u32 = 524288;
pub const K8_MTRR_RDMEM_WRMEM_MASK: u32 = 404232216;
pub const MSR_K7_EVNTSEL0: u32 = 3221291008;
pub const MSR_K7_PERFCTR0: u32 = 3221291012;
pub const MSR_K7_EVNTSEL1: u32 = 3221291009;
pub const MSR_K7_PERFCTR1: u32 = 3221291013;
pub const MSR_K7_EVNTSEL2: u32 = 3221291010;
pub const MSR_K7_PERFCTR2: u32 = 3221291014;
pub const MSR_K7_EVNTSEL3: u32 = 3221291011;
pub const MSR_K7_PERFCTR3: u32 = 3221291015;
pub const MSR_K7_CLK_CTL: u32 = 3221291035;
pub const MSR_K7_HWCR: u32 = 3221291029;
pub const MSR_K7_HWCR_SMMLOCK_BIT: u32 = 0;
pub const MSR_K7_HWCR_IRPERF_EN_BIT: u32 = 30;
pub const MSR_K7_FID_VID_CTL: u32 = 3221291073;
pub const MSR_K7_FID_VID_STATUS: u32 = 3221291074;
pub const MSR_K6_WHCR: u32 = 3221225602;
pub const MSR_K6_UWCCR: u32 = 3221225605;
pub const MSR_K6_EPMR: u32 = 3221225606;
pub const MSR_K6_PSOR: u32 = 3221225607;
pub const MSR_K6_PFIR: u32 = 3221225608;
pub const MSR_IDT_FCR1: u32 = 263;
pub const MSR_IDT_FCR2: u32 = 264;
pub const MSR_IDT_FCR3: u32 = 265;
pub const MSR_IDT_FCR4: u32 = 266;
pub const MSR_IDT_MCR0: u32 = 272;
pub const MSR_IDT_MCR1: u32 = 273;
pub const MSR_IDT_MCR2: u32 = 274;
pub const MSR_IDT_MCR3: u32 = 275;
pub const MSR_IDT_MCR4: u32 = 276;
pub const MSR_IDT_MCR5: u32 = 277;
pub const MSR_IDT_MCR6: u32 = 278;
pub const MSR_IDT_MCR7: u32 = 279;
pub const MSR_IDT_MCR_CTRL: u32 = 288;
pub const MSR_VIA_FCR: u32 = 4359;
pub const MSR_VIA_LONGHAUL: u32 = 4362;
pub const MSR_VIA_RNG: u32 = 4363;
pub const MSR_VIA_BCR2: u32 = 4423;
pub const MSR_TMTA_LONGRUN_CTRL: u32 = 2156298256;
pub const MSR_TMTA_LONGRUN_FLAGS: u32 = 2156298257;
pub const MSR_TMTA_LRTI_READOUT: u32 = 2156298264;
pub const MSR_TMTA_LRTI_VOLT_MHZ: u32 = 2156298266;
pub const MSR_IA32_P5_MC_ADDR: u32 = 0;
pub const MSR_IA32_P5_MC_TYPE: u32 = 1;
pub const MSR_IA32_TSC: u32 = 16;
pub const MSR_IA32_PLATFORM_ID: u32 = 23;
pub const MSR_IA32_EBL_CR_POWERON: u32 = 42;
pub const MSR_EBC_FREQUENCY_ID: u32 = 44;
pub const MSR_SMI_COUNT: u32 = 52;
pub const MSR_IA32_FEAT_CTL: u32 = 58;
pub const MSR_IA32_TSC_ADJUST: u32 = 59;
pub const MSR_IA32_BNDCFGS: u32 = 3472;
pub const MSR_IA32_BNDCFGS_RSVD: u32 = 4092;
pub const MSR_IA32_XFD: u32 = 452;
pub const MSR_IA32_XFD_ERR: u32 = 453;
pub const MSR_IA32_XSS: u32 = 3488;
pub const MSR_IA32_APICBASE: u32 = 27;
pub const MSR_IA32_APICBASE_BSP: u32 = 256;
pub const MSR_IA32_APICBASE_ENABLE: u32 = 2048;
pub const MSR_IA32_APICBASE_BASE: u32 = 4294963200;
pub const MSR_IA32_UCODE_WRITE: u32 = 121;
pub const MSR_IA32_UCODE_REV: u32 = 139;
pub const MSR_IA32_SGXLEPUBKEYHASH0: u32 = 140;
pub const MSR_IA32_SGXLEPUBKEYHASH1: u32 = 141;
pub const MSR_IA32_SGXLEPUBKEYHASH2: u32 = 142;
pub const MSR_IA32_SGXLEPUBKEYHASH3: u32 = 143;
pub const MSR_IA32_SMM_MONITOR_CTL: u32 = 155;
pub const MSR_IA32_SMBASE: u32 = 158;
pub const MSR_IA32_PERF_STATUS: u32 = 408;
pub const MSR_IA32_PERF_CTL: u32 = 409;
pub const INTEL_PERF_CTL_MASK: u32 = 65535;
pub const MSR_AMD_DBG_EXTN_CFG: u32 = 3221225743;
pub const MSR_AMD_SAMP_BR_FROM: u32 = 3221291776;
pub const MSR_IA32_MPERF: u32 = 231;
pub const MSR_IA32_APERF: u32 = 232;
pub const MSR_IA32_THERM_CONTROL: u32 = 410;
pub const MSR_IA32_THERM_INTERRUPT: u32 = 411;
pub const THERM_INT_HIGH_ENABLE: u32 = 1;
pub const THERM_INT_LOW_ENABLE: u32 = 2;
pub const THERM_INT_PLN_ENABLE: u32 = 16777216;
pub const MSR_IA32_THERM_STATUS: u32 = 412;
pub const THERM_STATUS_PROCHOT: u32 = 1;
pub const THERM_STATUS_POWER_LIMIT: u32 = 1024;
pub const MSR_THERM2_CTL: u32 = 413;
pub const MSR_THERM2_CTL_TM_SELECT: u32 = 65536;
pub const MSR_IA32_MISC_ENABLE: u32 = 416;
pub const MSR_IA32_TEMPERATURE_TARGET: u32 = 418;
pub const MSR_MISC_FEATURE_CONTROL: u32 = 420;
pub const MSR_MISC_PWR_MGMT: u32 = 426;
pub const MSR_IA32_ENERGY_PERF_BIAS: u32 = 432;
pub const ENERGY_PERF_BIAS_PERFORMANCE: u32 = 0;
pub const ENERGY_PERF_BIAS_BALANCE_PERFORMANCE: u32 = 4;
pub const ENERGY_PERF_BIAS_NORMAL: u32 = 6;
pub const ENERGY_PERF_BIAS_NORMAL_POWERSAVE: u32 = 7;
pub const ENERGY_PERF_BIAS_BALANCE_POWERSAVE: u32 = 8;
pub const ENERGY_PERF_BIAS_POWERSAVE: u32 = 15;
pub const MSR_IA32_PACKAGE_THERM_STATUS: u32 = 433;
pub const PACKAGE_THERM_STATUS_PROCHOT: u32 = 1;
pub const PACKAGE_THERM_STATUS_POWER_LIMIT: u32 = 1024;
pub const PACKAGE_THERM_STATUS_HFI_UPDATED: u32 = 67108864;
pub const MSR_IA32_PACKAGE_THERM_INTERRUPT: u32 = 434;
pub const PACKAGE_THERM_INT_HIGH_ENABLE: u32 = 1;
pub const PACKAGE_THERM_INT_LOW_ENABLE: u32 = 2;
pub const PACKAGE_THERM_INT_PLN_ENABLE: u32 = 16777216;
pub const PACKAGE_THERM_INT_HFI_ENABLE: u32 = 33554432;
pub const THERM_INT_THRESHOLD0_ENABLE: u32 = 32768;
pub const THERM_SHIFT_THRESHOLD0: u32 = 8;
pub const THERM_MASK_THRESHOLD0: u32 = 32512;
pub const THERM_INT_THRESHOLD1_ENABLE: u32 = 8388608;
pub const THERM_SHIFT_THRESHOLD1: u32 = 16;
pub const THERM_MASK_THRESHOLD1: u32 = 8323072;
pub const THERM_STATUS_THRESHOLD0: u32 = 64;
pub const THERM_LOG_THRESHOLD0: u32 = 128;
pub const THERM_STATUS_THRESHOLD1: u32 = 256;
pub const THERM_LOG_THRESHOLD1: u32 = 512;
pub const MSR_IA32_MISC_ENABLE_FAST_STRING_BIT: u32 = 0;
pub const MSR_IA32_MISC_ENABLE_FAST_STRING: u32 = 1;
pub const MSR_IA32_MISC_ENABLE_TCC_BIT: u32 = 1;
pub const MSR_IA32_MISC_ENABLE_TCC: u32 = 2;
pub const MSR_IA32_MISC_ENABLE_EMON_BIT: u32 = 7;
pub const MSR_IA32_MISC_ENABLE_EMON: u32 = 128;
pub const MSR_IA32_MISC_ENABLE_BTS_UNAVAIL_BIT: u32 = 11;
pub const MSR_IA32_MISC_ENABLE_BTS_UNAVAIL: u32 = 2048;
pub const MSR_IA32_MISC_ENABLE_PEBS_UNAVAIL_BIT: u32 = 12;
pub const MSR_IA32_MISC_ENABLE_PEBS_UNAVAIL: u32 = 4096;
pub const MSR_IA32_MISC_ENABLE_ENHANCED_SPEEDSTEP_BIT: u32 = 16;
pub const MSR_IA32_MISC_ENABLE_ENHANCED_SPEEDSTEP: u32 = 65536;
pub const MSR_IA32_MISC_ENABLE_MWAIT_BIT: u32 = 18;
pub const MSR_IA32_MISC_ENABLE_MWAIT: u32 = 262144;
pub const MSR_IA32_MISC_ENABLE_LIMIT_CPUID_BIT: u32 = 22;
pub const MSR_IA32_MISC_ENABLE_LIMIT_CPUID: u32 = 4194304;
pub const MSR_IA32_MISC_ENABLE_XTPR_DISABLE_BIT: u32 = 23;
pub const MSR_IA32_MISC_ENABLE_XTPR_DISABLE: u32 = 8388608;
pub const MSR_IA32_MISC_ENABLE_XD_DISABLE_BIT: u32 = 34;
pub const MSR_IA32_MISC_ENABLE_XD_DISABLE: u64 = 17179869184;
pub const MSR_IA32_MISC_ENABLE_X87_COMPAT_BIT: u32 = 2;
pub const MSR_IA32_MISC_ENABLE_X87_COMPAT: u32 = 4;
pub const MSR_IA32_MISC_ENABLE_TM1_BIT: u32 = 3;
pub const MSR_IA32_MISC_ENABLE_TM1: u32 = 8;
pub const MSR_IA32_MISC_ENABLE_SPLIT_LOCK_DISABLE_BIT: u32 = 4;
pub const MSR_IA32_MISC_ENABLE_SPLIT_LOCK_DISABLE: u32 = 16;
pub const MSR_IA32_MISC_ENABLE_L3CACHE_DISABLE_BIT: u32 = 6;
pub const MSR_IA32_MISC_ENABLE_L3CACHE_DISABLE: u32 = 64;
pub const MSR_IA32_MISC_ENABLE_SUPPRESS_LOCK_BIT: u32 = 8;
pub const MSR_IA32_MISC_ENABLE_SUPPRESS_LOCK: u32 = 256;
pub const MSR_IA32_MISC_ENABLE_PREFETCH_DISABLE_BIT: u32 = 9;
pub const MSR_IA32_MISC_ENABLE_PREFETCH_DISABLE: u32 = 512;
pub const MSR_IA32_MISC_ENABLE_FERR_BIT: u32 = 10;
pub const MSR_IA32_MISC_ENABLE_FERR: u32 = 1024;
pub const MSR_IA32_MISC_ENABLE_FERR_MULTIPLEX_BIT: u32 = 10;
pub const MSR_IA32_MISC_ENABLE_FERR_MULTIPLEX: u32 = 1024;
pub const MSR_IA32_MISC_ENABLE_TM2_BIT: u32 = 13;
pub const MSR_IA32_MISC_ENABLE_TM2: u32 = 8192;
pub const MSR_IA32_MISC_ENABLE_ADJ_PREF_DISABLE_BIT: u32 = 19;
pub const MSR_IA32_MISC_ENABLE_ADJ_PREF_DISABLE: u32 = 524288;
pub const MSR_IA32_MISC_ENABLE_SPEEDSTEP_LOCK_BIT: u32 = 20;
pub const MSR_IA32_MISC_ENABLE_SPEEDSTEP_LOCK: u32 = 1048576;
pub const MSR_IA32_MISC_ENABLE_L1D_CONTEXT_BIT: u32 = 24;
pub const MSR_IA32_MISC_ENABLE_L1D_CONTEXT: u32 = 16777216;
pub const MSR_IA32_MISC_ENABLE_DCU_PREF_DISABLE_BIT: u32 = 37;
pub const MSR_IA32_MISC_ENABLE_DCU_PREF_DISABLE: u64 = 137438953472;
pub const MSR_IA32_MISC_ENABLE_TURBO_DISABLE_BIT: u32 = 38;
pub const MSR_IA32_MISC_ENABLE_TURBO_DISABLE: u64 = 274877906944;
pub const MSR_IA32_MISC_ENABLE_IP_PREF_DISABLE_BIT: u32 = 39;
pub const MSR_IA32_MISC_ENABLE_IP_PREF_DISABLE: u64 = 549755813888;
pub const MSR_MISC_FEATURES_ENABLES: u32 = 320;
pub const MSR_MISC_FEATURES_ENABLES_CPUID_FAULT_BIT: u32 = 0;
pub const MSR_MISC_FEATURES_ENABLES_RING3MWAIT_BIT: u32 = 1;
pub const MSR_IA32_TSC_DEADLINE: u32 = 1760;
pub const MSR_TSX_FORCE_ABORT: u32 = 271;
pub const MSR_TFA_RTM_FORCE_ABORT_BIT: u32 = 0;
pub const MSR_TFA_TSX_CPUID_CLEAR_BIT: u32 = 1;
pub const MSR_TFA_SDV_ENABLE_RTM_BIT: u32 = 2;
pub const MSR_IA32_MCG_EAX: u32 = 384;
pub const MSR_IA32_MCG_EBX: u32 = 385;
pub const MSR_IA32_MCG_ECX: u32 = 386;
pub const MSR_IA32_MCG_EDX: u32 = 387;
pub const MSR_IA32_MCG_ESI: u32 = 388;
pub const MSR_IA32_MCG_EDI: u32 = 389;
pub const MSR_IA32_MCG_EBP: u32 = 390;
pub const MSR_IA32_MCG_ESP: u32 = 391;
pub const MSR_IA32_MCG_EFLAGS: u32 = 392;
pub const MSR_IA32_MCG_EIP: u32 = 393;
pub const MSR_IA32_MCG_RESERVED: u32 = 394;
pub const MSR_P4_BPU_PERFCTR0: u32 = 768;
pub const MSR_P4_BPU_PERFCTR1: u32 = 769;
pub const MSR_P4_BPU_PERFCTR2: u32 = 770;
pub const MSR_P4_BPU_PERFCTR3: u32 = 771;
pub const MSR_P4_MS_PERFCTR0: u32 = 772;
pub const MSR_P4_MS_PERFCTR1: u32 = 773;
pub const MSR_P4_MS_PERFCTR2: u32 = 774;
pub const MSR_P4_MS_PERFCTR3: u32 = 775;
pub const MSR_P4_FLAME_PERFCTR0: u32 = 776;
pub const MSR_P4_FLAME_PERFCTR1: u32 = 777;
pub const MSR_P4_FLAME_PERFCTR2: u32 = 778;
pub const MSR_P4_FLAME_PERFCTR3: u32 = 779;
pub const MSR_P4_IQ_PERFCTR0: u32 = 780;
pub const MSR_P4_IQ_PERFCTR1: u32 = 781;
pub const MSR_P4_IQ_PERFCTR2: u32 = 782;
pub const MSR_P4_IQ_PERFCTR3: u32 = 783;
pub const MSR_P4_IQ_PERFCTR4: u32 = 784;
pub const MSR_P4_IQ_PERFCTR5: u32 = 785;
pub const MSR_P4_BPU_CCCR0: u32 = 864;
pub const MSR_P4_BPU_CCCR1: u32 = 865;
pub const MSR_P4_BPU_CCCR2: u32 = 866;
pub const MSR_P4_BPU_CCCR3: u32 = 867;
pub const MSR_P4_MS_CCCR0: u32 = 868;
pub const MSR_P4_MS_CCCR1: u32 = 869;
pub const MSR_P4_MS_CCCR2: u32 = 870;
pub const MSR_P4_MS_CCCR3: u32 = 871;
pub const MSR_P4_FLAME_CCCR0: u32 = 872;
pub const MSR_P4_FLAME_CCCR1: u32 = 873;
pub const MSR_P4_FLAME_CCCR2: u32 = 874;
pub const MSR_P4_FLAME_CCCR3: u32 = 875;
pub const MSR_P4_IQ_CCCR0: u32 = 876;
pub const MSR_P4_IQ_CCCR1: u32 = 877;
pub const MSR_P4_IQ_CCCR2: u32 = 878;
pub const MSR_P4_IQ_CCCR3: u32 = 879;
pub const MSR_P4_IQ_CCCR4: u32 = 880;
pub const MSR_P4_IQ_CCCR5: u32 = 881;
pub const MSR_P4_ALF_ESCR0: u32 = 970;
pub const MSR_P4_ALF_ESCR1: u32 = 971;
pub const MSR_P4_BPU_ESCR0: u32 = 946;
pub const MSR_P4_BPU_ESCR1: u32 = 947;
pub const MSR_P4_BSU_ESCR0: u32 = 928;
pub const MSR_P4_BSU_ESCR1: u32 = 929;
pub const MSR_P4_CRU_ESCR0: u32 = 952;
pub const MSR_P4_CRU_ESCR1: u32 = 953;
pub const MSR_P4_CRU_ESCR2: u32 = 972;
pub const MSR_P4_CRU_ESCR3: u32 = 973;
pub const MSR_P4_CRU_ESCR4: u32 = 992;
pub const MSR_P4_CRU_ESCR5: u32 = 993;
pub const MSR_P4_DAC_ESCR0: u32 = 936;
pub const MSR_P4_DAC_ESCR1: u32 = 937;
pub const MSR_P4_FIRM_ESCR0: u32 = 932;
pub const MSR_P4_FIRM_ESCR1: u32 = 933;
pub const MSR_P4_FLAME_ESCR0: u32 = 934;
pub const MSR_P4_FLAME_ESCR1: u32 = 935;
pub const MSR_P4_FSB_ESCR0: u32 = 930;
pub const MSR_P4_FSB_ESCR1: u32 = 931;
pub const MSR_P4_IQ_ESCR0: u32 = 954;
pub const MSR_P4_IQ_ESCR1: u32 = 955;
pub const MSR_P4_IS_ESCR0: u32 = 948;
pub const MSR_P4_IS_ESCR1: u32 = 949;
pub const MSR_P4_ITLB_ESCR0: u32 = 950;
pub const MSR_P4_ITLB_ESCR1: u32 = 951;
pub const MSR_P4_IX_ESCR0: u32 = 968;
pub const MSR_P4_IX_ESCR1: u32 = 969;
pub const MSR_P4_MOB_ESCR0: u32 = 938;
pub const MSR_P4_MOB_ESCR1: u32 = 939;
pub const MSR_P4_MS_ESCR0: u32 = 960;
pub const MSR_P4_MS_ESCR1: u32 = 961;
pub const MSR_P4_PMH_ESCR0: u32 = 940;
pub const MSR_P4_PMH_ESCR1: u32 = 941;
pub const MSR_P4_RAT_ESCR0: u32 = 956;
pub const MSR_P4_RAT_ESCR1: u32 = 957;
pub const MSR_P4_SAAT_ESCR0: u32 = 942;
pub const MSR_P4_SAAT_ESCR1: u32 = 943;
pub const MSR_P4_SSU_ESCR0: u32 = 958;
pub const MSR_P4_SSU_ESCR1: u32 = 959;
pub const MSR_P4_TBPU_ESCR0: u32 = 962;
pub const MSR_P4_TBPU_ESCR1: u32 = 963;
pub const MSR_P4_TC_ESCR0: u32 = 964;
pub const MSR_P4_TC_ESCR1: u32 = 965;
pub const MSR_P4_U2L_ESCR0: u32 = 944;
pub const MSR_P4_U2L_ESCR1: u32 = 945;
pub const MSR_P4_PEBS_MATRIX_VERT: u32 = 1010;
pub const MSR_CORE_PERF_FIXED_CTR0: u32 = 777;
pub const MSR_CORE_PERF_FIXED_CTR1: u32 = 778;
pub const MSR_CORE_PERF_FIXED_CTR2: u32 = 779;
pub const MSR_CORE_PERF_FIXED_CTR3: u32 = 780;
pub const MSR_CORE_PERF_FIXED_CTR_CTRL: u32 = 909;
pub const MSR_CORE_PERF_GLOBAL_STATUS: u32 = 910;
pub const MSR_CORE_PERF_GLOBAL_CTRL: u32 = 911;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL: u32 = 912;
pub const MSR_PERF_METRICS: u32 = 809;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL_TRACE_TOPA_PMI_BIT: u32 = 55;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL_TRACE_TOPA_PMI: u64 = 36028797018963968;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL_OVF_BUF_BIT: u32 = 62;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL_OVF_BUF: u64 = 4611686018427387904;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL_COND_CHGD_BIT: u32 = 63;
pub const MSR_CORE_PERF_GLOBAL_OVF_CTRL_COND_CHGD: i64 = -9223372036854775808;
pub const MSR_GEODE_BUSCONT_CONF0: u32 = 6400;
pub const MSR_IA32_VMX_BASIC: u32 = 1152;
pub const MSR_IA32_VMX_PINBASED_CTLS: u32 = 1153;
pub const MSR_IA32_VMX_PROCBASED_CTLS: u32 = 1154;
pub const MSR_IA32_VMX_EXIT_CTLS: u32 = 1155;
pub const MSR_IA32_VMX_ENTRY_CTLS: u32 = 1156;
pub const MSR_IA32_VMX_MISC: u32 = 1157;
pub const MSR_IA32_VMX_CR0_FIXED0: u32 = 1158;
pub const MSR_IA32_VMX_CR0_FIXED1: u32 = 1159;
pub const MSR_IA32_VMX_CR4_FIXED0: u32 = 1160;
pub const MSR_IA32_VMX_CR4_FIXED1: u32 = 1161;
pub const MSR_IA32_VMX_VMCS_ENUM: u32 = 1162;
pub const MSR_IA32_VMX_PROCBASED_CTLS2: u32 = 1163;
pub const MSR_IA32_VMX_EPT_VPID_CAP: u32 = 1164;
pub const MSR_IA32_VMX_TRUE_PINBASED_CTLS: u32 = 1165;
pub const MSR_IA32_VMX_TRUE_PROCBASED_CTLS: u32 = 1166;
pub const MSR_IA32_VMX_TRUE_EXIT_CTLS: u32 = 1167;
pub const MSR_IA32_VMX_TRUE_ENTRY_CTLS: u32 = 1168;
pub const MSR_IA32_VMX_VMFUNC: u32 = 1169;
pub const MSR_IA32_VMX_PROCBASED_CTLS3: u32 = 1170;
pub const VMX_BASIC_VMCS_SIZE_SHIFT: u32 = 32;
pub const VMX_BASIC_TRUE_CTLS: u64 = 36028797018963968;
pub const VMX_BASIC_64: u64 = 281474976710656;
pub const VMX_BASIC_MEM_TYPE_SHIFT: u32 = 50;
pub const VMX_BASIC_MEM_TYPE_MASK: u64 = 16888498602639360;
pub const VMX_BASIC_MEM_TYPE_WB: u32 = 6;
pub const VMX_BASIC_INOUT: u64 = 18014398509481984;
pub const MSR_IA32_L3_QOS_CFG: u32 = 3201;
pub const MSR_IA32_L2_QOS_CFG: u32 = 3202;
pub const MSR_IA32_QM_EVTSEL: u32 = 3213;
pub const MSR_IA32_QM_CTR: u32 = 3214;
pub const MSR_IA32_PQR_ASSOC: u32 = 3215;
pub const MSR_IA32_L3_CBM_BASE: u32 = 3216;
pub const MSR_IA32_L2_CBM_BASE: u32 = 3344;
pub const MSR_IA32_MBA_THRTL_BASE: u32 = 3408;
pub const MSR_IA32_MBA_BW_BASE: u32 = 3221225984;
pub const MSR_IA32_SMBA_BW_BASE: u32 = 3221226112;
pub const MSR_IA32_EVT_CFG_BASE: u32 = 3221226496;
pub const MSR_IA32_VMX_MISC_INTEL_PT: u32 = 16384;
pub const MSR_IA32_VMX_MISC_VMWRITE_SHADOW_RO_FIELDS: u32 = 536870912;
pub const MSR_IA32_VMX_MISC_PREEMPTION_TIMER_SCALE: u32 = 31;
pub const MSR_VM_CR: u32 = 3221291284;
pub const MSR_VM_IGNNE: u32 = 3221291285;
pub const MSR_VM_HSAVE_PA: u32 = 3221291287;
pub const SVM_VM_CR_VALID_MASK: u32 = 31;
pub const SVM_VM_CR_SVM_LOCK_MASK: u32 = 8;
pub const SVM_VM_CR_SVM_DIS_MASK: u32 = 16;
pub const MSR_IA32_HW_FEEDBACK_PTR: u32 = 6096;
pub const MSR_IA32_HW_FEEDBACK_CONFIG: u32 = 6097;
pub const MSR_IA32_XAPIC_DISABLE_STATUS: u32 = 189;
pub const ORC_REG_UNDEFINED: u32 = 0;
pub const ORC_REG_PREV_SP: u32 = 1;
pub const ORC_REG_DX: u32 = 2;
pub const ORC_REG_DI: u32 = 3;
pub const ORC_REG_BP: u32 = 4;
pub const ORC_REG_SP: u32 = 5;
pub const ORC_REG_R10: u32 = 6;
pub const ORC_REG_R13: u32 = 7;
pub const ORC_REG_BP_INDIRECT: u32 = 8;
pub const ORC_REG_SP_INDIRECT: u32 = 9;
pub const ORC_REG_MAX: u32 = 15;
pub const ORC_TYPE_UNDEFINED: u32 = 0;
pub const ORC_TYPE_END_OF_STACK: u32 = 1;
pub const ORC_TYPE_CALL: u32 = 2;
pub const ORC_TYPE_REGS: u32 = 3;
pub const ORC_TYPE_REGS_PARTIAL: u32 = 4;
pub const RET_DEPTH_SHIFT: u32 = 5;
pub const RSB_RET_STUFF_LOOPS: u32 = 16;
pub const RET_DEPTH_INIT: i64 = -9223372036854775808;
pub const RET_DEPTH_INIT_FROM_CALL: i64 = -288230376151711744;
pub const RET_DEPTH_CREDIT: i32 = -1;
pub const RETPOLINE_THUNK_SIZE: u32 = 32;
pub const RSB_CLEAR_LOOPS: u32 = 32;
pub const ANNOTATE_RETPOLINE_SAFE: &[u8; 70usize] =
    b"999:\n\t.pushsection .discard.retpoline_safe\n\t.long 999b\n\t.popsection\n\t\0";
pub const CALL_DEPTH_ACCOUNT: &[u8; 1usize] = b"\0";
pub const CALL_NOSPEC: &[u8; 23usize] = b"call *%[thunk_target]\n\0";
pub const GDT_ENTRY_BOOT_CS: u32 = 2;
pub const GDT_ENTRY_BOOT_DS: u32 = 3;
pub const GDT_ENTRY_BOOT_TSS: u32 = 4;
pub const __BOOT_CS: u32 = 16;
pub const __BOOT_DS: u32 = 24;
pub const __BOOT_TSS: u32 = 32;
pub const SEGMENT_RPL_MASK: u32 = 3;
pub const USER_SEGMENT_RPL_MASK: u32 = 2;
pub const USER_RPL: u32 = 3;
pub const SEGMENT_TI_MASK: u32 = 4;
pub const SEGMENT_LDT: u32 = 4;
pub const SEGMENT_GDT: u32 = 0;
pub const GDT_ENTRY_INVALID_SEG: u32 = 0;
pub const GDT_ENTRY_KERNEL32_CS: u32 = 1;
pub const GDT_ENTRY_KERNEL_CS: u32 = 2;
pub const GDT_ENTRY_KERNEL_DS: u32 = 3;
pub const GDT_ENTRY_DEFAULT_USER32_CS: u32 = 4;
pub const GDT_ENTRY_DEFAULT_USER_DS: u32 = 5;
pub const GDT_ENTRY_DEFAULT_USER_CS: u32 = 6;
pub const GDT_ENTRY_TSS: u32 = 8;
pub const GDT_ENTRY_LDT: u32 = 10;
pub const GDT_ENTRY_TLS_MIN: u32 = 12;
pub const GDT_ENTRY_TLS_MAX: u32 = 14;
pub const GDT_ENTRY_CPUNODE: u32 = 15;
pub const GDT_ENTRIES: u32 = 16;
pub const __KERNEL32_CS: u32 = 8;
pub const __KERNEL_CS: u32 = 16;
pub const __KERNEL_DS: u32 = 24;
pub const __USER32_CS: u32 = 35;
pub const __USER_DS: u32 = 43;
pub const __USER_CS: u32 = 51;
pub const __CPUNODE_SEG: u32 = 123;
pub const IDT_ENTRIES: u32 = 256;
pub const NUM_EXCEPTION_VECTORS: u32 = 32;
pub const EXCEPTION_ERRCODE_MASK: u32 = 537033984;
pub const GDT_SIZE: u32 = 128;
pub const GDT_ENTRY_TLS_ENTRIES: u32 = 3;
pub const TLS_SIZE: u32 = 24;
pub const VDSO_CPUNODE_BITS: u32 = 12;
pub const VDSO_CPUNODE_MASK: u32 = 4095;
pub const EARLY_IDT_HANDLER_SIZE: u32 = 13;
pub const XEN_EARLY_IDT_HANDLER_SIZE: u32 = 12;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const UINT_MAX: i32 = -1;
pub const ULONG_MAX: i32 = -1;
pub const ULLONG_MAX: i32 = -1;
pub const UINTPTR_MAX: i32 = -1;
pub const ERESTARTSYS: u32 = 512;
pub const ERESTARTNOINTR: u32 = 513;
pub const ERESTARTNOHAND: u32 = 514;
pub const ENOIOCTLCMD: u32 = 515;
pub const ERESTART_RESTARTBLOCK: u32 = 516;
pub const EPROBE_DEFER: u32 = 517;
pub const EOPENSTALE: u32 = 518;
pub const ENOPARAM: u32 = 519;
pub const EBADHANDLE: u32 = 521;
pub const ENOTSYNC: u32 = 522;
pub const EBADCOOKIE: u32 = 523;
pub const ENOTSUPP: u32 = 524;
pub const ETOOSMALL: u32 = 525;
pub const ESERVERFAULT: u32 = 526;
pub const EBADTYPE: u32 = 527;
pub const EJUKEBOX: u32 = 528;
pub const EIOCBQUEUED: u32 = 529;
pub const ERECALLCONFLICT: u32 = 530;
pub const ENOGRACE: u32 = 531;
pub const _BITOPS_LONG_SHIFT: u32 = 6;
pub const REG_IN: &[u8; 2usize] = b"D\0";
pub const REG_OUT: &[u8; 2usize] = b"a\0";
pub const BITOP_LE_SWIZZLE: u32 = 0;
pub const PAGE_SHIFT: u32 = 12;
pub const HUGE_MAX_HSTATE: u32 = 2;
pub const LOAD_PHYSICAL_ADDR: u32 = 16777216;
pub const KASAN_STACK_ORDER: u32 = 0;
pub const THREAD_SIZE_ORDER: u32 = 2;
pub const EXCEPTION_STACK_ORDER: u32 = 1;
pub const IRQ_STACK_ORDER: u32 = 2;
pub const IST_INDEX_DF: u32 = 0;
pub const IST_INDEX_NMI: u32 = 1;
pub const IST_INDEX_DB: u32 = 2;
pub const IST_INDEX_MCE: u32 = 3;
pub const IST_INDEX_VC: u32 = 4;
pub const __PHYSICAL_MASK_SHIFT: u32 = 52;
pub const KERNEL_IMAGE_SIZE: u32 = 536870912;
pub const __HAVE_ARCH_GATE_AREA: u32 = 1;
pub const TOP_OF_KERNEL_STACK_PADDING: u32 = 0;
pub const FRAME_SIZE: u32 = 168;
pub const PTRACE_GETREGS: u32 = 12;
pub const PTRACE_SETREGS: u32 = 13;
pub const PTRACE_GETFPREGS: u32 = 14;
pub const PTRACE_SETFPREGS: u32 = 15;
pub const PTRACE_GETFPXREGS: u32 = 18;
pub const PTRACE_SETFPXREGS: u32 = 19;
pub const PTRACE_OLDSETOPTIONS: u32 = 21;
pub const PTRACE_GET_THREAD_AREA: u32 = 25;
pub const PTRACE_SET_THREAD_AREA: u32 = 26;
pub const PTRACE_ARCH_PRCTL: u32 = 30;
pub const PTRACE_SYSEMU: u32 = 31;
pub const PTRACE_SYSEMU_SINGLESTEP: u32 = 32;
pub const PTRACE_SINGLEBLOCK: u32 = 33;
pub const LDT_ENTRIES: u32 = 8192;
pub const LDT_ENTRY_SIZE: u32 = 8;
pub const MODIFY_LDT_CONTENTS_DATA: u32 = 0;
pub const MODIFY_LDT_CONTENTS_STACK: u32 = 1;
pub const MODIFY_LDT_CONTENTS_CODE: u32 = 2;
pub const NR_REG_ARGUMENTS: u32 = 6;
pub const FP_XSTATE_MAGIC1: u32 = 1179670611;
pub const FP_XSTATE_MAGIC2: u32 = 1179670597;
pub const X86_FXSR_MAGIC: u32 = 0;
pub const __HAVE_ARCH_MEMCPY: u32 = 1;
pub const __HAVE_ARCH_MEMCPY_FLUSHCACHE: u32 = 1;
pub const _PAGE_BIT_PRESENT: u32 = 0;
pub const _PAGE_BIT_RW: u32 = 1;
pub const _PAGE_BIT_USER: u32 = 2;
pub const _PAGE_BIT_PWT: u32 = 3;
pub const _PAGE_BIT_PCD: u32 = 4;
pub const _PAGE_BIT_ACCESSED: u32 = 5;
pub const _PAGE_BIT_DIRTY: u32 = 6;
pub const _PAGE_BIT_PSE: u32 = 7;
pub const _PAGE_BIT_PAT: u32 = 7;
pub const _PAGE_BIT_GLOBAL: u32 = 8;
pub const _PAGE_BIT_SOFTW1: u32 = 9;
pub const _PAGE_BIT_SOFTW2: u32 = 10;
pub const _PAGE_BIT_SOFTW3: u32 = 11;
pub const _PAGE_BIT_PAT_LARGE: u32 = 12;
pub const _PAGE_BIT_SOFTW4: u32 = 57;
pub const _PAGE_BIT_SOFTW5: u32 = 58;
pub const _PAGE_BIT_PKEY_BIT0: u32 = 59;
pub const _PAGE_BIT_PKEY_BIT1: u32 = 60;
pub const _PAGE_BIT_PKEY_BIT2: u32 = 61;
pub const _PAGE_BIT_PKEY_BIT3: u32 = 62;
pub const _PAGE_BIT_NX: u32 = 63;
pub const _PAGE_BIT_SPECIAL: u32 = 9;
pub const _PAGE_BIT_CPA_TEST: u32 = 9;
pub const _PAGE_BIT_UFFD_WP: u32 = 10;
pub const _PAGE_BIT_SOFT_DIRTY: u32 = 11;
pub const _PAGE_BIT_DEVMAP: u32 = 57;
pub const _PAGE_BIT_SAVED_DIRTY: u32 = 58;
pub const _PAGE_BIT_PROTNONE: u32 = 8;
pub const SECTION_SIZE_BITS: u32 = 27;
pub const SHARED_KERNEL_PMD: u32 = 0;
pub const PTRS_PER_PGD: u32 = 512;
pub const P4D_SHIFT: u32 = 39;
pub const MAX_PTRS_PER_P4D: u32 = 512;
pub const MAX_POSSIBLE_PHYSMEM_BITS: u32 = 52;
pub const PUD_SHIFT: u32 = 30;
pub const PTRS_PER_PUD: u32 = 512;
pub const PMD_SHIFT: u32 = 21;
pub const PTRS_PER_PMD: u32 = 512;
pub const PTRS_PER_PTE: u32 = 512;
pub const GUARD_HOLE_PGD_ENTRY: i32 = -256;
pub const LDT_PGD_ENTRY: i32 = -240;
pub const __VMALLOC_BASE_L4: i64 = -60473139527680;
pub const __VMALLOC_BASE_L5: i64 = -27021597764222976;
pub const VMALLOC_SIZE_TB_L4: u32 = 32;
pub const VMALLOC_SIZE_TB_L5: u32 = 12800;
pub const __VMEMMAP_BASE_L4: i64 = -24189255811072;
pub const __VMEMMAP_BASE_L5: i64 = -12384898975268864;
pub const EARLY_DYNAMIC_PAGE_TABLES: u32 = 64;
pub const PGD_ALLOWED_BITS: i32 = -1;
pub const _DESC_ACCESSED: u32 = 1;
pub const _DESC_DATA_WRITABLE: u32 = 2;
pub const _DESC_CODE_READABLE: u32 = 2;
pub const _DESC_DATA_EXPAND_DOWN: u32 = 4;
pub const _DESC_CODE_CONFORMING: u32 = 4;
pub const _DESC_CODE_EXECUTABLE: u32 = 8;
pub const _DESC_S: u32 = 16;
pub const _DESC_PRESENT: u32 = 128;
pub const _DESC_LONG_CODE: u32 = 8192;
pub const _DESC_DB: u32 = 16384;
pub const _DESC_GRANULARITY_4K: u32 = 32768;
pub const _DESC_DATA: u32 = 147;
pub const _DESC_CODE: u32 = 155;
pub const DESC_DATA16: u32 = 147;
pub const DESC_CODE16: u32 = 155;
pub const DESC_DATA32: u32 = 49299;
pub const DESC_DATA32_BIOS: u32 = 16531;
pub const DESC_CODE32: u32 = 49307;
pub const DESC_CODE32_BIOS: u32 = 16539;
pub const DESC_DATA64: u32 = 49299;
pub const DESC_CODE64: u32 = 41115;
pub const BOOT_IDT_ENTRIES: u32 = 32;
pub const AR_TYPE_RODATA: u32 = 0;
pub const AR_TYPE_RWDATA: u32 = 512;
pub const AR_TYPE_RODATA_EXPDOWN: u32 = 1024;
pub const AR_TYPE_RWDATA_EXPDOWN: u32 = 1536;
pub const AR_TYPE_XOCODE: u32 = 2048;
pub const AR_TYPE_XRCODE: u32 = 2560;
pub const AR_TYPE_XOCODE_CONF: u32 = 3072;
pub const AR_TYPE_XRCODE_CONF: u32 = 3584;
pub const AR_TYPE_MASK: u32 = 3584;
pub const AR_DPL0: u32 = 0;
pub const AR_DPL3: u32 = 24576;
pub const AR_DPL_MASK: u32 = 24576;
pub const AR_A: u32 = 256;
pub const AR_S: u32 = 4096;
pub const AR_P: u32 = 32768;
pub const AR_AVL: u32 = 1048576;
pub const AR_L: u32 = 2097152;
pub const AR_DB: u32 = 4194304;
pub const AR_G: u32 = 8388608;
pub const MXCSR_DEFAULT: u32 = 8064;
pub const NVMXINTS: u32 = 5;
pub const VMX_FEATURE_INTR_EXITING: u32 = 0;
pub const VMX_FEATURE_NMI_EXITING: u32 = 3;
pub const VMX_FEATURE_VIRTUAL_NMIS: u32 = 5;
pub const VMX_FEATURE_PREEMPTION_TIMER: u32 = 6;
pub const VMX_FEATURE_POSTED_INTR: u32 = 7;
pub const VMX_FEATURE_INVVPID: u32 = 16;
pub const VMX_FEATURE_EPT_EXECUTE_ONLY: u32 = 17;
pub const VMX_FEATURE_EPT_AD: u32 = 18;
pub const VMX_FEATURE_EPT_1GB: u32 = 19;
pub const VMX_FEATURE_EPT_5LEVEL: u32 = 20;
pub const VMX_FEATURE_FLEXPRIORITY: u32 = 24;
pub const VMX_FEATURE_APICV: u32 = 25;
pub const VMX_FEATURE_EPTP_SWITCHING: u32 = 28;
pub const VMX_FEATURE_INTR_WINDOW_EXITING: u32 = 34;
pub const VMX_FEATURE_USE_TSC_OFFSETTING: u32 = 35;
pub const VMX_FEATURE_HLT_EXITING: u32 = 39;
pub const VMX_FEATURE_INVLPG_EXITING: u32 = 41;
pub const VMX_FEATURE_MWAIT_EXITING: u32 = 42;
pub const VMX_FEATURE_RDPMC_EXITING: u32 = 43;
pub const VMX_FEATURE_RDTSC_EXITING: u32 = 44;
pub const VMX_FEATURE_CR3_LOAD_EXITING: u32 = 47;
pub const VMX_FEATURE_CR3_STORE_EXITING: u32 = 48;
pub const VMX_FEATURE_TERTIARY_CONTROLS: u32 = 49;
pub const VMX_FEATURE_CR8_LOAD_EXITING: u32 = 51;
pub const VMX_FEATURE_CR8_STORE_EXITING: u32 = 52;
pub const VMX_FEATURE_VIRTUAL_TPR: u32 = 53;
pub const VMX_FEATURE_NMI_WINDOW_EXITING: u32 = 54;
pub const VMX_FEATURE_MOV_DR_EXITING: u32 = 55;
pub const VMX_FEATURE_UNCOND_IO_EXITING: u32 = 56;
pub const VMX_FEATURE_USE_IO_BITMAPS: u32 = 57;
pub const VMX_FEATURE_MONITOR_TRAP_FLAG: u32 = 59;
pub const VMX_FEATURE_USE_MSR_BITMAPS: u32 = 60;
pub const VMX_FEATURE_MONITOR_EXITING: u32 = 61;
pub const VMX_FEATURE_PAUSE_EXITING: u32 = 62;
pub const VMX_FEATURE_SEC_CONTROLS: u32 = 63;
pub const VMX_FEATURE_VIRT_APIC_ACCESSES: u32 = 64;
pub const VMX_FEATURE_EPT: u32 = 65;
pub const VMX_FEATURE_DESC_EXITING: u32 = 66;
pub const VMX_FEATURE_RDTSCP: u32 = 67;
pub const VMX_FEATURE_VIRTUAL_X2APIC: u32 = 68;
pub const VMX_FEATURE_VPID: u32 = 69;
pub const VMX_FEATURE_WBINVD_EXITING: u32 = 70;
pub const VMX_FEATURE_UNRESTRICTED_GUEST: u32 = 71;
pub const VMX_FEATURE_APIC_REGISTER_VIRT: u32 = 72;
pub const VMX_FEATURE_VIRT_INTR_DELIVERY: u32 = 73;
pub const VMX_FEATURE_PAUSE_LOOP_EXITING: u32 = 74;
pub const VMX_FEATURE_RDRAND_EXITING: u32 = 75;
pub const VMX_FEATURE_INVPCID: u32 = 76;
pub const VMX_FEATURE_VMFUNC: u32 = 77;
pub const VMX_FEATURE_SHADOW_VMCS: u32 = 78;
pub const VMX_FEATURE_ENCLS_EXITING: u32 = 79;
pub const VMX_FEATURE_RDSEED_EXITING: u32 = 80;
pub const VMX_FEATURE_PAGE_MOD_LOGGING: u32 = 81;
pub const VMX_FEATURE_EPT_VIOLATION_VE: u32 = 82;
pub const VMX_FEATURE_PT_CONCEAL_VMX: u32 = 83;
pub const VMX_FEATURE_XSAVES: u32 = 84;
pub const VMX_FEATURE_MODE_BASED_EPT_EXEC: u32 = 86;
pub const VMX_FEATURE_PT_USE_GPA: u32 = 88;
pub const VMX_FEATURE_TSC_SCALING: u32 = 89;
pub const VMX_FEATURE_USR_WAIT_PAUSE: u32 = 90;
pub const VMX_FEATURE_ENCLV_EXITING: u32 = 92;
pub const VMX_FEATURE_BUS_LOCK_DETECTION: u32 = 94;
pub const VMX_FEATURE_NOTIFY_VM_EXITING: u32 = 95;
pub const VMX_FEATURE_IPI_VIRT: u32 = 100;
pub const NET_IP_ALIGN: u32 = 0;
pub const HBP_NUM: u32 = 4;
pub const ARCH_MIN_MMSTRUCT_ALIGN: u32 = 0;
pub const X86_VENDOR_INTEL: u32 = 0;
pub const X86_VENDOR_CYRIX: u32 = 1;
pub const X86_VENDOR_AMD: u32 = 2;
pub const X86_VENDOR_UMC: u32 = 3;
pub const X86_VENDOR_CENTAUR: u32 = 5;
pub const X86_VENDOR_TRANSMETA: u32 = 7;
pub const X86_VENDOR_NSC: u32 = 8;
pub const X86_VENDOR_HYGON: u32 = 9;
pub const X86_VENDOR_ZHAOXIN: u32 = 10;
pub const X86_VENDOR_VORTEX: u32 = 11;
pub const X86_VENDOR_NUM: u32 = 12;
pub const X86_VENDOR_UNKNOWN: u32 = 255;
pub const IO_BITMAP_BITS: u32 = 65536;
pub const IO_BITMAP_BYTES: u32 = 8192;
pub const HAVE_ARCH_PICK_MMAP_LAYOUT: u32 = 1;
pub const BASE_PREFETCH: &[u8; 14usize] = b"prefetcht0 %1\0";
pub const xen_set_default_idle: u32 = 0;
pub const X86_CAP_FMT_NUM: &[u8; 6usize] = b"%d:%d\0";
pub const X86_CAP_FMT: &[u8; 3usize] = b"%s\0";
pub const MAX_CPU_FEATURES: u32 = 704;
pub const CPU_FEATURE_TYPEFMT: &[u8; 26usize] = b"x86,ven%04Xfam%04Xmod%04X\0";
pub const TIF_NOTIFY_RESUME: u32 = 1;
pub const TIF_SIGPENDING: u32 = 2;
pub const TIF_NEED_RESCHED: u32 = 3;
pub const TIF_SINGLESTEP: u32 = 4;
pub const TIF_SSBD: u32 = 5;
pub const TIF_SPEC_IB: u32 = 9;
pub const TIF_SPEC_L1D_FLUSH: u32 = 10;
pub const TIF_USER_RETURN_NOTIFY: u32 = 11;
pub const TIF_UPROBE: u32 = 12;
pub const TIF_PATCH_PENDING: u32 = 13;
pub const TIF_NEED_FPU_LOAD: u32 = 14;
pub const TIF_NOCPUID: u32 = 15;
pub const TIF_NOTSC: u32 = 16;
pub const TIF_NOTIFY_SIGNAL: u32 = 17;
pub const TIF_MEMDIE: u32 = 20;
pub const TIF_POLLING_NRFLAG: u32 = 21;
pub const TIF_IO_BITMAP: u32 = 22;
pub const TIF_SPEC_FORCE_UPDATE: u32 = 23;
pub const TIF_FORCED_TF: u32 = 24;
pub const TIF_BLOCKSTEP: u32 = 25;
pub const TIF_LAZY_MMU_UPDATES: u32 = 27;
pub const TIF_ADDR32: u32 = 29;
pub const _TIF_NOTIFY_RESUME: u32 = 2;
pub const _TIF_SIGPENDING: u32 = 4;
pub const _TIF_NEED_RESCHED: u32 = 8;
pub const _TIF_SINGLESTEP: u32 = 16;
pub const _TIF_SSBD: u32 = 32;
pub const _TIF_SPEC_IB: u32 = 512;
pub const _TIF_SPEC_L1D_FLUSH: u32 = 1024;
pub const _TIF_USER_RETURN_NOTIFY: u32 = 2048;
pub const _TIF_UPROBE: u32 = 4096;
pub const _TIF_PATCH_PENDING: u32 = 8192;
pub const _TIF_NEED_FPU_LOAD: u32 = 16384;
pub const _TIF_NOCPUID: u32 = 32768;
pub const _TIF_NOTSC: u32 = 65536;
pub const _TIF_NOTIFY_SIGNAL: u32 = 131072;
pub const _TIF_POLLING_NRFLAG: u32 = 2097152;
pub const _TIF_IO_BITMAP: u32 = 4194304;
pub const _TIF_SPEC_FORCE_UPDATE: u32 = 8388608;
pub const _TIF_FORCED_TF: u32 = 16777216;
pub const _TIF_BLOCKSTEP: u32 = 33554432;
pub const _TIF_LAZY_MMU_UPDATES: u32 = 134217728;
pub const _TIF_ADDR32: u32 = 536870912;
pub const _TIF_WORK_CTXSW_BASE: u32 = 42041376;
pub const _TIF_WORK_CTXSW: u32 = 42041888;
pub const _TIF_WORK_CTXSW_PREV: u32 = 42043936;
pub const _TIF_WORK_CTXSW_NEXT: u32 = 42041888;
pub const TS_COMPAT: u32 = 2;
pub const PAGE_POISON: u32 = 170;
pub const RED_INACTIVE: u64 = 718624318471594843;
pub const RED_ACTIVE: i64 = -2863912482255763264;
pub const SLUB_RED_INACTIVE: u32 = 187;
pub const SLUB_RED_ACTIVE: u32 = 204;
pub const POISON_INUSE: u32 = 90;
pub const POISON_FREE: u32 = 107;
pub const POISON_END: u32 = 165;
pub const POISON_FREE_INITMEM: u32 = 204;
pub const JBD_POISON_FREE: u32 = 91;
pub const JBD2_POISON_FREE: u32 = 92;
pub const POOL_POISON_FREED: u32 = 167;
pub const POOL_POISON_ALLOCATED: u32 = 169;
pub const ATM_POISON_FREE: u32 = 18;
pub const ATM_POISON: u32 = 3735928559;
pub const MUTEX_DEBUG_INIT: u32 = 17;
pub const MUTEX_DEBUG_FREE: u32 = 34;
pub const KEY_DESTROY: u32 = 189;
pub const STACK_MAGIC: u32 = 3735928559;
pub const READ: u32 = 0;
pub const WRITE: u32 = 1;
pub const BITMAP_MEM_ALIGNMENT: u32 = 8;
pub const BITMAP_MEM_MASK: u32 = 7;
pub const ___GFP_SKIP_ZERO: u32 = 0;
pub const ___GFP_SKIP_KASAN: u32 = 0;
pub const ___GFP_NOLOCKDEP: u32 = 0;
pub const ___GFP_NO_OBJ_EXT: u32 = 0;
pub const NODES_SHIFT: u32 = 0;
pub const MAX_NUMNODES: u32 = 1;
pub const NUMA_NO_NODE: i32 = -1;
pub const NUMA_NO_MEMBLK: i32 = -1;
pub const STARTUP_READ_APICID: u32 = 2147483648;
pub const STARTUP_PARALLEL_MASK: u32 = 4278190080;
pub const force_read_lock_recursive: u32 = 0;
pub const SINGLE_DEPTH_NESTING: u32 = 1;
pub const LOCK_SECTION_END: &[u8; 12usize] = b".previous\n\t\0";
pub const RWLOCK_MAGIC: u32 = 3736018669;
pub const SPIN_THRESHOLD: u32 = 32768;
pub const _Q_PENDING_LOOPS: u32 = 512;
pub const _QW_WAITING: u32 = 256;
pub const _QW_LOCKED: u32 = 255;
pub const _QW_WMASK: u32 = 511;
pub const _QR_SHIFT: u32 = 9;
pub const _QR_BIAS: u32 = 512;
pub const STAT_HAVE_NSEC: u32 = 1;
pub const S_IFMT: u32 = 61440;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFLNK: u32 = 40960;
pub const S_IFREG: u32 = 32768;
pub const S_IFBLK: u32 = 24576;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFIFO: u32 = 4096;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRWXU: u32 = 448;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXG: u32 = 56;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXO: u32 = 7;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const STATX_TYPE: u32 = 1;
pub const STATX_MODE: u32 = 2;
pub const STATX_NLINK: u32 = 4;
pub const STATX_UID: u32 = 8;
pub const STATX_GID: u32 = 16;
pub const STATX_ATIME: u32 = 32;
pub const STATX_MTIME: u32 = 64;
pub const STATX_CTIME: u32 = 128;
pub const STATX_INO: u32 = 256;
pub const STATX_SIZE: u32 = 512;
pub const STATX_BLOCKS: u32 = 1024;
pub const STATX_BASIC_STATS: u32 = 2047;
pub const STATX_BTIME: u32 = 2048;
pub const STATX_MNT_ID: u32 = 4096;
pub const STATX_DIOALIGN: u32 = 8192;
pub const STATX_MNT_ID_UNIQUE: u32 = 16384;
pub const STATX_SUBVOL: u32 = 32768;
pub const STATX__RESERVED: u32 = 2147483648;
pub const STATX_ATTR_COMPRESSED: u32 = 4;
pub const STATX_ATTR_IMMUTABLE: u32 = 16;
pub const STATX_ATTR_APPEND: u32 = 32;
pub const STATX_ATTR_NODUMP: u32 = 64;
pub const STATX_ATTR_ENCRYPTED: u32 = 2048;
pub const STATX_ATTR_AUTOMOUNT: u32 = 4096;
pub const STATX_ATTR_MOUNT_ROOT: u32 = 8192;
pub const STATX_ATTR_VERITY: u32 = 1048576;
pub const STATX_ATTR_DAX: u32 = 2097152;
pub const S_IRWXUGO: u32 = 511;
pub const S_IALLUGO: u32 = 4095;
pub const S_IRUGO: u32 = 292;
pub const S_IWUGO: u32 = 146;
pub const S_IXUGO: u32 = 73;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const MSEC_PER_SEC: u32 = 1000;
pub const USEC_PER_MSEC: u32 = 1000;
pub const NSEC_PER_USEC: u32 = 1000;
pub const NSEC_PER_MSEC: u32 = 1000000;
pub const USEC_PER_SEC: u32 = 1000000;
pub const NSEC_PER_SEC: u32 = 1000000000;
pub const PSEC_PER_SEC: u64 = 1000000000000;
pub const FSEC_PER_SEC: u64 = 1000000000000000;
pub const ITIMER_REAL: u32 = 0;
pub const ITIMER_VIRTUAL: u32 = 1;
pub const ITIMER_PROF: u32 = 2;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_SGI_CYCLE: u32 = 10;
pub const CLOCK_TAI: u32 = 11;
pub const MAX_CLOCKS: u32 = 16;
pub const CLOCKS_MASK: u32 = 1;
pub const CLOCKS_MONO: u32 = 1;
pub const TIMER_ABSTIME: u32 = 1;
pub const PSEC_PER_NSEC: u32 = 1000;
pub const TIME_UPTIME_SEC_MAX: u32 = 946080000;
pub const NTP_API: u32 = 4;
pub const ADJ_OFFSET: u32 = 1;
pub const ADJ_FREQUENCY: u32 = 2;
pub const ADJ_MAXERROR: u32 = 4;
pub const ADJ_ESTERROR: u32 = 8;
pub const ADJ_STATUS: u32 = 16;
pub const ADJ_TIMECONST: u32 = 32;
pub const ADJ_TAI: u32 = 128;
pub const ADJ_SETOFFSET: u32 = 256;
pub const ADJ_MICRO: u32 = 4096;
pub const ADJ_NANO: u32 = 8192;
pub const ADJ_TICK: u32 = 16384;
pub const MOD_OFFSET: u32 = 1;
pub const MOD_FREQUENCY: u32 = 2;
pub const MOD_MAXERROR: u32 = 4;
pub const MOD_ESTERROR: u32 = 8;
pub const MOD_STATUS: u32 = 16;
pub const MOD_TIMECONST: u32 = 32;
pub const MOD_TAI: u32 = 128;
pub const MOD_MICRO: u32 = 4096;
pub const MOD_NANO: u32 = 8192;
pub const STA_PLL: u32 = 1;
pub const STA_PPSFREQ: u32 = 2;
pub const STA_PPSTIME: u32 = 4;
pub const STA_FLL: u32 = 8;
pub const STA_INS: u32 = 16;
pub const STA_DEL: u32 = 32;
pub const STA_UNSYNC: u32 = 64;
pub const STA_FREQHOLD: u32 = 128;
pub const STA_PPSSIGNAL: u32 = 256;
pub const STA_PPSJITTER: u32 = 512;
pub const STA_PPSWANDER: u32 = 1024;
pub const STA_PPSERROR: u32 = 2048;
pub const STA_CLOCKERR: u32 = 4096;
pub const STA_NANO: u32 = 8192;
pub const STA_MODE: u32 = 16384;
pub const STA_CLK: u32 = 32768;
pub const STA_RONLY: u32 = 65280;
pub const TIME_OK: u32 = 0;
pub const TIME_INS: u32 = 1;
pub const TIME_DEL: u32 = 2;
pub const TIME_OOP: u32 = 3;
pub const TIME_WAIT: u32 = 4;
pub const TIME_ERROR: u32 = 5;
pub const TIME_BAD: u32 = 5;
pub const ADJ_ADJTIME: u32 = 32768;
pub const ADJ_OFFSET_SINGLESHOT: u32 = 1;
pub const ADJ_OFFSET_READONLY: u32 = 8192;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const LINUX_MM_DEBUG_H: u32 = 1;
pub const CSIGNAL: u32 = 255;
pub const CLONE_VM: u32 = 256;
pub const CLONE_FS: u32 = 512;
pub const CLONE_FILES: u32 = 1024;
pub const CLONE_SIGHAND: u32 = 2048;
pub const CLONE_PIDFD: u32 = 4096;
pub const CLONE_PTRACE: u32 = 8192;
pub const CLONE_VFORK: u32 = 16384;
pub const CLONE_PARENT: u32 = 32768;
pub const CLONE_THREAD: u32 = 65536;
pub const CLONE_NEWNS: u32 = 131072;
pub const CLONE_SYSVSEM: u32 = 262144;
pub const CLONE_SETTLS: u32 = 524288;
pub const CLONE_PARENT_SETTID: u32 = 1048576;
pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
pub const CLONE_DETACHED: u32 = 4194304;
pub const CLONE_UNTRACED: u32 = 8388608;
pub const CLONE_CHILD_SETTID: u32 = 16777216;
pub const CLONE_NEWCGROUP: u32 = 33554432;
pub const CLONE_NEWUTS: u32 = 67108864;
pub const CLONE_NEWIPC: u32 = 134217728;
pub const CLONE_NEWUSER: u32 = 268435456;
pub const CLONE_NEWPID: u32 = 536870912;
pub const CLONE_NEWNET: u32 = 1073741824;
pub const CLONE_IO: u32 = 2147483648;
pub const CLONE_CLEAR_SIGHAND: u64 = 4294967296;
pub const CLONE_INTO_CGROUP: u64 = 8589934592;
pub const CLONE_NEWTIME: u32 = 128;
pub const CLONE_ARGS_SIZE_VER0: u32 = 64;
pub const CLONE_ARGS_SIZE_VER1: u32 = 80;
pub const CLONE_ARGS_SIZE_VER2: u32 = 88;
pub const SCHED_NORMAL: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const SCHED_BATCH: u32 = 3;
pub const SCHED_IDLE: u32 = 5;
pub const SCHED_DEADLINE: u32 = 6;
pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
pub const SCHED_FLAG_RESET_ON_FORK: u32 = 1;
pub const SCHED_FLAG_RECLAIM: u32 = 2;
pub const SCHED_FLAG_DL_OVERRUN: u32 = 4;
pub const SCHED_FLAG_KEEP_POLICY: u32 = 8;
pub const SCHED_FLAG_KEEP_PARAMS: u32 = 16;
pub const SCHED_FLAG_UTIL_CLAMP_MIN: u32 = 32;
pub const SCHED_FLAG_UTIL_CLAMP_MAX: u32 = 64;
pub const SCHED_FLAG_KEEP_ALL: u32 = 24;
pub const SCHED_FLAG_UTIL_CLAMP: u32 = 96;
pub const SCHED_FLAG_ALL: u32 = 127;
pub const KMSAN_RETVAL_SIZE: u32 = 800;
pub const KMSAN_PARAM_SIZE: u32 = 800;
pub const OSQ_UNLOCKED_VAL: u32 = 0;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_BOTH: i32 = -2;
pub const RUSAGE_THREAD: u32 = 1;
pub const RLIM64_INFINITY: i32 = -1;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const _STK_LIM: u32 = 8388608;
pub const MLOCK_LIMIT: u32 = 8388608;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_NPROC: u32 = 6;
pub const RLIMIT_NOFILE: u32 = 7;
pub const RLIMIT_MEMLOCK: u32 = 8;
pub const RLIMIT_AS: u32 = 9;
pub const RLIMIT_LOCKS: u32 = 10;
pub const RLIMIT_SIGPENDING: u32 = 11;
pub const RLIMIT_MSGQUEUE: u32 = 12;
pub const RLIMIT_NICE: u32 = 13;
pub const RLIMIT_RTPRIO: u32 = 14;
pub const RLIMIT_RTTIME: u32 = 15;
pub const RLIM_NLIMITS: u32 = 16;
pub const RLIM_INFINITY: i32 = -1;
pub const MAX_NICE: u32 = 19;
pub const MIN_NICE: i32 = -20;
pub const NICE_WIDTH: u32 = 40;
pub const MAX_RT_PRIO: u32 = 100;
pub const MAX_PRIO: u32 = 140;
pub const DEFAULT_PRIO: u32 = 120;
pub const _NSIG: u32 = 64;
pub const _NSIG_BPW: u32 = 64;
pub const _NSIG_WORDS: u32 = 1;
pub const SA_IA32_ABI: u32 = 33554432;
pub const SA_X32_ABI: u32 = 16777216;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGBUS: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGUSR1: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGUSR2: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGSTKFLT: u32 = 16;
pub const SIGCHLD: u32 = 17;
pub const SIGCONT: u32 = 18;
pub const SIGSTOP: u32 = 19;
pub const SIGTSTP: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGURG: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGIO: u32 = 29;
pub const SIGPOLL: u32 = 29;
pub const SIGPWR: u32 = 30;
pub const SIGSYS: u32 = 31;
pub const SIGUNUSED: u32 = 31;
pub const SIGRTMIN: u32 = 32;
pub const SIGRTMAX: u32 = 64;
pub const SA_RESTORER: u32 = 67108864;
pub const MINSIGSTKSZ: u32 = 2048;
pub const SIGSTKSZ: u32 = 8192;
pub const SA_NOCLDSTOP: u32 = 1;
pub const SA_NOCLDWAIT: u32 = 2;
pub const SA_SIGINFO: u32 = 4;
pub const SA_UNSUPPORTED: u32 = 1024;
pub const SA_EXPOSE_TAGBITS: u32 = 2048;
pub const SA_ONSTACK: u32 = 134217728;
pub const SA_RESTART: u32 = 268435456;
pub const SA_NODEFER: u32 = 1073741824;
pub const SA_RESETHAND: u32 = 2147483648;
pub const SA_NOMASK: u32 = 1073741824;
pub const SA_ONESHOT: u32 = 2147483648;
pub const SIG_BLOCK: u32 = 0;
pub const SIG_UNBLOCK: u32 = 1;
pub const SIG_SETMASK: u32 = 2;
pub const SI_MAX_SIZE: u32 = 128;
pub const SI_USER: u32 = 0;
pub const SI_KERNEL: u32 = 128;
pub const SI_QUEUE: i32 = -1;
pub const SI_TIMER: i32 = -2;
pub const SI_MESGQ: i32 = -3;
pub const SI_ASYNCIO: i32 = -4;
pub const SI_SIGIO: i32 = -5;
pub const SI_TKILL: i32 = -6;
pub const SI_DETHREAD: i32 = -7;
pub const SI_ASYNCNL: i32 = -60;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLOPN: u32 = 2;
pub const ILL_ILLADR: u32 = 3;
pub const ILL_ILLTRP: u32 = 4;
pub const ILL_PRVOPC: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const ILL_BADIADDR: u32 = 9;
pub const __ILL_BREAK: u32 = 10;
pub const __ILL_BNDMOD: u32 = 11;
pub const NSIGILL: u32 = 11;
pub const FPE_INTDIV: u32 = 1;
pub const FPE_INTOVF: u32 = 2;
pub const FPE_FLTDIV: u32 = 3;
pub const FPE_FLTOVF: u32 = 4;
pub const FPE_FLTUND: u32 = 5;
pub const FPE_FLTRES: u32 = 6;
pub const FPE_FLTINV: u32 = 7;
pub const FPE_FLTSUB: u32 = 8;
pub const __FPE_DECOVF: u32 = 9;
pub const __FPE_DECDIV: u32 = 10;
pub const __FPE_DECERR: u32 = 11;
pub const __FPE_INVASC: u32 = 12;
pub const __FPE_INVDEC: u32 = 13;
pub const FPE_FLTUNK: u32 = 14;
pub const FPE_CONDTRAP: u32 = 15;
pub const NSIGFPE: u32 = 15;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const SEGV_BNDERR: u32 = 3;
pub const SEGV_PKUERR: u32 = 4;
pub const SEGV_ACCADI: u32 = 5;
pub const SEGV_ADIDERR: u32 = 6;
pub const SEGV_ADIPERR: u32 = 7;
pub const SEGV_MTEAERR: u32 = 8;
pub const SEGV_MTESERR: u32 = 9;
pub const SEGV_CPERR: u32 = 10;
pub const NSIGSEGV: u32 = 10;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const BUS_MCEERR_AR: u32 = 4;
pub const BUS_MCEERR_AO: u32 = 5;
pub const NSIGBUS: u32 = 5;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const TRAP_BRANCH: u32 = 3;
pub const TRAP_HWBKPT: u32 = 4;
pub const TRAP_UNK: u32 = 5;
pub const TRAP_PERF: u32 = 6;
pub const NSIGTRAP: u32 = 6;
pub const TRAP_PERF_FLAG_ASYNC: u32 = 1;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const NSIGCHLD: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const NSIGPOLL: u32 = 6;
pub const SYS_SECCOMP: u32 = 1;
pub const SYS_USER_DISPATCH: u32 = 2;
pub const NSIGSYS: u32 = 2;
pub const EMT_TAGOVF: u32 = 1;
pub const NSIGEMT: u32 = 1;
pub const SIGEV_SIGNAL: u32 = 0;
pub const SIGEV_NONE: u32 = 1;
pub const SIGEV_THREAD: u32 = 2;
pub const SIGEV_THREAD_ID: u32 = 4;
pub const SIGEV_MAX_SIZE: u32 = 64;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 2;
pub const SS_AUTODISARM: u32 = 2147483648;
pub const SS_FLAG_BITS: u32 = 2147483648;
pub const SIGQUEUE_PREALLOC: u32 = 1;
pub const SA_IMMUTABLE: u32 = 8388608;
pub const __ARCH_UAPI_SA_FLAGS: u32 = 67108864;
pub const UAPI_SA_FLAGS: u32 = 3690989575;
pub const CPUCLOCK_PERTHREAD_MASK: u32 = 4;
pub const CPUCLOCK_CLOCK_MASK: u32 = 3;
pub const CPUCLOCK_PROF: u32 = 0;
pub const CPUCLOCK_VIRT: u32 = 1;
pub const CPUCLOCK_SCHED: u32 = 2;
pub const CPUCLOCK_MAX: u32 = 3;
pub const CLOCKFD: u32 = 3;
pub const CLOCKFD_MASK: u32 = 7;
pub const MAX_DA_NAME_LEN: u32 = 24;
pub const KM_MAX_IDX: u32 = 16;
pub const TASK_RUNNING: u32 = 0;
pub const TASK_INTERRUPTIBLE: u32 = 1;
pub const TASK_UNINTERRUPTIBLE: u32 = 2;
pub const __TASK_STOPPED: u32 = 4;
pub const __TASK_TRACED: u32 = 8;
pub const EXIT_DEAD: u32 = 16;
pub const EXIT_ZOMBIE: u32 = 32;
pub const EXIT_TRACE: u32 = 48;
pub const TASK_PARKED: u32 = 64;
pub const TASK_DEAD: u32 = 128;
pub const TASK_WAKEKILL: u32 = 256;
pub const TASK_WAKING: u32 = 512;
pub const TASK_NOLOAD: u32 = 1024;
pub const TASK_NEW: u32 = 2048;
pub const TASK_RTLOCK_WAIT: u32 = 4096;
pub const TASK_FREEZABLE: u32 = 8192;
pub const TASK_FROZEN: u32 = 32768;
pub const TASK_STATE_MAX: u32 = 65536;
pub const TASK_ANY: u32 = 65535;
pub const TASK_KILLABLE: u32 = 258;
pub const TASK_STOPPED: u32 = 260;
pub const TASK_TRACED: u32 = 8;
pub const TASK_IDLE: u32 = 1026;
pub const TASK_NORMAL: u32 = 3;
pub const TASK_REPORT: u32 = 127;
pub const SCHED_FIXEDPOINT_SHIFT: u32 = 10;
pub const SCHED_FIXEDPOINT_SCALE: u32 = 1024;
pub const SCHED_CAPACITY_SHIFT: u32 = 10;
pub const SCHED_CAPACITY_SCALE: u32 = 1024;
pub const UTIL_EST_WEIGHT_SHIFT: u32 = 2;
pub const UTIL_AVG_UNCHANGED: u32 = 2147483648;
pub const TASK_REPORT_IDLE: u32 = 128;
pub const TASK_REPORT_MAX: u32 = 256;
pub const PF_VCPU: u32 = 1;
pub const PF_IDLE: u32 = 2;
pub const PF_EXITING: u32 = 4;
pub const PF_POSTCOREDUMP: u32 = 8;
pub const PF_IO_WORKER: u32 = 16;
pub const PF_WQ_WORKER: u32 = 32;
pub const PF_FORKNOEXEC: u32 = 64;
pub const PF_MCE_PROCESS: u32 = 128;
pub const PF_SUPERPRIV: u32 = 256;
pub const PF_DUMPCORE: u32 = 512;
pub const PF_SIGNALED: u32 = 1024;
pub const PF_MEMALLOC: u32 = 2048;
pub const PF_NPROC_EXCEEDED: u32 = 4096;
pub const PF_USED_MATH: u32 = 8192;
pub const PF_USER_WORKER: u32 = 16384;
pub const PF_NOFREEZE: u32 = 32768;
pub const PF__HOLE__00010000: u32 = 65536;
pub const PF_KSWAPD: u32 = 131072;
pub const PF_MEMALLOC_NOFS: u32 = 262144;
pub const PF_MEMALLOC_NOIO: u32 = 524288;
pub const PF_LOCAL_THROTTLE: u32 = 1048576;
pub const PF_KTHREAD: u32 = 2097152;
pub const PF_RANDOMIZE: u32 = 4194304;
pub const PF_MEMALLOC_NORECLAIM: u32 = 8388608;
pub const PF_MEMALLOC_NOWARN: u32 = 16777216;
pub const PF__HOLE__02000000: u32 = 33554432;
pub const PF_NO_SETAFFINITY: u32 = 67108864;
pub const PF_MCE_EARLY: u32 = 134217728;
pub const PF_MEMALLOC_PIN: u32 = 268435456;
pub const PF_BLOCK_TS: u32 = 536870912;
pub const PF__HOLE__40000000: u32 = 1073741824;
pub const PF_SUSPEND_TASK: u32 = 2147483648;
pub const PFA_NO_NEW_PRIVS: u32 = 0;
pub const PFA_SPREAD_PAGE: u32 = 1;
pub const PFA_SPREAD_SLAB: u32 = 2;
pub const PFA_SPEC_SSB_DISABLE: u32 = 3;
pub const PFA_SPEC_SSB_FORCE_DISABLE: u32 = 4;
pub const PFA_SPEC_IB_DISABLE: u32 = 5;
pub const PFA_SPEC_IB_FORCE_DISABLE: u32 = 6;
pub const PFA_SPEC_SSB_NOEXEC: u32 = 7;
pub const MIGHT_RESCHED_RCU_SHIFT: u32 = 8;
pub const MIGHT_RESCHED_PREEMPT_MASK: u32 = 255;
pub const PREEMPT_LOCK_RESCHED_OFFSETS: u32 = 0;
pub const PERCPU_MODULE_RESERVE: u32 = 8192;
pub const PCPU_MIN_ALLOC_SHIFT: u32 = 2;
pub const PCPU_MIN_ALLOC_SIZE: u32 = 4;
pub const PERCPU_DYNAMIC_SIZE_SHIFT: u32 = 10;
pub const PERCPU_DYNAMIC_EARLY_SIZE: u32 = 20480;
pub const PERCPU_DYNAMIC_RESERVE: u32 = 28672;
pub const TRACEPOINT_DEFS_H: u32 = 1;
pub const SHIFT_PLL: u32 = 2;
pub const SHIFT_FLL: u32 = 2;
pub const MAXTC: u32 = 10;
pub const SHIFT_USEC: u32 = 16;
pub const PPM_SCALE_INV_SHIFT: u32 = 19;
pub const MAXPHASE: u32 = 500000000;
pub const MAXFREQ: u32 = 500000;
pub const MINSEC: u32 = 256;
pub const MAXSEC: u32 = 2048;
pub const NTP_PHASE_LIMIT: u32 = 16000000;
pub const NTP_SCALE_SHIFT: u32 = 32;
pub const NTP_INTERVAL_FREQ: u32 = 250;
pub const NTP_INTERVAL_LENGTH: u32 = 4000000;
pub const PIT_TICK_RATE: u32 = 1193182;
pub const DEFAULT_OVERFLOWUID: u32 = 65534;
pub const DEFAULT_OVERFLOWGID: u32 = 65534;
pub const DEFAULT_FS_OVERFLOWUID: u32 = 65534;
pub const DEFAULT_FS_OVERFLOWGID: u32 = 65534;
pub const KSTAT_ATTR_FS_IOC_FLAGS: u32 = 1050740;
pub const KSTAT_ATTR_VFS_FLAGS: u32 = 48;
pub const STATX_CHANGE_COOKIE: u32 = 1073741824;
pub const STATX_ATTR_CHANGE_MONOTONIC: i64 = -9223372036854775808;
pub const BUILD_ID_SIZE_MAX: u32 = 20;
pub const WQ_FLAG_EXCLUSIVE: u32 = 1;
pub const WQ_FLAG_WOKEN: u32 = 2;
pub const WQ_FLAG_CUSTOM: u32 = 4;
pub const WQ_FLAG_DONE: u32 = 8;
pub const WQ_FLAG_PRIORITY: u32 = 16;
pub const KCSAN_SEQLOCK_REGION_MAX: u32 = 1000;
pub const GRND_NONBLOCK: u32 = 1;
pub const GRND_RANDOM: u32 = 2;
pub const GRND_INSECURE: u32 = 4;
pub const first_online_node: u32 = 0;
pub const first_memory_node: u32 = 0;
pub const nr_node_ids: u32 = 1;
pub const nr_online_nodes: u32 = 1;
pub const PB_migratetype_bits: u32 = 3;
pub const NR_PAGEFLAGS: u32 = 22;
pub const MAX_NR_ZONES: u32 = 4;
pub const NR_CPUS_BITS: u32 = 1;
pub const SPINLOCK_SIZE: u32 = 4;
pub const LRU_GEN_WIDTH: u32 = 0;
pub const __LRU_REFS_WIDTH: u32 = 0;
pub const ZONES_SHIFT: u32 = 2;
pub const ZONES_WIDTH: u32 = 2;
pub const SECTIONS_WIDTH: u32 = 0;
pub const NODES_WIDTH: u32 = 0;
pub const KASAN_TAG_WIDTH: u32 = 0;
pub const LAST_CPUPID_SHIFT: u32 = 0;
pub const LAST_CPUPID_WIDTH: u32 = 0;
pub const AT_SYSINFO_EHDR: u32 = 33;
pub const AT_VECTOR_SIZE_ARCH: u32 = 2;
pub const AT_NULL: u32 = 0;
pub const AT_IGNORE: u32 = 1;
pub const AT_EXECFD: u32 = 2;
pub const AT_PHDR: u32 = 3;
pub const AT_PHENT: u32 = 4;
pub const AT_PHNUM: u32 = 5;
pub const AT_PAGESZ: u32 = 6;
pub const AT_BASE: u32 = 7;
pub const AT_FLAGS: u32 = 8;
pub const AT_ENTRY: u32 = 9;
pub const AT_NOTELF: u32 = 10;
pub const AT_UID: u32 = 11;
pub const AT_EUID: u32 = 12;
pub const AT_GID: u32 = 13;
pub const AT_EGID: u32 = 14;
pub const AT_PLATFORM: u32 = 15;
pub const AT_HWCAP: u32 = 16;
pub const AT_CLKTCK: u32 = 17;
pub const AT_SECURE: u32 = 23;
pub const AT_BASE_PLATFORM: u32 = 24;
pub const AT_RANDOM: u32 = 25;
pub const AT_HWCAP2: u32 = 26;
pub const AT_RSEQ_FEATURE_SIZE: u32 = 27;
pub const AT_RSEQ_ALIGN: u32 = 28;
pub const AT_HWCAP3: u32 = 29;
pub const AT_HWCAP4: u32 = 30;
pub const AT_EXECFN: u32 = 31;
pub const AT_MINSIGSTKSZ: u32 = 51;
pub const AT_VECTOR_SIZE_BASE: u32 = 22;
pub const NUM_ACTIVE_RCU_POLL_OLDSTATE: u32 = 2;
pub const NUM_ACTIVE_RCU_POLL_FULL_OLDSTATE: u32 = 4;
pub const MAPLE_NODE_SLOTS: u32 = 31;
pub const MAPLE_RANGE64_SLOTS: u32 = 16;
pub const MAPLE_ARANGE64_SLOTS: u32 = 10;
pub const MAPLE_ALLOC_SLOTS: u32 = 30;
pub const MAPLE_NODE_MASK: u32 = 255;
pub const MT_FLAGS_ALLOC_RANGE: u32 = 1;
pub const MT_FLAGS_USE_RCU: u32 = 2;
pub const MT_FLAGS_HEIGHT_OFFSET: u32 = 2;
pub const MT_FLAGS_HEIGHT_MASK: u32 = 124;
pub const MT_FLAGS_LOCK_MASK: u32 = 768;
pub const MT_FLAGS_LOCK_IRQ: u32 = 256;
pub const MT_FLAGS_LOCK_BH: u32 = 512;
pub const MT_FLAGS_LOCK_EXTERN: u32 = 768;
pub const MT_FLAGS_ALLOC_WRAPPED: u32 = 2048;
pub const MAPLE_HEIGHT_MAX: u32 = 31;
pub const MAPLE_NODE_TYPE_MASK: u32 = 15;
pub const MAPLE_NODE_TYPE_SHIFT: u32 = 3;
pub const MAPLE_RESERVED_RANGE: u32 = 4096;
pub const RWSEM_UNLOCKED_VALUE: u32 = 0;
pub const RWSEM_WRITER_LOCKED: u32 = 1;
pub const UPROBE_HANDLER_REMOVE: u32 = 1;
pub const UPROBE_HANDLER_MASK: u32 = 1;
pub const MAX_URETPROBE_DEPTH: u32 = 64;
pub const TICK_NSEC: u32 = 4000000;
pub const HZ_TO_MSEC_SHR32: u32 = 29;
pub const MSEC_TO_HZ_SHR32: u32 = 33;
pub const HZ_TO_MSEC_NUM: u32 = 4;
pub const HZ_TO_MSEC_DEN: u32 = 1;
pub const MSEC_TO_HZ_NUM: u32 = 1;
pub const MSEC_TO_HZ_DEN: u32 = 4;
pub const HZ_TO_USEC_SHR32: u32 = 20;
pub const USEC_TO_HZ_SHR32: u32 = 43;
pub const HZ_TO_USEC_NUM: u32 = 4000;
pub const HZ_TO_USEC_DEN: u32 = 1;
pub const USEC_TO_HZ_NUM: u32 = 1;
pub const USEC_TO_HZ_DEN: u32 = 4000;
pub const HZ_TO_NSEC_NUM: u32 = 4000000;
pub const HZ_TO_NSEC_DEN: u32 = 1;
pub const NSEC_TO_HZ_NUM: u32 = 1;
pub const NSEC_TO_HZ_DEN: u32 = 4000000;
pub const SHIFT_HZ: u32 = 8;
pub const TICK_USEC: u32 = 4000;
pub const USER_TICK_USEC: u32 = 10000;
pub const SEC_JIFFIE_SC: u32 = 23;
pub const NSEC_JIFFIE_SC: u32 = 53;
pub const TIMESTAMP_SIZE: u32 = 30;
pub const LOW_RES_NSEC: u32 = 4000000;
pub const KTIME_LOW_RES: u32 = 4000000;
pub const TIMER_CPUMASK: u32 = 262143;
pub const TIMER_MIGRATING: u32 = 262144;
pub const TIMER_BASEMASK: u32 = 524287;
pub const TIMER_DEFERRABLE: u32 = 524288;
pub const TIMER_PINNED: u32 = 1048576;
pub const TIMER_IRQSAFE: u32 = 2097152;
pub const TIMER_INIT_FLAGS: u32 = 3670016;
pub const TIMER_ARRAYSHIFT: u32 = 22;
pub const TIMER_ARRAYMASK: u32 = 4290772992;
pub const TIMER_TRACE_FLAGMASK: u32 = 3932160;
pub const NEXT_TIMER_MAX_DELTA: u32 = 1073741823;
pub const MM_CONTEXT_UPROBE_IA32: u32 = 0;
pub const MM_CONTEXT_HAS_VSYSCALL: u32 = 1;
pub const MM_CONTEXT_LOCK_LAM: u32 = 2;
pub const MM_CONTEXT_FORCE_TAGGED_SVA: u32 = 3;
pub const AT_VECTOR_SIZE: u32 = 50;
pub const INIT_PASID: u32 = 0;
pub const ENCODED_PAGE_BITS: u32 = 3;
pub const ENCODED_PAGE_BIT_DELAY_RMAP: u32 = 1;
pub const ENCODED_PAGE_BIT_NR_PAGES_NEXT: u32 = 2;
pub const MM_MT_FLAGS: u32 = 771;
pub const PAGEFLAGS_MASK: u32 = 4194303;
pub const PAGE_POISON_PATTERN: i32 = -1;
pub const FOLIO_PF_ANY: u32 = 0;
pub const FOLIO_PF_HEAD: u32 = 0;
pub const FOLIO_PF_NO_TAIL: u32 = 0;
pub const FOLIO_PF_NO_COMPOUND: u32 = 0;
pub const FOLIO_PF_SECOND: u32 = 1;
pub const FOLIO_HEAD_PAGE: u32 = 0;
pub const FOLIO_SECOND_PAGE: u32 = 1;
pub const __PG_HWPOISON: u32 = 0;
pub const PAGE_MAPPING_ANON: u32 = 1;
pub const PAGE_MAPPING_MOVABLE: u32 = 2;
pub const PAGE_MAPPING_KSM: u32 = 3;
pub const PAGE_MAPPING_FLAGS: u32 = 3;
pub const MAX_PAGE_ORDER: u32 = 10;
pub const MAX_ORDER_NR_PAGES: u32 = 1024;
pub const NR_PAGE_ORDERS: u32 = 11;
pub const PAGE_ALLOC_COSTLY_ORDER: u32 = 3;
pub const MIGRATETYPE_MASK: u32 = 7;
pub const NR_VM_NUMA_EVENT_ITEMS: u32 = 0;
pub const LRU_BASE: u32 = 0;
pub const LRU_ACTIVE: u32 = 1;
pub const LRU_FILE: u32 = 2;
pub const WORKINGSET_ANON: u32 = 0;
pub const WORKINGSET_FILE: u32 = 1;
pub const ANON_AND_FILE: u32 = 2;
pub const MIN_NR_GENS: u32 = 2;
pub const MAX_NR_GENS: u32 = 4;
pub const MAX_NR_TIERS: u32 = 4;
pub const NR_PCP_THP: u32 = 0;
pub const ASYNC_AND_SYNC: u32 = 2;
pub const ZONEID_SHIFT: u32 = 2;
pub const ZONES_MASK: u32 = 3;
pub const NODES_MASK: u32 = 0;
pub const SECTIONS_MASK: u32 = 0;
pub const LAST_CPUPID_MASK: u32 = 0;
pub const KASAN_TAG_MASK: u32 = 0;
pub const ZONEID_MASK: u32 = 3;
pub const DEF_PRIORITY: u32 = 12;
pub const MAX_ZONES_PER_ZONELIST: u32 = 4;
pub const RCU_DONE_TAIL: u32 = 0;
pub const RCU_WAIT_TAIL: u32 = 1;
pub const RCU_NEXT_READY_TAIL: u32 = 2;
pub const RCU_NEXT_TAIL: u32 = 3;
pub const RCU_CBLIST_NSEGS: u32 = 4;
pub const RCU_FANOUT: u32 = 64;
pub const RCU_FANOUT_LEAF: u32 = 16;
pub const RCU_FANOUT_1: u32 = 16;
pub const RCU_FANOUT_2: u32 = 1024;
pub const RCU_FANOUT_3: u32 = 65536;
pub const RCU_FANOUT_4: u32 = 4194304;
pub const RCU_NUM_LVLS: u32 = 1;
pub const NUM_RCU_LVL_0: u32 = 1;
pub const NUM_RCU_NODES: u32 = 1;
pub const SRCU_SIZE_SMALL: u32 = 0;
pub const SRCU_SIZE_ALLOC: u32 = 1;
pub const SRCU_SIZE_WAIT_BARRIER: u32 = 2;
pub const SRCU_SIZE_WAIT_CALL: u32 = 3;
pub const SRCU_SIZE_WAIT_CBS1: u32 = 4;
pub const SRCU_SIZE_WAIT_CBS2: u32 = 5;
pub const SRCU_SIZE_WAIT_CBS3: u32 = 6;
pub const SRCU_SIZE_WAIT_CBS4: u32 = 7;
pub const SRCU_SIZE_BIG: u32 = 8;
pub const SRCU_STATE_IDLE: u32 = 0;
pub const SRCU_STATE_SCAN1: u32 = 1;
pub const SRCU_STATE_SCAN2: u32 = 2;
pub const SRCU_NMI_UNKNOWN: u32 = 0;
pub const SRCU_NMI_UNSAFE: u32 = 1;
pub const SRCU_NMI_SAFE: u32 = 2;
pub const NOTIFY_DONE: u32 = 0;
pub const NOTIFY_OK: u32 = 1;
pub const NOTIFY_STOP_MASK: u32 = 32768;
pub const NOTIFY_BAD: u32 = 32770;
pub const NOTIFY_STOP: u32 = 32769;
pub const NETLINK_URELEASE: u32 = 1;
pub const KBD_KEYCODE: u32 = 1;
pub const KBD_UNBOUND_KEYCODE: u32 = 2;
pub const KBD_UNICODE: u32 = 3;
pub const KBD_KEYSYM: u32 = 4;
pub const KBD_POST_KEYSYM: u32 = 5;
pub const PA_SECTION_SHIFT: u32 = 27;
pub const PFN_SECTION_SHIFT: u32 = 15;
pub const PAGES_PER_SECTION: u32 = 32768;
pub const PAGE_SECTION_MASK: i32 = -32768;
pub const SUBSECTION_SHIFT: u32 = 21;
pub const SUBSECTION_SIZE: u32 = 2097152;
pub const PFN_SUBSECTION_SHIFT: u32 = 9;
pub const PAGES_PER_SUBSECTION: u32 = 512;
pub const PAGE_SUBSECTION_MASK: i32 = -512;
pub const SUBSECTIONS_PER_SECTION: u32 = 64;
pub const LOCAL_DISTANCE: u32 = 10;
pub const REMOTE_DISTANCE: u32 = 20;
pub const DISTANCE_BITS: u32 = 8;
pub const RECLAIM_DISTANCE: u32 = 30;
pub const PENALTY_FOR_NODE_WITH_CPUS: u32 = 1;
pub const GFP_MOVABLE_SHIFT: u32 = 3;
pub const GFP_ZONES_SHIFT: u32 = 2;
pub const CTL_MAXNAME: u32 = 10;
pub const UMH_NO_WAIT: u32 = 0;
pub const UMH_WAIT_EXEC: u32 = 1;
pub const UMH_WAIT_PROC: u32 = 2;
pub const UMH_KILLABLE: u32 = 4;
pub const UMH_FREEZABLE: u32 = 8;
pub const KMOD_PATH_LEN: u32 = 256;
pub const USER_XSTATE_FX_SW_WORDS: u32 = 6;
pub const USER_XSTATE_XCR0_WORD: u32 = 0;
pub const R_X86_64_NONE: u32 = 0;
pub const R_X86_64_64: u32 = 1;
pub const R_X86_64_PC32: u32 = 2;
pub const R_X86_64_GOT32: u32 = 3;
pub const R_X86_64_PLT32: u32 = 4;
pub const R_X86_64_COPY: u32 = 5;
pub const R_X86_64_GLOB_DAT: u32 = 6;
pub const R_X86_64_JUMP_SLOT: u32 = 7;
pub const R_X86_64_RELATIVE: u32 = 8;
pub const R_X86_64_GOTPCREL: u32 = 9;
pub const R_X86_64_32: u32 = 10;
pub const R_X86_64_32S: u32 = 11;
pub const R_X86_64_16: u32 = 12;
pub const R_X86_64_PC16: u32 = 13;
pub const R_X86_64_8: u32 = 14;
pub const R_X86_64_PC8: u32 = 15;
pub const R_X86_64_PC64: u32 = 24;
pub const COMPAT_ELF_PLATFORM: &[u8; 5usize] = b"i686\0";
pub const ELF_PLATFORM: &[u8; 7usize] = b"x86_64\0";
pub const ELF_EXEC_PAGESIZE: u32 = 4096;
pub const AT_SYSINFO: u32 = 32;
pub const ARCH_HAS_SETUP_ADDITIONAL_PAGES: u32 = 1;
pub const EM_NONE: u32 = 0;
pub const EM_M32: u32 = 1;
pub const EM_SPARC: u32 = 2;
pub const EM_386: u32 = 3;
pub const EM_68K: u32 = 4;
pub const EM_88K: u32 = 5;
pub const EM_486: u32 = 6;
pub const EM_860: u32 = 7;
pub const EM_MIPS: u32 = 8;
pub const EM_MIPS_RS3_LE: u32 = 10;
pub const EM_MIPS_RS4_BE: u32 = 10;
pub const EM_PARISC: u32 = 15;
pub const EM_SPARC32PLUS: u32 = 18;
pub const EM_PPC: u32 = 20;
pub const EM_PPC64: u32 = 21;
pub const EM_SPU: u32 = 23;
pub const EM_ARM: u32 = 40;
pub const EM_SH: u32 = 42;
pub const EM_SPARCV9: u32 = 43;
pub const EM_H8_300: u32 = 46;
pub const EM_IA_64: u32 = 50;
pub const EM_X86_64: u32 = 62;
pub const EM_S390: u32 = 22;
pub const EM_CRIS: u32 = 76;
pub const EM_M32R: u32 = 88;
pub const EM_MN10300: u32 = 89;
pub const EM_OPENRISC: u32 = 92;
pub const EM_ARCOMPACT: u32 = 93;
pub const EM_XTENSA: u32 = 94;
pub const EM_BLACKFIN: u32 = 106;
pub const EM_UNICORE: u32 = 110;
pub const EM_ALTERA_NIOS2: u32 = 113;
pub const EM_TI_C6000: u32 = 140;
pub const EM_HEXAGON: u32 = 164;
pub const EM_NDS32: u32 = 167;
pub const EM_AARCH64: u32 = 183;
pub const EM_TILEPRO: u32 = 188;
pub const EM_MICROBLAZE: u32 = 189;
pub const EM_TILEGX: u32 = 191;
pub const EM_ARCV2: u32 = 195;
pub const EM_RISCV: u32 = 243;
pub const EM_BPF: u32 = 247;
pub const EM_CSKY: u32 = 252;
pub const EM_LOONGARCH: u32 = 258;
pub const EM_FRV: u32 = 21569;
pub const EM_ALPHA: u32 = 36902;
pub const EM_CYGNUS_M32R: u32 = 36929;
pub const EM_S390_OLD: u32 = 41872;
pub const EM_CYGNUS_MN10300: u32 = 48879;
pub const PT_NULL: u32 = 0;
pub const PT_LOAD: u32 = 1;
pub const PT_DYNAMIC: u32 = 2;
pub const PT_INTERP: u32 = 3;
pub const PT_NOTE: u32 = 4;
pub const PT_SHLIB: u32 = 5;
pub const PT_PHDR: u32 = 6;
pub const PT_TLS: u32 = 7;
pub const PT_LOOS: u32 = 1610612736;
pub const PT_HIOS: u32 = 1879048191;
pub const PT_LOPROC: u32 = 1879048192;
pub const PT_HIPROC: u32 = 2147483647;
pub const PT_GNU_EH_FRAME: u32 = 1685382480;
pub const PT_GNU_STACK: u32 = 1685382481;
pub const PT_GNU_RELRO: u32 = 1685382482;
pub const PT_GNU_PROPERTY: u32 = 1685382483;
pub const PT_AARCH64_MEMTAG_MTE: u32 = 1879048194;
pub const PN_XNUM: u32 = 65535;
pub const ET_NONE: u32 = 0;
pub const ET_REL: u32 = 1;
pub const ET_EXEC: u32 = 2;
pub const ET_DYN: u32 = 3;
pub const ET_CORE: u32 = 4;
pub const ET_LOPROC: u32 = 65280;
pub const ET_HIPROC: u32 = 65535;
pub const DT_NULL: u32 = 0;
pub const DT_NEEDED: u32 = 1;
pub const DT_PLTRELSZ: u32 = 2;
pub const DT_PLTGOT: u32 = 3;
pub const DT_HASH: u32 = 4;
pub const DT_STRTAB: u32 = 5;
pub const DT_SYMTAB: u32 = 6;
pub const DT_RELA: u32 = 7;
pub const DT_RELASZ: u32 = 8;
pub const DT_RELAENT: u32 = 9;
pub const DT_STRSZ: u32 = 10;
pub const DT_SYMENT: u32 = 11;
pub const DT_INIT: u32 = 12;
pub const DT_FINI: u32 = 13;
pub const DT_SONAME: u32 = 14;
pub const DT_RPATH: u32 = 15;
pub const DT_SYMBOLIC: u32 = 16;
pub const DT_REL: u32 = 17;
pub const DT_RELSZ: u32 = 18;
pub const DT_RELENT: u32 = 19;
pub const DT_PLTREL: u32 = 20;
pub const DT_DEBUG: u32 = 21;
pub const DT_TEXTREL: u32 = 22;
pub const DT_JMPREL: u32 = 23;
pub const DT_ENCODING: u32 = 32;
pub const OLD_DT_LOOS: u32 = 1610612736;
pub const DT_LOOS: u32 = 1610612749;
pub const DT_HIOS: u32 = 1879044096;
pub const DT_VALRNGLO: u32 = 1879047424;
pub const DT_VALRNGHI: u32 = 1879047679;
pub const DT_ADDRRNGLO: u32 = 1879047680;
pub const DT_ADDRRNGHI: u32 = 1879047935;
pub const DT_VERSYM: u32 = 1879048176;
pub const DT_RELACOUNT: u32 = 1879048185;
pub const DT_RELCOUNT: u32 = 1879048186;
pub const DT_FLAGS_1: u32 = 1879048187;
pub const DT_VERDEF: u32 = 1879048188;
pub const DT_VERDEFNUM: u32 = 1879048189;
pub const DT_VERNEED: u32 = 1879048190;
pub const DT_VERNEEDNUM: u32 = 1879048191;
pub const OLD_DT_HIOS: u32 = 1879048191;
pub const DT_LOPROC: u32 = 1879048192;
pub const DT_HIPROC: u32 = 2147483647;
pub const STB_LOCAL: u32 = 0;
pub const STB_GLOBAL: u32 = 1;
pub const STB_WEAK: u32 = 2;
pub const STT_NOTYPE: u32 = 0;
pub const STT_OBJECT: u32 = 1;
pub const STT_FUNC: u32 = 2;
pub const STT_SECTION: u32 = 3;
pub const STT_FILE: u32 = 4;
pub const STT_COMMON: u32 = 5;
pub const STT_TLS: u32 = 6;
pub const EI_NIDENT: u32 = 16;
pub const PF_R: u32 = 4;
pub const PF_W: u32 = 2;
pub const PF_X: u32 = 1;
pub const SHT_NULL: u32 = 0;
pub const SHT_PROGBITS: u32 = 1;
pub const SHT_SYMTAB: u32 = 2;
pub const SHT_STRTAB: u32 = 3;
pub const SHT_RELA: u32 = 4;
pub const SHT_HASH: u32 = 5;
pub const SHT_DYNAMIC: u32 = 6;
pub const SHT_NOTE: u32 = 7;
pub const SHT_NOBITS: u32 = 8;
pub const SHT_REL: u32 = 9;
pub const SHT_SHLIB: u32 = 10;
pub const SHT_DYNSYM: u32 = 11;
pub const SHT_NUM: u32 = 12;
pub const SHT_LOPROC: u32 = 1879048192;
pub const SHT_HIPROC: u32 = 2147483647;
pub const SHT_LOUSER: u32 = 2147483648;
pub const SHT_HIUSER: u32 = 4294967295;
pub const SHF_WRITE: u32 = 1;
pub const SHF_ALLOC: u32 = 2;
pub const SHF_EXECINSTR: u32 = 4;
pub const SHF_RELA_LIVEPATCH: u32 = 1048576;
pub const SHF_RO_AFTER_INIT: u32 = 2097152;
pub const SHF_MASKPROC: u32 = 4026531840;
pub const SHN_UNDEF: u32 = 0;
pub const SHN_LORESERVE: u32 = 65280;
pub const SHN_LOPROC: u32 = 65280;
pub const SHN_HIPROC: u32 = 65311;
pub const SHN_LIVEPATCH: u32 = 65312;
pub const SHN_ABS: u32 = 65521;
pub const SHN_COMMON: u32 = 65522;
pub const SHN_HIRESERVE: u32 = 65535;
pub const EI_MAG0: u32 = 0;
pub const EI_MAG1: u32 = 1;
pub const EI_MAG2: u32 = 2;
pub const EI_MAG3: u32 = 3;
pub const EI_CLASS: u32 = 4;
pub const EI_DATA: u32 = 5;
pub const EI_VERSION: u32 = 6;
pub const EI_OSABI: u32 = 7;
pub const EI_PAD: u32 = 8;
pub const ELFMAG0: u32 = 127;
pub const ELFMAG1: u8 = 69u8;
pub const ELFMAG2: u8 = 76u8;
pub const ELFMAG3: u8 = 70u8;
pub const ELFMAG: &[u8; 5usize] = b"\x7FELF\0";
pub const SELFMAG: u32 = 4;
pub const ELFCLASSNONE: u32 = 0;
pub const ELFCLASS32: u32 = 1;
pub const ELFCLASS64: u32 = 2;
pub const ELFCLASSNUM: u32 = 3;
pub const ELFDATANONE: u32 = 0;
pub const ELFDATA2LSB: u32 = 1;
pub const ELFDATA2MSB: u32 = 2;
pub const EV_NONE: u32 = 0;
pub const EV_CURRENT: u32 = 1;
pub const EV_NUM: u32 = 2;
pub const ELFOSABI_NONE: u32 = 0;
pub const ELFOSABI_LINUX: u32 = 3;
pub const ELF_OSABI: u32 = 0;
pub const NT_PRSTATUS: u32 = 1;
pub const NT_PRFPREG: u32 = 2;
pub const NT_PRPSINFO: u32 = 3;
pub const NT_TASKSTRUCT: u32 = 4;
pub const NT_AUXV: u32 = 6;
pub const NT_SIGINFO: u32 = 1397311305;
pub const NT_FILE: u32 = 1179208773;
pub const NT_PRXFPREG: u32 = 1189489535;
pub const NT_PPC_VMX: u32 = 256;
pub const NT_PPC_SPE: u32 = 257;
pub const NT_PPC_VSX: u32 = 258;
pub const NT_PPC_TAR: u32 = 259;
pub const NT_PPC_PPR: u32 = 260;
pub const NT_PPC_DSCR: u32 = 261;
pub const NT_PPC_EBB: u32 = 262;
pub const NT_PPC_PMU: u32 = 263;
pub const NT_PPC_TM_CGPR: u32 = 264;
pub const NT_PPC_TM_CFPR: u32 = 265;
pub const NT_PPC_TM_CVMX: u32 = 266;
pub const NT_PPC_TM_CVSX: u32 = 267;
pub const NT_PPC_TM_SPR: u32 = 268;
pub const NT_PPC_TM_CTAR: u32 = 269;
pub const NT_PPC_TM_CPPR: u32 = 270;
pub const NT_PPC_TM_CDSCR: u32 = 271;
pub const NT_PPC_PKEY: u32 = 272;
pub const NT_PPC_DEXCR: u32 = 273;
pub const NT_PPC_HASHKEYR: u32 = 274;
pub const NT_386_TLS: u32 = 512;
pub const NT_386_IOPERM: u32 = 513;
pub const NT_X86_XSTATE: u32 = 514;
pub const NT_X86_SHSTK: u32 = 516;
pub const NT_S390_HIGH_GPRS: u32 = 768;
pub const NT_S390_TIMER: u32 = 769;
pub const NT_S390_TODCMP: u32 = 770;
pub const NT_S390_TODPREG: u32 = 771;
pub const NT_S390_CTRS: u32 = 772;
pub const NT_S390_PREFIX: u32 = 773;
pub const NT_S390_LAST_BREAK: u32 = 774;
pub const NT_S390_SYSTEM_CALL: u32 = 775;
pub const NT_S390_TDB: u32 = 776;
pub const NT_S390_VXRS_LOW: u32 = 777;
pub const NT_S390_VXRS_HIGH: u32 = 778;
pub const NT_S390_GS_CB: u32 = 779;
pub const NT_S390_GS_BC: u32 = 780;
pub const NT_S390_RI_CB: u32 = 781;
pub const NT_S390_PV_CPU_DATA: u32 = 782;
pub const NT_ARM_VFP: u32 = 1024;
pub const NT_ARM_TLS: u32 = 1025;
pub const NT_ARM_HW_BREAK: u32 = 1026;
pub const NT_ARM_HW_WATCH: u32 = 1027;
pub const NT_ARM_SYSTEM_CALL: u32 = 1028;
pub const NT_ARM_SVE: u32 = 1029;
pub const NT_ARM_PAC_MASK: u32 = 1030;
pub const NT_ARM_PACA_KEYS: u32 = 1031;
pub const NT_ARM_PACG_KEYS: u32 = 1032;
pub const NT_ARM_TAGGED_ADDR_CTRL: u32 = 1033;
pub const NT_ARM_PAC_ENABLED_KEYS: u32 = 1034;
pub const NT_ARM_SSVE: u32 = 1035;
pub const NT_ARM_ZA: u32 = 1036;
pub const NT_ARM_ZT: u32 = 1037;
pub const NT_ARM_FPMR: u32 = 1038;
pub const NT_ARC_V2: u32 = 1536;
pub const NT_VMCOREDD: u32 = 1792;
pub const NT_MIPS_DSP: u32 = 2048;
pub const NT_MIPS_FP_MODE: u32 = 2049;
pub const NT_MIPS_MSA: u32 = 2050;
pub const NT_RISCV_CSR: u32 = 2304;
pub const NT_RISCV_VECTOR: u32 = 2305;
pub const NT_LOONGARCH_CPUCFG: u32 = 2560;
pub const NT_LOONGARCH_CSR: u32 = 2561;
pub const NT_LOONGARCH_LSX: u32 = 2562;
pub const NT_LOONGARCH_LASX: u32 = 2563;
pub const NT_LOONGARCH_LBT: u32 = 2564;
pub const NT_LOONGARCH_HW_BREAK: u32 = 2565;
pub const NT_LOONGARCH_HW_WATCH: u32 = 2566;
pub const NT_GNU_PROPERTY_TYPE_0: u32 = 5;
pub const GNU_PROPERTY_AARCH64_FEATURE_1_AND: u32 = 3221225472;
pub const GNU_PROPERTY_AARCH64_FEATURE_1_BTI: u32 = 1;
pub const ELF32_GNU_PROPERTY_ALIGN: u32 = 4;
pub const ELF64_GNU_PROPERTY_ALIGN: u32 = 8;
pub const ELF_GNU_PROPERTY_ALIGN: u32 = 8;
pub const SUID_DUMP_DISABLE: u32 = 0;
pub const SUID_DUMP_USER: u32 = 1;
pub const SUID_DUMP_ROOT: u32 = 2;
pub const MMF_DUMPABLE_BITS: u32 = 2;
pub const MMF_DUMPABLE_MASK: u32 = 3;
pub const MMF_DUMP_ANON_PRIVATE: u32 = 2;
pub const MMF_DUMP_ANON_SHARED: u32 = 3;
pub const MMF_DUMP_MAPPED_PRIVATE: u32 = 4;
pub const MMF_DUMP_MAPPED_SHARED: u32 = 5;
pub const MMF_DUMP_ELF_HEADERS: u32 = 6;
pub const MMF_DUMP_HUGETLB_PRIVATE: u32 = 7;
pub const MMF_DUMP_HUGETLB_SHARED: u32 = 8;
pub const MMF_DUMP_DAX_PRIVATE: u32 = 9;
pub const MMF_DUMP_DAX_SHARED: u32 = 10;
pub const MMF_DUMP_FILTER_SHIFT: u32 = 2;
pub const MMF_DUMP_FILTER_BITS: u32 = 9;
pub const MMF_DUMP_FILTER_MASK: u32 = 2044;
pub const MMF_DUMP_MASK_DEFAULT_ELF: u32 = 64;
pub const MMF_VM_MERGEABLE: u32 = 16;
pub const MMF_VM_HUGEPAGE: u32 = 17;
pub const MMF_HAS_UPROBES: u32 = 19;
pub const MMF_RECALC_UPROBES: u32 = 20;
pub const MMF_OOM_SKIP: u32 = 21;
pub const MMF_UNSTABLE: u32 = 22;
pub const MMF_HUGE_ZERO_PAGE: u32 = 23;
pub const MMF_DISABLE_THP: u32 = 24;
pub const MMF_DISABLE_THP_MASK: u32 = 16777216;
pub const MMF_OOM_REAP_QUEUED: u32 = 25;
pub const MMF_MULTIPROCESS: u32 = 26;
pub const MMF_HAS_PINNED: u32 = 27;
pub const MMF_HAS_MDWE: u32 = 28;
pub const MMF_HAS_MDWE_MASK: u32 = 268435456;
pub const MMF_HAS_MDWE_NO_INHERIT: u32 = 29;
pub const MMF_VM_MERGE_ANY: u32 = 30;
pub const MMF_VM_MERGE_ANY_MASK: u32 = 1073741824;
pub const MMF_TOPDOWN: u32 = 31;
pub const MMF_TOPDOWN_MASK: u32 = 2147483648;
pub const MMF_INIT_MASK: u32 = 3506440191;
pub const BITS_PER_XA_VALUE: u32 = 63;
pub const XA_MAX_MARKS: u32 = 3;
pub const RADIX_TREE_ENTRY_MASK: u32 = 3;
pub const RADIX_TREE_INTERNAL_NODE: u32 = 2;
pub const RADIX_TREE_MAX_TAGS: u32 = 3;
pub const IDR_FREE: u32 = 0;
pub const IDA_CHUNK_SIZE: u32 = 128;
pub const KERNFS_TYPE_MASK: u32 = 15;
pub const KERNFS_FLAG_MASK: i32 = -16;
pub const KERNFS_MAX_USER_XATTRS: u32 = 128;
pub const KERNFS_USER_XATTR_SIZE_LIMIT: u32 = 131072;
pub const SYSFS_PREALLOC: u32 = 4096;
pub const SYSFS_GROUP_INVISIBLE: u32 = 8192;
pub const UEVENT_HELPER_PATH_LEN: u32 = 256;
pub const UEVENT_NUM_ENVP: u32 = 64;
pub const UEVENT_BUFFER_SIZE: u32 = 2048;
pub const CLS_BITS: u32 = 6;
pub const _DPRINTK_CLASS_DFLT: u32 = 63;
pub const _DPRINTK_FLAGS_NONE: u32 = 0;
pub const _DPRINTK_FLAGS_PRINT: u32 = 1;
pub const _DPRINTK_FLAGS_INCL_MODNAME: u32 = 2;
pub const _DPRINTK_FLAGS_INCL_FUNCNAME: u32 = 4;
pub const _DPRINTK_FLAGS_INCL_LINENO: u32 = 8;
pub const _DPRINTK_FLAGS_INCL_TID: u32 = 16;
pub const _DPRINTK_FLAGS_INCL_SOURCENAME: u32 = 32;
pub const _DPRINTK_FLAGS_INCL_ANY: u32 = 62;
pub const _DPRINTK_FLAGS_DEFAULT: u32 = 0;
pub const GOLDEN_RATIO_32: u32 = 1640531527;
pub const GOLDEN_RATIO_64: u64 = 7046029254386353131;
pub const KASAN_TAG_KERNEL: u32 = 255;
pub const KASAN_TAG_INVALID: u32 = 254;
pub const KASAN_TAG_MAX: u32 = 253;
pub const KASAN_TAG_MIN: u32 = 0;
pub const KMALLOC_SHIFT_HIGH: u32 = 13;
pub const KMALLOC_SHIFT_MAX: u32 = 22;
pub const KMALLOC_SHIFT_LOW: u32 = 3;
pub const KMALLOC_MAX_SIZE: u32 = 4194304;
pub const KMALLOC_MAX_CACHE_SIZE: u32 = 8192;
pub const KMALLOC_MAX_ORDER: u32 = 10;
pub const KMALLOC_MIN_SIZE: u32 = 8;
pub const RANDOM_KMALLOC_CACHES_NR: u32 = 0;
pub const KUNIT_PARAM_DESC_SIZE: u32 = 128;
pub const KUNIT_STATUS_COMMENT_SIZE: u32 = 256;
pub const KUNIT_INDENT_LEN: u32 = 4;
pub const KUNIT_SUBTEST_INDENT: &[u8; 5usize] = b"    \0";
pub const KUNIT_SUBSUBTEST_INDENT: &[u8; 9usize] = b"        \0";
pub const MINORBITS: u32 = 20;
pub const MINORMASK: u32 = 1048575;
pub const LIST_BL_LOCKMASK: u32 = 1;
pub const DNAME_INLINE_LEN: u32 = 40;
pub const DCACHE_ENTRY_TYPE: u32 = 7340032;
pub const DCACHE_MISS_TYPE: u32 = 0;
pub const DCACHE_WHITEOUT_TYPE: u32 = 1048576;
pub const DCACHE_DIRECTORY_TYPE: u32 = 2097152;
pub const DCACHE_AUTODIR_TYPE: u32 = 3145728;
pub const DCACHE_REGULAR_TYPE: u32 = 4194304;
pub const DCACHE_SPECIAL_TYPE: u32 = 5242880;
pub const DCACHE_SYMLINK_TYPE: u32 = 6291456;
pub const SHRINKER_UNIT_BITS: u32 = 64;
pub const SHRINK_STOP: i32 = -1;
pub const SHRINK_EMPTY: i32 = -2;
pub const DEFAULT_SEEKS: u32 = 2;
pub const RESERVED_PIDS: u32 = 300;
pub const _LINUX_CAPABILITY_VERSION_1: u32 = 429392688;
pub const _LINUX_CAPABILITY_U32S_1: u32 = 1;
pub const _LINUX_CAPABILITY_VERSION_2: u32 = 537333798;
pub const _LINUX_CAPABILITY_U32S_2: u32 = 2;
pub const _LINUX_CAPABILITY_VERSION_3: u32 = 537396514;
pub const _LINUX_CAPABILITY_U32S_3: u32 = 2;
pub const VFS_CAP_REVISION_MASK: u32 = 4278190080;
pub const VFS_CAP_REVISION_SHIFT: u32 = 24;
pub const VFS_CAP_FLAGS_MASK: i64 = -4278190081;
pub const VFS_CAP_FLAGS_EFFECTIVE: u32 = 1;
pub const VFS_CAP_REVISION_1: u32 = 16777216;
pub const VFS_CAP_U32_1: u32 = 1;
pub const VFS_CAP_REVISION_2: u32 = 33554432;
pub const VFS_CAP_U32_2: u32 = 2;
pub const VFS_CAP_REVISION_3: u32 = 50331648;
pub const VFS_CAP_U32_3: u32 = 2;
pub const VFS_CAP_U32: u32 = 2;
pub const VFS_CAP_REVISION: u32 = 50331648;
pub const CAP_CHOWN: u32 = 0;
pub const CAP_DAC_OVERRIDE: u32 = 1;
pub const CAP_DAC_READ_SEARCH: u32 = 2;
pub const CAP_FOWNER: u32 = 3;
pub const CAP_FSETID: u32 = 4;
pub const CAP_KILL: u32 = 5;
pub const CAP_SETGID: u32 = 6;
pub const CAP_SETUID: u32 = 7;
pub const CAP_SETPCAP: u32 = 8;
pub const CAP_LINUX_IMMUTABLE: u32 = 9;
pub const CAP_NET_BIND_SERVICE: u32 = 10;
pub const CAP_NET_BROADCAST: u32 = 11;
pub const CAP_NET_ADMIN: u32 = 12;
pub const CAP_NET_RAW: u32 = 13;
pub const CAP_IPC_LOCK: u32 = 14;
pub const CAP_IPC_OWNER: u32 = 15;
pub const CAP_SYS_MODULE: u32 = 16;
pub const CAP_SYS_RAWIO: u32 = 17;
pub const CAP_SYS_CHROOT: u32 = 18;
pub const CAP_SYS_PTRACE: u32 = 19;
pub const CAP_SYS_PACCT: u32 = 20;
pub const CAP_SYS_ADMIN: u32 = 21;
pub const CAP_SYS_BOOT: u32 = 22;
pub const CAP_SYS_NICE: u32 = 23;
pub const CAP_SYS_RESOURCE: u32 = 24;
pub const CAP_SYS_TIME: u32 = 25;
pub const CAP_SYS_TTY_CONFIG: u32 = 26;
pub const CAP_MKNOD: u32 = 27;
pub const CAP_LEASE: u32 = 28;
pub const CAP_AUDIT_WRITE: u32 = 29;
pub const CAP_AUDIT_CONTROL: u32 = 30;
pub const CAP_SETFCAP: u32 = 31;
pub const CAP_MAC_OVERRIDE: u32 = 32;
pub const CAP_MAC_ADMIN: u32 = 33;
pub const CAP_SYSLOG: u32 = 34;
pub const CAP_WAKE_ALARM: u32 = 35;
pub const CAP_BLOCK_SUSPEND: u32 = 36;
pub const CAP_AUDIT_READ: u32 = 37;
pub const CAP_PERFMON: u32 = 38;
pub const CAP_BPF: u32 = 39;
pub const CAP_CHECKPOINT_RESTORE: u32 = 40;
pub const CAP_LAST_CAP: u32 = 40;
pub const _KERNEL_CAPABILITY_VERSION: u32 = 537396514;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_DSYNC: u32 = 4096;
pub const FASYNC: u32 = 8192;
pub const O_DIRECT: u32 = 16384;
pub const O_LARGEFILE: u32 = 32768;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_NOATIME: u32 = 262144;
pub const O_CLOEXEC: u32 = 524288;
pub const __O_SYNC: u32 = 1048576;
pub const O_SYNC: u32 = 1052672;
pub const O_PATH: u32 = 2097152;
pub const __O_TMPFILE: u32 = 4194304;
pub const O_TMPFILE: u32 = 4259840;
pub const O_NDELAY: u32 = 2048;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const F_SETSIG: u32 = 10;
pub const F_GETSIG: u32 = 11;
pub const F_GETLK64: u32 = 12;
pub const F_SETLK64: u32 = 13;
pub const F_SETLKW64: u32 = 14;
pub const F_SETOWN_EX: u32 = 15;
pub const F_GETOWN_EX: u32 = 16;
pub const F_GETOWNER_UIDS: u32 = 17;
pub const F_OFD_GETLK: u32 = 36;
pub const F_OFD_SETLK: u32 = 37;
pub const F_OFD_SETLKW: u32 = 38;
pub const F_OWNER_TID: u32 = 0;
pub const F_OWNER_PID: u32 = 1;
pub const F_OWNER_PGRP: u32 = 2;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const LOCK_MAND: u32 = 32;
pub const LOCK_READ: u32 = 64;
pub const LOCK_WRITE: u32 = 128;
pub const LOCK_RW: u32 = 192;
pub const F_LINUX_SPECIFIC_BASE: u32 = 1024;
pub const RESOLVE_NO_XDEV: u32 = 1;
pub const RESOLVE_NO_MAGICLINKS: u32 = 2;
pub const RESOLVE_NO_SYMLINKS: u32 = 4;
pub const RESOLVE_BENEATH: u32 = 8;
pub const RESOLVE_IN_ROOT: u32 = 16;
pub const RESOLVE_CACHED: u32 = 32;
pub const F_SETLEASE: u32 = 1024;
pub const F_GETLEASE: u32 = 1025;
pub const F_NOTIFY: u32 = 1026;
pub const F_DUPFD_QUERY: u32 = 1027;
pub const F_CANCELLK: u32 = 1029;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const F_SETPIPE_SZ: u32 = 1031;
pub const F_GETPIPE_SZ: u32 = 1032;
pub const F_ADD_SEALS: u32 = 1033;
pub const F_GET_SEALS: u32 = 1034;
pub const F_SEAL_SEAL: u32 = 1;
pub const F_SEAL_SHRINK: u32 = 2;
pub const F_SEAL_GROW: u32 = 4;
pub const F_SEAL_WRITE: u32 = 8;
pub const F_SEAL_FUTURE_WRITE: u32 = 16;
pub const F_SEAL_EXEC: u32 = 32;
pub const F_GET_RW_HINT: u32 = 1035;
pub const F_SET_RW_HINT: u32 = 1036;
pub const F_GET_FILE_RW_HINT: u32 = 1037;
pub const F_SET_FILE_RW_HINT: u32 = 1038;
pub const RWH_WRITE_LIFE_NOT_SET: u32 = 0;
pub const RWH_WRITE_LIFE_NONE: u32 = 1;
pub const RWH_WRITE_LIFE_SHORT: u32 = 2;
pub const RWH_WRITE_LIFE_MEDIUM: u32 = 3;
pub const RWH_WRITE_LIFE_LONG: u32 = 4;
pub const RWH_WRITE_LIFE_EXTREME: u32 = 5;
pub const RWF_WRITE_LIFE_NOT_SET: u32 = 0;
pub const DN_ACCESS: u32 = 1;
pub const DN_MODIFY: u32 = 2;
pub const DN_CREATE: u32 = 4;
pub const DN_DELETE: u32 = 8;
pub const DN_RENAME: u32 = 16;
pub const DN_ATTRIB: u32 = 32;
pub const DN_MULTISHOT: u32 = 2147483648;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_EACCESS: u32 = 512;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_NO_AUTOMOUNT: u32 = 2048;
pub const AT_EMPTY_PATH: u32 = 4096;
pub const AT_STATX_SYNC_TYPE: u32 = 24576;
pub const AT_STATX_SYNC_AS_STAT: u32 = 0;
pub const AT_STATX_FORCE_SYNC: u32 = 8192;
pub const AT_STATX_DONT_SYNC: u32 = 16384;
pub const AT_RECURSIVE: u32 = 32768;
pub const AT_HANDLE_FID: u32 = 512;
pub const AT_GETATTR_NOSEC: u32 = 2147483648;
pub const VALID_OPEN_FLAGS: u32 = 8388547;
pub const VALID_RESOLVE_FLAGS: u32 = 63;
pub const OPEN_HOW_SIZE_VER0: u32 = 24;
pub const OPEN_HOW_SIZE_LATEST: u32 = 24;
pub const SIGEMT_MASK: u32 = 0;
pub const JOBCTL_STOP_SIGMASK: u32 = 65535;
pub const JOBCTL_STOP_DEQUEUED_BIT: u32 = 16;
pub const JOBCTL_STOP_PENDING_BIT: u32 = 17;
pub const JOBCTL_STOP_CONSUME_BIT: u32 = 18;
pub const JOBCTL_TRAP_STOP_BIT: u32 = 19;
pub const JOBCTL_TRAP_NOTIFY_BIT: u32 = 20;
pub const JOBCTL_TRAPPING_BIT: u32 = 21;
pub const JOBCTL_LISTENING_BIT: u32 = 22;
pub const JOBCTL_TRAP_FREEZE_BIT: u32 = 23;
pub const JOBCTL_PTRACE_FROZEN_BIT: u32 = 24;
pub const JOBCTL_STOPPED_BIT: u32 = 26;
pub const JOBCTL_TRACED_BIT: u32 = 27;
pub const JOBCTL_STOP_DEQUEUED: u32 = 65536;
pub const JOBCTL_STOP_PENDING: u32 = 131072;
pub const JOBCTL_STOP_CONSUME: u32 = 262144;
pub const JOBCTL_TRAP_STOP: u32 = 524288;
pub const JOBCTL_TRAP_NOTIFY: u32 = 1048576;
pub const JOBCTL_TRAPPING: u32 = 2097152;
pub const JOBCTL_LISTENING: u32 = 4194304;
pub const JOBCTL_TRAP_FREEZE: u32 = 8388608;
pub const JOBCTL_PTRACE_FROZEN: u32 = 16777216;
pub const JOBCTL_STOPPED: u32 = 67108864;
pub const JOBCTL_TRACED: u32 = 134217728;
pub const JOBCTL_TRAP_MASK: u32 = 1572864;
pub const JOBCTL_PENDING_MASK: u32 = 1703936;
pub const __ASM_CLAC: &[u8; 21usize] = b".byte 0x0f,0x01,0xca\0";
pub const __ASM_STAC: &[u8; 21usize] = b".byte 0x0f,0x01,0xcb\0";
pub const MMU_NOTIFIER_RANGE_BLOCKABLE: u32 = 1;
pub const INVPCID_TYPE_INDIV_ADDR: u32 = 0;
pub const INVPCID_TYPE_SINGLE_CTXT: u32 = 1;
pub const INVPCID_TYPE_ALL_INCL_GLOBAL: u32 = 2;
pub const INVPCID_TYPE_ALL_NON_GLOBAL: u32 = 3;
pub const PKRU_AD_BIT: u32 = 1;
pub const PKRU_WD_BIT: u32 = 2;
pub const PKRU_BITS_PER_PKEY: u32 = 2;
pub const PFN_PTE_SHIFT: u32 = 12;
pub const FIXMAP_PMD_NUM: u32 = 2;
pub const FIXMAP_PMD_TOP: u32 = 507;
pub const IO_APIC_DEFAULT_PHYS_BASE: u32 = 4273995776;
pub const APIC_DEFAULT_PHYS_BASE: u32 = 4276092928;
pub const IO_APIC_SLOT_SIZE: u32 = 1024;
pub const APIC_DELIVERY_MODE_FIXED: u32 = 0;
pub const APIC_DELIVERY_MODE_LOWESTPRIO: u32 = 1;
pub const APIC_DELIVERY_MODE_SMI: u32 = 2;
pub const APIC_DELIVERY_MODE_NMI: u32 = 4;
pub const APIC_DELIVERY_MODE_INIT: u32 = 5;
pub const APIC_DELIVERY_MODE_EXTINT: u32 = 7;
pub const APIC_ID: u32 = 32;
pub const APIC_LVR: u32 = 48;
pub const APIC_LVR_MASK: u32 = 16711935;
pub const APIC_LVR_DIRECTED_EOI: u32 = 16777216;
pub const APIC_TASKPRI: u32 = 128;
pub const APIC_TPRI_MASK: u32 = 255;
pub const APIC_ARBPRI: u32 = 144;
pub const APIC_ARBPRI_MASK: u32 = 255;
pub const APIC_PROCPRI: u32 = 160;
pub const APIC_EOI: u32 = 176;
pub const APIC_EOI_ACK: u32 = 0;
pub const APIC_RRR: u32 = 192;
pub const APIC_LDR: u32 = 208;
pub const APIC_LDR_MASK: u32 = 4278190080;
pub const APIC_ALL_CPUS: u32 = 255;
pub const APIC_DFR: u32 = 224;
pub const APIC_DFR_CLUSTER: u32 = 268435455;
pub const APIC_DFR_FLAT: u32 = 4294967295;
pub const APIC_SPIV: u32 = 240;
pub const APIC_SPIV_DIRECTED_EOI: u32 = 4096;
pub const APIC_SPIV_FOCUS_DISABLED: u32 = 512;
pub const APIC_SPIV_APIC_ENABLED: u32 = 256;
pub const APIC_ISR: u32 = 256;
pub const APIC_ISR_NR: u32 = 8;
pub const APIC_TMR: u32 = 384;
pub const APIC_IRR: u32 = 512;
pub const APIC_ESR: u32 = 640;
pub const APIC_ESR_SEND_CS: u32 = 1;
pub const APIC_ESR_RECV_CS: u32 = 2;
pub const APIC_ESR_SEND_ACC: u32 = 4;
pub const APIC_ESR_RECV_ACC: u32 = 8;
pub const APIC_ESR_SENDILL: u32 = 32;
pub const APIC_ESR_RECVILL: u32 = 64;
pub const APIC_ESR_ILLREGA: u32 = 128;
pub const APIC_LVTCMCI: u32 = 752;
pub const APIC_ICR: u32 = 768;
pub const APIC_DEST_SELF: u32 = 262144;
pub const APIC_DEST_ALLINC: u32 = 524288;
pub const APIC_DEST_ALLBUT: u32 = 786432;
pub const APIC_ICR_RR_MASK: u32 = 196608;
pub const APIC_ICR_RR_INVALID: u32 = 0;
pub const APIC_ICR_RR_INPROG: u32 = 65536;
pub const APIC_ICR_RR_VALID: u32 = 131072;
pub const APIC_INT_LEVELTRIG: u32 = 32768;
pub const APIC_INT_ASSERT: u32 = 16384;
pub const APIC_ICR_BUSY: u32 = 4096;
pub const APIC_DEST_LOGICAL: u32 = 2048;
pub const APIC_DEST_PHYSICAL: u32 = 0;
pub const APIC_DM_FIXED: u32 = 0;
pub const APIC_DM_FIXED_MASK: u32 = 1792;
pub const APIC_DM_LOWEST: u32 = 256;
pub const APIC_DM_SMI: u32 = 512;
pub const APIC_DM_REMRD: u32 = 768;
pub const APIC_DM_NMI: u32 = 1024;
pub const APIC_DM_INIT: u32 = 1280;
pub const APIC_DM_STARTUP: u32 = 1536;
pub const APIC_DM_EXTINT: u32 = 1792;
pub const APIC_VECTOR_MASK: u32 = 255;
pub const APIC_ICR2: u32 = 784;
pub const APIC_LVTT: u32 = 800;
pub const APIC_LVTTHMR: u32 = 816;
pub const APIC_LVTPC: u32 = 832;
pub const APIC_LVT0: u32 = 848;
pub const APIC_LVT_TIMER_ONESHOT: u32 = 0;
pub const APIC_LVT_TIMER_PERIODIC: u32 = 131072;
pub const APIC_LVT_TIMER_TSCDEADLINE: u32 = 262144;
pub const APIC_LVT_MASKED: u32 = 65536;
pub const APIC_LVT_LEVEL_TRIGGER: u32 = 32768;
pub const APIC_LVT_REMOTE_IRR: u32 = 16384;
pub const APIC_INPUT_POLARITY: u32 = 8192;
pub const APIC_SEND_PENDING: u32 = 4096;
pub const APIC_MODE_MASK: u32 = 1792;
pub const APIC_MODE_FIXED: u32 = 0;
pub const APIC_MODE_NMI: u32 = 4;
pub const APIC_MODE_EXTINT: u32 = 7;
pub const APIC_LVT1: u32 = 864;
pub const APIC_LVTERR: u32 = 880;
pub const APIC_TMICT: u32 = 896;
pub const APIC_TMCCT: u32 = 912;
pub const APIC_TDCR: u32 = 992;
pub const APIC_SELF_IPI: u32 = 1008;
pub const APIC_TDR_DIV_TMBASE: u32 = 4;
pub const APIC_TDR_DIV_1: u32 = 11;
pub const APIC_TDR_DIV_2: u32 = 0;
pub const APIC_TDR_DIV_4: u32 = 1;
pub const APIC_TDR_DIV_8: u32 = 2;
pub const APIC_TDR_DIV_16: u32 = 3;
pub const APIC_TDR_DIV_32: u32 = 8;
pub const APIC_TDR_DIV_64: u32 = 9;
pub const APIC_TDR_DIV_128: u32 = 10;
pub const APIC_EFEAT: u32 = 1024;
pub const APIC_ECTRL: u32 = 1040;
pub const APIC_EILVT_NR_AMD_K8: u32 = 1;
pub const APIC_EILVT_NR_AMD_10H: u32 = 4;
pub const APIC_EILVT_NR_MAX: u32 = 4;
pub const APIC_EILVT_MSG_FIX: u32 = 0;
pub const APIC_EILVT_MSG_SMI: u32 = 2;
pub const APIC_EILVT_MSG_NMI: u32 = 4;
pub const APIC_EILVT_MSG_EXT: u32 = 7;
pub const APIC_EILVT_MASKED: u32 = 65536;
pub const APIC_BASE_MSR: u32 = 2048;
pub const APIC_X2APIC_ID_MSR: u32 = 2050;
pub const MAX_IO_APICS: u32 = 128;
pub const MAX_LOCAL_APIC: u32 = 32768;
pub const XAPIC_DEST_CPUS_SHIFT: u32 = 4;
pub const XAPIC_DEST_CPUS_MASK: u32 = 15;
pub const XAPIC_DEST_CLUSTER_MASK: u32 = 240;
pub const BAD_APICID: u32 = 65535;
pub const VSYSCALL_ADDR: i32 = -10485760;
pub const NR_FIX_BTMAPS: u32 = 64;
pub const FIX_BTMAPS_SLOTS: u32 = 8;
pub const TOTAL_FIX_BTMAPS: u32 = 512;
pub const SWP_TYPE_BITS: u32 = 5;
pub const SWP_OFFSET_FIRST_BIT: u32 = 9;
pub const SWP_OFFSET_SHIFT: u32 = 14;
pub const HAVE_PAGE_AGP: u32 = 1;
pub const _ASM_PGTABLE_INVERT_H: u32 = 1;
pub const __HAVE_ARCH_PFN_MODIFY_ALLOWED: u32 = 1;
pub const TLB_FLUSH_ALL: i32 = -1;
pub const TLB_GENERATION_INVALID: u32 = 0;
pub const ARCH_HAS_NOCACHE_UACCESS: u32 = 1;
pub const CLONE_LEGACY_FLAGS: u32 = 4294967295;
pub const MONOTONIC_RES_NSEC: u32 = 4000000;
pub const KTIME_MONOTONIC_RES: u32 = 4000000;
pub const HRTIMER_STATE_INACTIVE: u32 = 0;
pub const HRTIMER_STATE_ENQUEUED: u32 = 1;
pub const ALARMTIMER_STATE_INACTIVE: u32 = 0;
pub const ALARMTIMER_STATE_ENQUEUED: u32 = 1;
pub const REQUEUE_PENDING: u32 = 1;
pub const SIGNAL_STOP_STOPPED: u32 = 1;
pub const SIGNAL_STOP_CONTINUED: u32 = 2;
pub const SIGNAL_GROUP_EXIT: u32 = 4;
pub const SIGNAL_CLD_STOPPED: u32 = 16;
pub const SIGNAL_CLD_CONTINUED: u32 = 32;
pub const SIGNAL_CLD_MASK: u32 = 48;
pub const SIGNAL_UNKILLABLE: u32 = 64;
pub const SIGNAL_STOP_MASK: u32 = 51;
pub const UUID_SIZE: u32 = 16;
pub const UUID_STRING_LEN: u32 = 36;
pub const RR_TIMESLICE: u32 = 25;
pub const IOPRIO_CLASS_SHIFT: u32 = 13;
pub const IOPRIO_NR_CLASSES: u32 = 8;
pub const IOPRIO_CLASS_MASK: u32 = 7;
pub const IOPRIO_PRIO_MASK: u32 = 8191;
pub const IOPRIO_LEVEL_NR_BITS: u32 = 3;
pub const IOPRIO_NR_LEVELS: u32 = 8;
pub const IOPRIO_LEVEL_MASK: u32 = 7;
pub const IOPRIO_BE_NR: u32 = 8;
pub const IOPRIO_NORM: u32 = 4;
pub const IOPRIO_BE_NORM: u32 = 4;
pub const IOPRIO_HINT_SHIFT: u32 = 3;
pub const IOPRIO_HINT_NR_BITS: u32 = 10;
pub const IOPRIO_NR_HINTS: u32 = 1024;
pub const IOPRIO_HINT_MASK: u32 = 1023;
pub const S_DT_SHIFT: u32 = 12;
pub const S_DT_MASK: u32 = 15;
pub const DT_UNKNOWN: u32 = 0;
pub const DT_FIFO: u32 = 1;
pub const DT_CHR: u32 = 2;
pub const DT_DIR: u32 = 4;
pub const DT_BLK: u32 = 6;
pub const DT_REG: u32 = 8;
pub const DT_LNK: u32 = 10;
pub const DT_SOCK: u32 = 12;
pub const DT_WHT: u32 = 14;
pub const DT_MAX: u32 = 16;
pub const FT_UNKNOWN: u32 = 0;
pub const FT_REG_FILE: u32 = 1;
pub const FT_DIR: u32 = 2;
pub const FT_CHRDEV: u32 = 3;
pub const FT_BLKDEV: u32 = 4;
pub const FT_FIFO: u32 = 5;
pub const FT_SOCK: u32 = 6;
pub const FT_SYMLINK: u32 = 7;
pub const FT_MAX: u32 = 8;
pub const MNT_NOSUID: u32 = 1;
pub const MNT_NODEV: u32 = 2;
pub const MNT_NOEXEC: u32 = 4;
pub const MNT_NOATIME: u32 = 8;
pub const MNT_NODIRATIME: u32 = 16;
pub const MNT_RELATIME: u32 = 32;
pub const MNT_READONLY: u32 = 64;
pub const MNT_NOSYMFOLLOW: u32 = 128;
pub const MNT_SHRINKABLE: u32 = 256;
pub const MNT_WRITE_HOLD: u32 = 512;
pub const MNT_SHARED: u32 = 4096;
pub const MNT_UNBINDABLE: u32 = 8192;
pub const MNT_SHARED_MASK: u32 = 8192;
pub const MNT_USER_SETTABLE_MASK: u32 = 255;
pub const MNT_ATIME_MASK: u32 = 56;
pub const MNT_INTERNAL: u32 = 16384;
pub const MNT_LOCK_ATIME: u32 = 262144;
pub const MNT_LOCK_NOEXEC: u32 = 524288;
pub const MNT_LOCK_NOSUID: u32 = 1048576;
pub const MNT_LOCK_NODEV: u32 = 2097152;
pub const MNT_LOCK_READONLY: u32 = 4194304;
pub const MNT_LOCKED: u32 = 8388608;
pub const MNT_DOOMED: u32 = 16777216;
pub const MNT_SYNC_UMOUNT: u32 = 33554432;
pub const MNT_MARKED: u32 = 67108864;
pub const MNT_UMOUNT: u32 = 134217728;
pub const MNT_ONRB: u32 = 268435456;
pub const INR_OPEN_CUR: u32 = 1024;
pub const INR_OPEN_MAX: u32 = 4096;
pub const BLOCK_SIZE_BITS: u32 = 10;
pub const BLOCK_SIZE: u32 = 1024;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const SEEK_MAX: u32 = 4;
pub const RENAME_NOREPLACE: u32 = 1;
pub const RENAME_EXCHANGE: u32 = 2;
pub const RENAME_WHITEOUT: u32 = 4;
pub const FILE_DEDUPE_RANGE_SAME: u32 = 0;
pub const FILE_DEDUPE_RANGE_DIFFERS: u32 = 1;
pub const NR_FILE: u32 = 8192;
pub const FS_XFLAG_REALTIME: u32 = 1;
pub const FS_XFLAG_PREALLOC: u32 = 2;
pub const FS_XFLAG_IMMUTABLE: u32 = 8;
pub const FS_XFLAG_APPEND: u32 = 16;
pub const FS_XFLAG_SYNC: u32 = 32;
pub const FS_XFLAG_NOATIME: u32 = 64;
pub const FS_XFLAG_NODUMP: u32 = 128;
pub const FS_XFLAG_RTINHERIT: u32 = 256;
pub const FS_XFLAG_PROJINHERIT: u32 = 512;
pub const FS_XFLAG_NOSYMLINKS: u32 = 1024;
pub const FS_XFLAG_EXTSIZE: u32 = 2048;
pub const FS_XFLAG_EXTSZINHERIT: u32 = 4096;
pub const FS_XFLAG_NODEFRAG: u32 = 8192;
pub const FS_XFLAG_FILESTREAM: u32 = 16384;
pub const FS_XFLAG_DAX: u32 = 32768;
pub const FS_XFLAG_COWEXTSIZE: u32 = 65536;
pub const FS_XFLAG_HASATTR: u32 = 2147483648;
pub const BMAP_IOCTL: u32 = 1;
pub const FSLABEL_MAX: u32 = 256;
pub const FS_SECRM_FL: u32 = 1;
pub const FS_UNRM_FL: u32 = 2;
pub const FS_COMPR_FL: u32 = 4;
pub const FS_SYNC_FL: u32 = 8;
pub const FS_IMMUTABLE_FL: u32 = 16;
pub const FS_APPEND_FL: u32 = 32;
pub const FS_NODUMP_FL: u32 = 64;
pub const FS_NOATIME_FL: u32 = 128;
pub const FS_DIRTY_FL: u32 = 256;
pub const FS_COMPRBLK_FL: u32 = 512;
pub const FS_NOCOMP_FL: u32 = 1024;
pub const FS_ENCRYPT_FL: u32 = 2048;
pub const FS_BTREE_FL: u32 = 4096;
pub const FS_INDEX_FL: u32 = 4096;
pub const FS_IMAGIC_FL: u32 = 8192;
pub const FS_JOURNAL_DATA_FL: u32 = 16384;
pub const FS_NOTAIL_FL: u32 = 32768;
pub const FS_DIRSYNC_FL: u32 = 65536;
pub const FS_TOPDIR_FL: u32 = 131072;
pub const FS_HUGE_FILE_FL: u32 = 262144;
pub const FS_EXTENT_FL: u32 = 524288;
pub const FS_VERITY_FL: u32 = 1048576;
pub const FS_EA_INODE_FL: u32 = 2097152;
pub const FS_EOFBLOCKS_FL: u32 = 4194304;
pub const FS_NOCOW_FL: u32 = 8388608;
pub const FS_DAX_FL: u32 = 33554432;
pub const FS_INLINE_DATA_FL: u32 = 268435456;
pub const FS_PROJINHERIT_FL: u32 = 536870912;
pub const FS_CASEFOLD_FL: u32 = 1073741824;
pub const FS_RESERVED_FL: u32 = 2147483648;
pub const FS_FL_USER_VISIBLE: u32 = 253951;
pub const FS_FL_USER_MODIFIABLE: u32 = 229631;
pub const SYNC_FILE_RANGE_WAIT_BEFORE: u32 = 1;
pub const SYNC_FILE_RANGE_WRITE: u32 = 2;
pub const SYNC_FILE_RANGE_WAIT_AFTER: u32 = 4;
pub const SYNC_FILE_RANGE_WRITE_AND_WAIT: u32 = 7;
pub const PAGE_IS_WPALLOWED: u32 = 1;
pub const PAGE_IS_WRITTEN: u32 = 2;
pub const PAGE_IS_FILE: u32 = 4;
pub const PAGE_IS_PRESENT: u32 = 8;
pub const PAGE_IS_SWAPPED: u32 = 16;
pub const PAGE_IS_PFNZERO: u32 = 32;
pub const PAGE_IS_HUGE: u32 = 64;
pub const PAGE_IS_SOFT_DIRTY: u32 = 128;
pub const PM_SCAN_WP_MATCHING: u32 = 1;
pub const PM_SCAN_CHECK_WPASYNC: u32 = 2;
pub const MAY_EXEC: u32 = 1;
pub const MAY_WRITE: u32 = 2;
pub const MAY_READ: u32 = 4;
pub const MAY_APPEND: u32 = 8;
pub const MAY_ACCESS: u32 = 16;
pub const MAY_OPEN: u32 = 32;
pub const MAY_CHDIR: u32 = 64;
pub const MAY_NOT_BLOCK: u32 = 128;
pub const ATTR_MODE: u32 = 1;
pub const ATTR_UID: u32 = 2;
pub const ATTR_GID: u32 = 4;
pub const ATTR_SIZE: u32 = 8;
pub const ATTR_ATIME: u32 = 16;
pub const ATTR_MTIME: u32 = 32;
pub const ATTR_CTIME: u32 = 64;
pub const ATTR_ATIME_SET: u32 = 128;
pub const ATTR_MTIME_SET: u32 = 256;
pub const ATTR_FORCE: u32 = 512;
pub const ATTR_KILL_SUID: u32 = 2048;
pub const ATTR_KILL_SGID: u32 = 4096;
pub const ATTR_FILE: u32 = 8192;
pub const ATTR_KILL_PRIV: u32 = 16384;
pub const ATTR_OPEN: u32 = 32768;
pub const ATTR_TIMES_SET: u32 = 65536;
pub const ATTR_TOUCH: u32 = 131072;
pub const WHITEOUT_MODE: u32 = 0;
pub const WHITEOUT_DEV: u32 = 0;
pub const XQM_USRQUOTA: u32 = 0;
pub const XQM_GRPQUOTA: u32 = 1;
pub const XQM_PRJQUOTA: u32 = 2;
pub const XQM_MAXQUOTAS: u32 = 3;
pub const FS_DQUOT_VERSION: u32 = 1;
pub const FS_DQ_ISOFT: u32 = 1;
pub const FS_DQ_IHARD: u32 = 2;
pub const FS_DQ_BSOFT: u32 = 4;
pub const FS_DQ_BHARD: u32 = 8;
pub const FS_DQ_RTBSOFT: u32 = 16;
pub const FS_DQ_RTBHARD: u32 = 32;
pub const FS_DQ_LIMIT_MASK: u32 = 63;
pub const FS_DQ_BTIMER: u32 = 64;
pub const FS_DQ_ITIMER: u32 = 128;
pub const FS_DQ_RTBTIMER: u32 = 256;
pub const FS_DQ_TIMER_MASK: u32 = 448;
pub const FS_DQ_BWARNS: u32 = 512;
pub const FS_DQ_IWARNS: u32 = 1024;
pub const FS_DQ_RTBWARNS: u32 = 2048;
pub const FS_DQ_WARNS_MASK: u32 = 3584;
pub const FS_DQ_BCOUNT: u32 = 4096;
pub const FS_DQ_ICOUNT: u32 = 8192;
pub const FS_DQ_RTBCOUNT: u32 = 16384;
pub const FS_DQ_ACCT_MASK: u32 = 28672;
pub const FS_DQ_BIGTIME: u32 = 32768;
pub const FS_QUOTA_UDQ_ACCT: u32 = 1;
pub const FS_QUOTA_UDQ_ENFD: u32 = 2;
pub const FS_QUOTA_GDQ_ACCT: u32 = 4;
pub const FS_QUOTA_GDQ_ENFD: u32 = 8;
pub const FS_QUOTA_PDQ_ACCT: u32 = 16;
pub const FS_QUOTA_PDQ_ENFD: u32 = 32;
pub const FS_USER_QUOTA: u32 = 1;
pub const FS_PROJ_QUOTA: u32 = 2;
pub const FS_GROUP_QUOTA: u32 = 4;
pub const FS_QSTAT_VERSION: u32 = 1;
pub const FS_QSTATV_VERSION1: u32 = 1;
pub const V1_INIT_ALLOC: u32 = 1;
pub const V1_INIT_REWRITE: u32 = 1;
pub const V1_DEL_ALLOC: u32 = 0;
pub const V1_DEL_REWRITE: u32 = 2;
pub const QTREE_INIT_ALLOC: u32 = 4;
pub const QTREE_INIT_REWRITE: u32 = 2;
pub const QTREE_DEL_ALLOC: u32 = 0;
pub const QTREE_DEL_REWRITE: u32 = 6;
pub const V2_INIT_ALLOC: u32 = 4;
pub const V2_INIT_REWRITE: u32 = 2;
pub const V2_DEL_ALLOC: u32 = 0;
pub const V2_DEL_REWRITE: u32 = 6;
pub const OVERFLOW_PROJID: u32 = 65534;
pub const __DQUOT_VERSION__: &[u8; 12usize] = b"dquot_6.6.0\0";
pub const MAXQUOTAS: u32 = 3;
pub const USRQUOTA: u32 = 0;
pub const GRPQUOTA: u32 = 1;
pub const PRJQUOTA: u32 = 2;
pub const SUBCMDMASK: u32 = 255;
pub const SUBCMDSHIFT: u32 = 8;
pub const Q_SYNC: u32 = 8388609;
pub const Q_QUOTAON: u32 = 8388610;
pub const Q_QUOTAOFF: u32 = 8388611;
pub const Q_GETFMT: u32 = 8388612;
pub const Q_GETINFO: u32 = 8388613;
pub const Q_SETINFO: u32 = 8388614;
pub const Q_GETQUOTA: u32 = 8388615;
pub const Q_SETQUOTA: u32 = 8388616;
pub const Q_GETNEXTQUOTA: u32 = 8388617;
pub const QFMT_VFS_OLD: u32 = 1;
pub const QFMT_VFS_V0: u32 = 2;
pub const QFMT_OCFS2: u32 = 3;
pub const QFMT_VFS_V1: u32 = 4;
pub const QFMT_SHMEM: u32 = 5;
pub const QIF_DQBLKSIZE_BITS: u32 = 10;
pub const QIF_DQBLKSIZE: u32 = 1024;
pub const IIF_BGRACE: u32 = 1;
pub const IIF_IGRACE: u32 = 2;
pub const IIF_FLAGS: u32 = 4;
pub const IIF_ALL: u32 = 7;
pub const QUOTA_NL_NOWARN: u32 = 0;
pub const QUOTA_NL_IHARDWARN: u32 = 1;
pub const QUOTA_NL_ISOFTLONGWARN: u32 = 2;
pub const QUOTA_NL_ISOFTWARN: u32 = 3;
pub const QUOTA_NL_BHARDWARN: u32 = 4;
pub const QUOTA_NL_BSOFTLONGWARN: u32 = 5;
pub const QUOTA_NL_BSOFTWARN: u32 = 6;
pub const QUOTA_NL_IHARDBELOW: u32 = 7;
pub const QUOTA_NL_ISOFTBELOW: u32 = 8;
pub const QUOTA_NL_BHARDBELOW: u32 = 9;
pub const QUOTA_NL_BSOFTBELOW: u32 = 10;
pub const QTYPE_MASK_USR: u32 = 1;
pub const QTYPE_MASK_GRP: u32 = 2;
pub const QTYPE_MASK_PRJ: u32 = 4;
pub const DQ_MOD_B: u32 = 0;
pub const DQ_BLKS_B: u32 = 1;
pub const DQ_INODES_B: u32 = 2;
pub const DQ_FAKE_B: u32 = 3;
pub const DQ_READ_B: u32 = 4;
pub const DQ_ACTIVE_B: u32 = 5;
pub const DQ_RELEASING_B: u32 = 6;
pub const DQ_LASTSET_B: u32 = 7;
pub const QC_INO_SOFT: u32 = 1;
pub const QC_INO_HARD: u32 = 2;
pub const QC_SPC_SOFT: u32 = 4;
pub const QC_SPC_HARD: u32 = 8;
pub const QC_RT_SPC_SOFT: u32 = 16;
pub const QC_RT_SPC_HARD: u32 = 32;
pub const QC_LIMIT_MASK: u32 = 63;
pub const QC_SPC_TIMER: u32 = 64;
pub const QC_INO_TIMER: u32 = 128;
pub const QC_RT_SPC_TIMER: u32 = 256;
pub const QC_TIMER_MASK: u32 = 448;
pub const QC_SPC_WARNS: u32 = 512;
pub const QC_INO_WARNS: u32 = 1024;
pub const QC_RT_SPC_WARNS: u32 = 2048;
pub const QC_WARNS_MASK: u32 = 3584;
pub const QC_SPACE: u32 = 4096;
pub const QC_INO_COUNT: u32 = 8192;
pub const QC_RT_SPACE: u32 = 16384;
pub const QC_ACCT_MASK: u32 = 28672;
pub const QC_FLAGS: u32 = 32768;
pub const QCI_SYSFILE: u32 = 1;
pub const QCI_ROOT_SQUASH: u32 = 2;
pub const QCI_ACCT_ENABLED: u32 = 4;
pub const QCI_LIMITS_ENFORCED: u32 = 8;
pub const FILESYSTEM_MAX_STACK_DEPTH: u32 = 2;
pub const IOCB_EVENTFD: u32 = 65536;
pub const IOCB_DIRECT: u32 = 131072;
pub const IOCB_WRITE: u32 = 262144;
pub const IOCB_WAITQ: u32 = 524288;
pub const IOCB_NOIO: u32 = 1048576;
pub const IOCB_ALLOC_CACHE: u32 = 2097152;
pub const IOCB_DIO_CALLER_COMP: u32 = 4194304;
pub const IOCB_AIO_RW: u32 = 8388608;
pub const IOP_FASTPERM: u32 = 1;
pub const IOP_LOOKUP: u32 = 2;
pub const IOP_NOFOLLOW: u32 = 4;
pub const IOP_XATTR: u32 = 8;
pub const IOP_DEFAULT_READLINK: u32 = 16;
pub const MAX_NON_LFS: u32 = 2147483647;
pub const FASYNC_MAGIC: u32 = 17921;
pub const SB_ENC_STRICT_MODE_FL: u32 = 1;
pub const MNT_FORCE: u32 = 1;
pub const MNT_DETACH: u32 = 2;
pub const MNT_EXPIRE: u32 = 4;
pub const UMOUNT_NOFOLLOW: u32 = 8;
pub const UMOUNT_UNUSED: u32 = 2147483648;
pub const SB_I_CGROUPWB: u32 = 1;
pub const SB_I_NOEXEC: u32 = 2;
pub const SB_I_NODEV: u32 = 4;
pub const SB_I_STABLE_WRITES: u32 = 8;
pub const SB_I_USERNS_VISIBLE: u32 = 16;
pub const SB_I_IMA_UNVERIFIABLE_SIGNATURE: u32 = 32;
pub const SB_I_UNTRUSTED_MOUNTER: u32 = 64;
pub const SB_I_EVM_HMAC_UNSUPPORTED: u32 = 128;
pub const SB_I_SKIP_SYNC: u32 = 256;
pub const SB_I_PERSB_BDI: u32 = 512;
pub const SB_I_TS_EXPIRY_WARNED: u32 = 1024;
pub const SB_I_RETIRED: u32 = 2048;
pub const SB_I_NOUMASK: u32 = 4096;
pub const NOMMU_MAP_COPY: u32 = 1;
pub const NOMMU_MAP_DIRECT: u32 = 8;
pub const REMAP_FILE_DEDUP: u32 = 1;
pub const REMAP_FILE_CAN_SHORTEN: u32 = 2;
pub const REMAP_FILE_ADVISORY: u32 = 2;
pub const COPY_FILE_SPLICE: u32 = 1;
pub const S_SYNC: u32 = 1;
pub const S_NOATIME: u32 = 2;
pub const S_APPEND: u32 = 4;
pub const S_IMMUTABLE: u32 = 8;
pub const S_DEAD: u32 = 16;
pub const S_NOQUOTA: u32 = 32;
pub const S_DIRSYNC: u32 = 64;
pub const S_NOCMTIME: u32 = 128;
pub const S_SWAPFILE: u32 = 256;
pub const S_PRIVATE: u32 = 512;
pub const S_IMA: u32 = 1024;
pub const S_AUTOMOUNT: u32 = 2048;
pub const S_NOSEC: u32 = 4096;
pub const S_DAX: u32 = 0;
pub const S_ENCRYPTED: u32 = 16384;
pub const S_CASEFOLD: u32 = 32768;
pub const S_VERITY: u32 = 65536;
pub const S_KERNEL_FILE: u32 = 131072;
pub const I_DIRTY_SYNC: u32 = 1;
pub const I_DIRTY_DATASYNC: u32 = 2;
pub const I_DIRTY_PAGES: u32 = 4;
pub const __I_NEW: u32 = 3;
pub const I_NEW: u32 = 8;
pub const I_WILL_FREE: u32 = 16;
pub const I_FREEING: u32 = 32;
pub const I_CLEAR: u32 = 64;
pub const __I_SYNC: u32 = 7;
pub const I_SYNC: u32 = 128;
pub const I_REFERENCED: u32 = 256;
pub const __I_DIO_WAKEUP: u32 = 9;
pub const I_DIO_WAKEUP: u32 = 512;
pub const I_LINKABLE: u32 = 1024;
pub const I_DIRTY_TIME: u32 = 2048;
pub const I_WB_SWITCH: u32 = 8192;
pub const I_OVL_INUSE: u32 = 16384;
pub const I_CREATING: u32 = 32768;
pub const I_DONTCACHE: u32 = 65536;
pub const I_SYNC_QUEUED: u32 = 131072;
pub const I_PINNING_NETFS_WB: u32 = 262144;
pub const I_DIRTY_INODE: u32 = 3;
pub const I_DIRTY: u32 = 7;
pub const I_DIRTY_ALL: u32 = 2055;
pub const FS_REQUIRES_DEV: u32 = 1;
pub const FS_BINARY_MOUNTDATA: u32 = 2;
pub const FS_HAS_SUBTYPE: u32 = 4;
pub const FS_USERNS_MOUNT: u32 = 8;
pub const FS_DISALLOW_NOTIFY_PERM: u32 = 16;
pub const FS_ALLOW_IDMAP: u32 = 32;
pub const FS_RENAME_DOES_D_MOVE: u32 = 32768;
pub const CHRDEV_MAJOR_MAX: u32 = 512;
pub const CHRDEV_MAJOR_DYN_END: u32 = 234;
pub const CHRDEV_MAJOR_DYN_EXT_START: u32 = 511;
pub const CHRDEV_MAJOR_DYN_EXT_END: u32 = 384;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ftrace_branch_data {
    pub func: *const core::ffi::c_char,
    pub file: *const core::ffi::c_char,
    pub line: core::ffi::c_uint,
    pub __bindgen_anon_1: ftrace_branch_data__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ftrace_branch_data__bindgen_ty_1 {
    pub __bindgen_anon_1: ftrace_branch_data__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: ftrace_branch_data__bindgen_ty_1__bindgen_ty_2,
    pub miss_hit: [core::ffi::c_ulong; 2usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ftrace_branch_data__bindgen_ty_1__bindgen_ty_1 {
    pub correct: core::ffi::c_ulong,
    pub incorrect: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ftrace_branch_data__bindgen_ty_1__bindgen_ty_2 {
    pub miss: core::ffi::c_ulong,
    pub hit: core::ffi::c_ulong,
}
impl Default for ftrace_branch_data__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ftrace_branch_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ftrace_likely_data {
    pub data: ftrace_branch_data,
    pub constant: core::ffi::c_ulong,
}
impl Default for ftrace_likely_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn ftrace_likely_update(
        f: *mut ftrace_likely_data,
        val: core::ffi::c_int,
        expect: core::ffi::c_int,
        is_constant: core::ffi::c_int,
    );
}
pub type __s8 = core::ffi::c_schar;
pub type __u8 = core::ffi::c_uchar;
pub type __s16 = core::ffi::c_short;
pub type __u16 = core::ffi::c_ushort;
pub type __s32 = core::ffi::c_int;
pub type __u32 = core::ffi::c_uint;
pub type __s64 = core::ffi::c_longlong;
pub type __u64 = core::ffi::c_ulonglong;
pub type s8 = __s8;
pub type u8_ = __u8;
pub type s16 = __s16;
pub type u16_ = __u16;
pub type s32 = __s32;
pub type u32_ = __u32;
pub type s64 = __s64;
pub type u64_ = __u64;
pub const false_: _bindgen_ty_1 = 0;
pub const true_: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [core::ffi::c_ulong; 16usize],
}
pub type __kernel_sighandler_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: core::ffi::c_int)>;
pub type __kernel_key_t = core::ffi::c_int;
pub type __kernel_mqd_t = core::ffi::c_int;
pub type __kernel_old_uid_t = core::ffi::c_ushort;
pub type __kernel_old_gid_t = core::ffi::c_ushort;
pub type __kernel_old_dev_t = core::ffi::c_ulong;
pub type __kernel_long_t = core::ffi::c_long;
pub type __kernel_ulong_t = core::ffi::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = core::ffi::c_uint;
pub type __kernel_pid_t = core::ffi::c_int;
pub type __kernel_ipc_pid_t = core::ffi::c_int;
pub type __kernel_uid_t = core::ffi::c_uint;
pub type __kernel_gid_t = core::ffi::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = core::ffi::c_int;
pub type __kernel_uid32_t = core::ffi::c_uint;
pub type __kernel_gid32_t = core::ffi::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [core::ffi::c_int; 2usize],
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = core::ffi::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time64_t = core::ffi::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = core::ffi::c_int;
pub type __kernel_clockid_t = core::ffi::c_int;
pub type __kernel_caddr_t = *mut core::ffi::c_char;
pub type __kernel_uid16_t = core::ffi::c_ushort;
pub type __kernel_gid16_t = core::ffi::c_ushort;
pub type __s128 = i128;
pub type __u128 = u128;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = core::ffi::c_uint;
pub type s128 = __s128;
pub type u128_ = __u128;
pub type __kernel_dev_t = u32_;
pub type fd_set = __kernel_fd_set;
pub type dev_t = __kernel_dev_t;
pub type ino_t = __kernel_ulong_t;
pub type mode_t = __kernel_mode_t;
pub type umode_t = core::ffi::c_ushort;
pub type nlink_t = u32_;
pub type off_t = __kernel_off_t;
pub type pid_t = __kernel_pid_t;
pub type daddr_t = __kernel_daddr_t;
pub type key_t = __kernel_key_t;
pub type suseconds_t = __kernel_suseconds_t;
pub type timer_t = __kernel_timer_t;
pub type clockid_t = __kernel_clockid_t;
pub type mqd_t = __kernel_mqd_t;
pub type bool_ = bool;
pub type uid_t = __kernel_uid32_t;
pub type gid_t = __kernel_gid32_t;
pub type uid16_t = __kernel_uid16_t;
pub type gid16_t = __kernel_gid16_t;
pub type loff_t = __kernel_loff_t;
pub type clock_t = __kernel_clock_t;
pub type caddr_t = __kernel_caddr_t;
pub type u_char = core::ffi::c_uchar;
pub type u_short = core::ffi::c_ushort;
pub type u_int = core::ffi::c_uint;
pub type u_long = core::ffi::c_ulong;
pub type unchar = core::ffi::c_uchar;
pub type ushort = core::ffi::c_ushort;
pub type uint = core::ffi::c_uint;
pub type ulong = core::ffi::c_ulong;
pub type u_int8_t = u8_;
pub type u_int16_t = u16_;
pub type u_int32_t = u32_;
pub type u_int64_t = u64_;
pub type ktime_t = s64;
pub type sector_t = u64_;
pub type blkcnt_t = u64_;
pub type dma_addr_t = u64_;
pub type gfp_t = core::ffi::c_uint;
pub type slab_flags_t = core::ffi::c_uint;
pub type fmode_t = core::ffi::c_uint;
pub type phys_addr_t = u64_;
pub type resource_size_t = phys_addr_t;
pub type irq_hw_number_t = core::ffi::c_ulong;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct atomic_t {
    pub counter: core::ffi::c_int,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct atomic64_t {
    pub counter: s64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct rcuref_t {
    pub refcnt: atomic_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct list_head {
    pub next: *mut list_head,
    pub prev: *mut list_head,
}
impl Default for list_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hlist_head {
    pub first: *mut hlist_node,
}
impl Default for hlist_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hlist_node {
    pub next: *mut hlist_node,
    pub pprev: *mut *mut hlist_node,
}
impl Default for hlist_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ustat {
    pub f_tfree: __kernel_daddr_t,
    pub f_tinode: core::ffi::c_ulong,
    pub f_fname: [core::ffi::c_char; 6usize],
    pub f_fpack: [core::ffi::c_char; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct callback_head {
    pub next: *mut callback_head,
    pub func: ::core::option::Option<unsafe extern "C" fn(head: *mut callback_head)>,
}
impl Default for callback_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type rcu_callback_t = ::core::option::Option<unsafe extern "C" fn(head: *mut callback_head)>;
pub type call_rcu_func_t =
    ::core::option::Option<unsafe extern "C" fn(head: *mut callback_head, func: rcu_callback_t)>;
pub type swap_r_func_t = ::core::option::Option<
    unsafe extern "C" fn(
        a: *mut core::ffi::c_void,
        b: *mut core::ffi::c_void,
        size: core::ffi::c_int,
        priv_: *const core::ffi::c_void,
    ),
>;
pub type swap_func_t = ::core::option::Option<
    unsafe extern "C" fn(
        a: *mut core::ffi::c_void,
        b: *mut core::ffi::c_void,
        size: core::ffi::c_int,
    ),
>;
pub type cmp_r_func_t = ::core::option::Option<
    unsafe extern "C" fn(
        a: *const core::ffi::c_void,
        b: *const core::ffi::c_void,
        priv_: *const core::ffi::c_void,
    ) -> core::ffi::c_int,
>;
pub type cmp_func_t = ::core::option::Option<
    unsafe extern "C" fn(
        a: *const core::ffi::c_void,
        b: *const core::ffi::c_void,
    ) -> core::ffi::c_int,
>;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kcsan_scoped_access {}
pub type va_list = __builtin_va_list;
pub type initcall_t = ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>;
pub type exitcall_t = ::core::option::Option<unsafe extern "C" fn()>;
pub type initcall_entry_t = core::ffi::c_int;
extern "C" {
    pub static mut __con_initcall_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __con_initcall_end: [initcall_entry_t; 0usize];
}
pub type ctor_fn_t = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn do_one_initcall(fn_: initcall_t) -> core::ffi::c_int;
}
extern "C" {
    pub static mut boot_command_line: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut saved_command_line: *mut core::ffi::c_char;
}
extern "C" {
    pub static mut saved_command_line_len: core::ffi::c_uint;
}
extern "C" {
    pub static mut reset_devices: core::ffi::c_uint;
}
extern "C" {
    pub fn setup_arch(arg1: *mut *mut core::ffi::c_char);
}
extern "C" {
    pub fn prepare_namespace();
}
extern "C" {
    pub fn init_rootfs();
}
extern "C" {
    pub fn init_IRQ();
}
extern "C" {
    pub fn time_init();
}
extern "C" {
    pub fn poking_init();
}
extern "C" {
    pub fn pgtable_cache_init();
}
extern "C" {
    pub static mut __initcall_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall0_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall1_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall2_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall3_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall4_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall5_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall6_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall7_start: [initcall_entry_t; 0usize];
}
extern "C" {
    pub static mut __initcall_end: [initcall_entry_t; 0usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct file_system_type {
    pub name: *const core::ffi::c_char,
    pub fs_flags: core::ffi::c_int,
    pub init_fs_context:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut fs_context) -> core::ffi::c_int>,
    pub parameters: *const fs_parameter_spec,
    pub mount: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file_system_type,
            arg2: core::ffi::c_int,
            arg3: *const core::ffi::c_char,
            arg4: *mut core::ffi::c_void,
        ) -> *mut dentry,
    >,
    pub kill_sb: ::core::option::Option<unsafe extern "C" fn(arg1: *mut super_block)>,
    pub owner: *mut module,
    pub next: *mut file_system_type,
    pub fs_supers: hlist_head,
    pub s_lock_key: lock_class_key,
    pub s_umount_key: lock_class_key,
    pub s_vfs_rename_key: lock_class_key,
    pub s_writers_key: [lock_class_key; 3usize],
    pub i_lock_key: lock_class_key,
    pub i_mutex_key: lock_class_key,
    pub invalidate_lock_key: lock_class_key,
    pub i_mutex_dir_key: lock_class_key,
}
impl Default for file_system_type {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut rootfs_fs_type: file_system_type;
}
extern "C" {
    pub static mut rodata_enabled: bool_;
}
extern "C" {
    pub fn mark_rodata_ro();
}
extern "C" {
    pub static mut late_time_init: ::core::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    pub static mut initcall_debug: bool_;
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct module {
    pub state: module_state,
    pub list: list_head,
    pub name: [core::ffi::c_char; 56usize],
    pub mkobj: module_kobject,
    pub modinfo_attrs: *mut module_attribute,
    pub version: *const core::ffi::c_char,
    pub srcversion: *const core::ffi::c_char,
    pub holders_dir: *mut kobject,
    pub syms: *mut kernel_symbol,
    pub crcs: *const s32,
    pub num_syms: core::ffi::c_uint,
    pub param_lock: mutex,
    pub kp: *mut kernel_param,
    pub num_kp: core::ffi::c_uint,
    pub num_gpl_syms: core::ffi::c_uint,
    pub gpl_syms: *const kernel_symbol,
    pub gpl_crcs: *const s32,
    pub using_gplonly_symbols: bool_,
    pub async_probe_requested: bool_,
    pub num_exentries: core::ffi::c_uint,
    pub extable: *mut exception_table_entry,
    pub init: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
    pub mem: [module_memory; 7usize],
    pub arch: mod_arch_specific,
    pub taints: core::ffi::c_ulong,
    pub num_bugs: core::ffi::c_uint,
    pub bug_list: list_head,
    pub bug_table: *mut bug_entry,
    pub kallsyms: *mut mod_kallsyms,
    pub core_kallsyms: mod_kallsyms,
    pub sect_attrs: *mut module_sect_attrs,
    pub notes_attrs: *mut module_notes_attrs,
    pub args: *mut core::ffi::c_char,
    pub percpu: *mut core::ffi::c_void,
    pub percpu_size: core::ffi::c_uint,
    pub noinstr_text_start: *mut core::ffi::c_void,
    pub noinstr_text_size: core::ffi::c_uint,
    pub num_srcu_structs: core::ffi::c_uint,
    pub srcu_struct_ptrs: *mut *mut srcu_struct,
    pub num_static_call_sites: core::ffi::c_int,
    pub static_call_sites: *mut static_call_site,
    pub source_list: list_head,
    pub target_list: list_head,
    pub exit: ::core::option::Option<unsafe extern "C" fn()>,
    pub refcnt: atomic_t,
}
impl Default for module {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut __this_module: module;
}
extern "C" {
    pub fn ibt_save(disable: bool_) -> u64_;
}
extern "C" {
    pub fn ibt_restore(save: u64_);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct qspinlock {
    pub __bindgen_anon_1: qspinlock__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union qspinlock__bindgen_ty_1 {
    pub val: atomic_t,
    pub __bindgen_anon_1: qspinlock__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: qspinlock__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct qspinlock__bindgen_ty_1__bindgen_ty_1 {
    pub locked: u8_,
    pub pending: u8_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct qspinlock__bindgen_ty_1__bindgen_ty_2 {
    pub locked_pending: u16_,
    pub tail: u16_,
}
impl Default for qspinlock__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for qspinlock {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type arch_spinlock_t = qspinlock;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct qrwlock {
    pub __bindgen_anon_1: qrwlock__bindgen_ty_1,
    pub wait_lock: arch_spinlock_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union qrwlock__bindgen_ty_1 {
    pub cnts: atomic_t,
    pub __bindgen_anon_1: qrwlock__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct qrwlock__bindgen_ty_1__bindgen_ty_1 {
    pub wlocked: u8_,
    pub __lstate: [u8_; 3usize],
}
impl Default for qrwlock__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for qrwlock {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type arch_rwlock_t = qrwlock;
pub const lockdep_wait_type_LD_WAIT_INV: lockdep_wait_type = 0;
pub const lockdep_wait_type_LD_WAIT_FREE: lockdep_wait_type = 1;
pub const lockdep_wait_type_LD_WAIT_SPIN: lockdep_wait_type = 2;
pub const lockdep_wait_type_LD_WAIT_CONFIG: lockdep_wait_type = 2;
pub const lockdep_wait_type_LD_WAIT_SLEEP: lockdep_wait_type = 3;
pub const lockdep_wait_type_LD_WAIT_MAX: lockdep_wait_type = 4;
pub type lockdep_wait_type = core::ffi::c_uint;
pub const lockdep_lock_type_LD_LOCK_NORMAL: lockdep_lock_type = 0;
pub const lockdep_lock_type_LD_LOCK_PERCPU: lockdep_lock_type = 1;
pub const lockdep_lock_type_LD_LOCK_WAIT_OVERRIDE: lockdep_lock_type = 2;
pub const lockdep_lock_type_LD_LOCK_MAX: lockdep_lock_type = 3;
pub type lockdep_lock_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct lock_class_key {}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct lockdep_map {}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pin_cookie {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct raw_spinlock {
    pub raw_lock: arch_spinlock_t,
}
impl Default for raw_spinlock {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type raw_spinlock_t = raw_spinlock;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ratelimit_state {
    pub lock: raw_spinlock_t,
    pub interval: core::ffi::c_int,
    pub burst: core::ffi::c_int,
    pub printed: core::ffi::c_int,
    pub missed: core::ffi::c_int,
    pub begin: core::ffi::c_ulong,
    pub flags: core::ffi::c_ulong,
}
impl Default for ratelimit_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn ___ratelimit(
        rs: *mut ratelimit_state,
        func: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static linux_banner: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static linux_proc_banner: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut oops_in_progress: core::ffi::c_int;
}
extern "C" {
    pub static mut console_printk: [core::ffi::c_int; 0usize];
}
extern "C" {
    pub fn console_verbose();
}
extern "C" {
    pub static mut devkmsg_log_str: [core::ffi::c_char; 10usize];
}
extern "C" {
    pub static mut suppress_printk: core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct va_format {
    pub fmt: *const core::ffi::c_char,
    pub va: *mut va_list,
}
impl Default for va_format {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn early_printk(fmt: *const core::ffi::c_char, ...);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dev_printk_info {
    _unused: [u8; 0],
}
extern "C" {
    pub fn vprintk_emit(
        facility: core::ffi::c_int,
        level: core::ffi::c_int,
        dev_info: *const dev_printk_info,
        fmt: *const core::ffi::c_char,
        args: *mut __va_list_tag,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vprintk(fmt: *const core::ffi::c_char, args: *mut __va_list_tag) -> core::ffi::c_int;
}
extern "C" {
    pub fn _printk(fmt: *const core::ffi::c_char, ...) -> core::ffi::c_int;
}
extern "C" {
    pub fn _printk_deferred(fmt: *const core::ffi::c_char, ...) -> core::ffi::c_int;
}
extern "C" {
    pub fn __printk_safe_enter();
}
extern "C" {
    pub fn __printk_safe_exit();
}
extern "C" {
    pub fn __printk_ratelimit(func: *const core::ffi::c_char) -> core::ffi::c_int;
}
extern "C" {
    pub fn printk_timed_ratelimit(
        caller_jiffies: *mut core::ffi::c_ulong,
        interval_msec: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub static mut printk_delay_msec: core::ffi::c_int;
}
extern "C" {
    pub static mut dmesg_restrict: core::ffi::c_int;
}
extern "C" {
    pub fn wake_up_klogd();
}
extern "C" {
    pub fn log_buf_addr_get() -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn log_buf_len_get() -> u32_;
}
extern "C" {
    pub fn log_buf_vmcoreinfo_setup();
}
extern "C" {
    pub fn setup_log_buf(early: core::ffi::c_int);
}
extern "C" {
    pub fn dump_stack_set_arch_desc(fmt: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn dump_stack_print_info(log_lvl: *const core::ffi::c_char);
}
extern "C" {
    pub fn show_regs_print_info(log_lvl: *const core::ffi::c_char);
}
extern "C" {
    pub fn dump_stack_lvl(log_lvl: *const core::ffi::c_char);
}
extern "C" {
    pub fn dump_stack();
}
extern "C" {
    pub fn printk_trigger_flush();
}
extern "C" {
    pub fn console_replay_all();
}
extern "C" {
    pub fn this_cpu_in_panic() -> bool_;
}
extern "C" {
    pub fn __printk_cpu_sync_try_get() -> core::ffi::c_int;
}
extern "C" {
    pub fn __printk_cpu_sync_wait();
}
extern "C" {
    pub fn __printk_cpu_sync_put();
}
extern "C" {
    pub static mut kptr_restrict: core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct file_operations {
    pub owner: *mut module,
    pub fop_flags: fop_flags_t,
    pub llseek: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: loff_t, arg3: core::ffi::c_int) -> loff_t,
    >,
    pub read: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut core::ffi::c_char,
            arg3: usize,
            arg4: *mut loff_t,
        ) -> isize,
    >,
    pub write: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *const core::ffi::c_char,
            arg3: usize,
            arg4: *mut loff_t,
        ) -> isize,
    >,
    pub read_iter: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize,
    >,
    pub write_iter: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize,
    >,
    pub iopoll: ::core::option::Option<
        unsafe extern "C" fn(
            kiocb: *mut kiocb,
            arg1: *mut io_comp_batch,
            flags: core::ffi::c_uint,
        ) -> core::ffi::c_int,
    >,
    pub iterate_shared: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: *mut dir_context) -> core::ffi::c_int,
    >,
    pub poll: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: *mut poll_table_struct) -> __poll_t,
    >,
    pub unlocked_ioctl: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: core::ffi::c_uint,
            arg3: core::ffi::c_ulong,
        ) -> core::ffi::c_long,
    >,
    pub compat_ioctl: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: core::ffi::c_uint,
            arg3: core::ffi::c_ulong,
        ) -> core::ffi::c_long,
    >,
    pub mmap: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: *mut vm_area_struct) -> core::ffi::c_int,
    >,
    pub open: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut file) -> core::ffi::c_int,
    >,
    pub flush: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file, id: fl_owner_t) -> core::ffi::c_int,
    >,
    pub release: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut file) -> core::ffi::c_int,
    >,
    pub fsync: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: loff_t,
            arg3: loff_t,
            datasync: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub fasync: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: core::ffi::c_int,
            arg2: *mut file,
            arg3: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub lock: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: core::ffi::c_int,
            arg3: *mut file_lock,
        ) -> core::ffi::c_int,
    >,
    pub get_unmapped_area: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: core::ffi::c_ulong,
            arg3: core::ffi::c_ulong,
            arg4: core::ffi::c_ulong,
            arg5: core::ffi::c_ulong,
        ) -> core::ffi::c_ulong,
    >,
    pub check_flags:
        ::core::option::Option<unsafe extern "C" fn(arg1: core::ffi::c_int) -> core::ffi::c_int>,
    pub flock: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: core::ffi::c_int,
            arg3: *mut file_lock,
        ) -> core::ffi::c_int,
    >,
    pub splice_write: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut pipe_inode_info,
            arg2: *mut file,
            arg3: *mut loff_t,
            arg4: usize,
            arg5: core::ffi::c_uint,
        ) -> isize,
    >,
    pub splice_read: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut loff_t,
            arg3: *mut pipe_inode_info,
            arg4: usize,
            arg5: core::ffi::c_uint,
        ) -> isize,
    >,
    pub splice_eof: ::core::option::Option<unsafe extern "C" fn(file: *mut file)>,
    pub setlease: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: core::ffi::c_int,
            arg3: *mut *mut file_lease,
            arg4: *mut *mut core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
    pub fallocate: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut file,
            mode: core::ffi::c_int,
            offset: loff_t,
            len: loff_t,
        ) -> core::ffi::c_long,
    >,
    pub show_fdinfo: ::core::option::Option<unsafe extern "C" fn(m: *mut seq_file, f: *mut file)>,
    pub copy_file_range: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: loff_t,
            arg3: *mut file,
            arg4: loff_t,
            arg5: usize,
            arg6: core::ffi::c_uint,
        ) -> isize,
    >,
    pub remap_file_range: ::core::option::Option<
        unsafe extern "C" fn(
            file_in: *mut file,
            pos_in: loff_t,
            file_out: *mut file,
            pos_out: loff_t,
            len: loff_t,
            remap_flags: core::ffi::c_uint,
        ) -> loff_t,
    >,
    pub fadvise: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: loff_t,
            arg3: loff_t,
            arg4: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub uring_cmd: ::core::option::Option<
        unsafe extern "C" fn(
            ioucmd: *mut io_uring_cmd,
            issue_flags: core::ffi::c_uint,
        ) -> core::ffi::c_int,
    >,
    pub uring_cmd_iopoll: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut io_uring_cmd,
            arg2: *mut io_comp_batch,
            poll_flags: core::ffi::c_uint,
        ) -> core::ffi::c_int,
    >,
}
impl Default for file_operations {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static kmsg_fops: file_operations;
}
pub const DUMP_PREFIX_NONE: _bindgen_ty_2 = 0;
pub const DUMP_PREFIX_ADDRESS: _bindgen_ty_2 = 1;
pub const DUMP_PREFIX_OFFSET: _bindgen_ty_2 = 2;
pub type _bindgen_ty_2 = core::ffi::c_uint;
extern "C" {
    pub fn hex_dump_to_buffer(
        buf: *const core::ffi::c_void,
        len: usize,
        rowsize: core::ffi::c_int,
        groupsize: core::ffi::c_int,
        linebuf: *mut core::ffi::c_char,
        linebuflen: usize,
        ascii: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn print_hex_dump(
        level: *const core::ffi::c_char,
        prefix_str: *const core::ffi::c_char,
        prefix_type: core::ffi::c_int,
        rowsize: core::ffi::c_int,
        groupsize: core::ffi::c_int,
        buf: *const core::ffi::c_void,
        len: usize,
        ascii: bool_,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct string_stream {
    _unused: [u8; 0],
}
pub const kunit_assert_type_KUNIT_ASSERTION: kunit_assert_type = 0;
pub const kunit_assert_type_KUNIT_EXPECTATION: kunit_assert_type = 1;
pub type kunit_assert_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kunit_loc {
    pub line: core::ffi::c_int,
    pub file: *const core::ffi::c_char,
}
impl Default for kunit_loc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kunit_assert {}
pub type assert_format_t = ::core::option::Option<
    unsafe extern "C" fn(
        assert: *const kunit_assert,
        message: *const va_format,
        stream: *mut string_stream,
    ),
>;
extern "C" {
    pub fn kunit_assert_prologue(
        loc: *const kunit_loc,
        type_: kunit_assert_type,
        stream: *mut string_stream,
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kunit_fail_assert {
    pub assert: kunit_assert,
}
extern "C" {
    pub fn kunit_fail_assert_format(
        assert: *const kunit_assert,
        message: *const va_format,
        stream: *mut string_stream,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kunit_unary_assert {
    pub assert: kunit_assert,
    pub condition: *const core::ffi::c_char,
    pub expected_true: bool_,
}
impl Default for kunit_unary_assert {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn kunit_unary_assert_format(
        assert: *const kunit_assert,
        message: *const va_format,
        stream: *mut string_stream,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kunit_ptr_not_err_assert {
    pub assert: kunit_assert,
    pub text: *const core::ffi::c_char,
    pub value: *const core::ffi::c_void,
}
impl Default for kunit_ptr_not_err_assert {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn kunit_ptr_not_err_assert_format(
        assert: *const kunit_assert,
        message: *const va_format,
        stream: *mut string_stream,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kunit_binary_assert_text {
    pub operation: *const core::ffi::c_char,
    pub left_text: *const core::ffi::c_char,
    pub right_text: *const core::ffi::c_char,
}
impl Default for kunit_binary_assert_text {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kunit_binary_assert {
    pub assert: kunit_assert,
    pub text: *const kunit_binary_assert_text,
    pub left_value: core::ffi::c_longlong,
    pub right_value: core::ffi::c_longlong,
}
impl Default for kunit_binary_assert {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn kunit_binary_assert_format(
        assert: *const kunit_assert,
        message: *const va_format,
        stream: *mut string_stream,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kunit_binary_ptr_assert {
    pub assert: kunit_assert,
    pub text: *const kunit_binary_assert_text,
    pub left_value: *const core::ffi::c_void,
    pub right_value: *const core::ffi::c_void,
}
impl Default for kunit_binary_ptr_assert {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn kunit_binary_ptr_assert_format(
        assert: *const kunit_assert,
        message: *const va_format,
        stream: *mut string_stream,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kunit_binary_str_assert {
    pub assert: kunit_assert,
    pub text: *const kunit_binary_assert_text,
    pub left_value: *const core::ffi::c_char,
    pub right_value: *const core::ffi::c_char,
}
impl Default for kunit_binary_str_assert {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn kunit_binary_str_assert_format(
        assert: *const kunit_assert,
        message: *const va_format,
        stream: *mut string_stream,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kunit_mem_assert {
    pub assert: kunit_assert,
    pub text: *const kunit_binary_assert_text,
    pub left_value: *const core::ffi::c_void,
    pub right_value: *const core::ffi::c_void,
    pub size: usize,
}
impl Default for kunit_mem_assert {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn kunit_mem_assert_format(
        assert: *const kunit_assert,
        message: *const va_format,
        stream: *mut string_stream,
    );
}
pub type kunit_try_catch_func_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut core::ffi::c_void)>;
#[repr(C)]
#[repr(align(8))]
#[derive(Default, Copy, Clone)]
pub struct kunit_try_catch {
    pub _bindgen_opaque_blob: [u64; 5usize],
}
extern "C" {
    pub fn kunit_try_catch_run(try_catch: *mut kunit_try_catch, context: *mut core::ffi::c_void);
}
extern "C" {
    pub fn kunit_try_catch_throw(try_catch: *mut kunit_try_catch) -> !;
}
extern "C" {
    pub static mut static_key_initialized: bool_;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct static_key {
    pub enabled: atomic_t,
}
pub const jump_label_type_JUMP_LABEL_NOP: jump_label_type = 0;
pub const jump_label_type_JUMP_LABEL_JMP: jump_label_type = 1;
pub type jump_label_type = core::ffi::c_uint;
extern "C" {
    #[link_name = "\u{1}rsp"]
    pub static mut current_stack_pointer: core::ffi::c_ulong;
}
#[repr(C)]
#[repr(align(1))]
#[derive(Default, Copy, Clone)]
pub struct alt_instr {
    pub _bindgen_opaque_blob: [u8; 14usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union alt_instr__bindgen_ty_1 {
    pub __bindgen_anon_1: alt_instr__bindgen_ty_1__bindgen_ty_1,
    pub ft_flags: u32_,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct alt_instr__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl alt_instr__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn cpuid(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_cpuid(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(cpuid: u32_, flags: u32_) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let cpuid: u32 = unsafe { ::core::mem::transmute(cpuid) };
            cpuid as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let flags: u32 = unsafe { ::core::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for alt_instr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut __alt_instructions: [alt_instr; 0usize];
}
extern "C" {
    pub static mut __alt_instructions_end: [alt_instr; 0usize];
}
extern "C" {
    pub static mut alternatives_patched: core::ffi::c_int;
}
extern "C" {
    pub fn alternative_instructions();
}
extern "C" {
    pub fn apply_alternatives(start: *mut alt_instr, end: *mut alt_instr);
}
extern "C" {
    pub fn apply_retpolines(start: *mut s32, end: *mut s32);
}
extern "C" {
    pub fn apply_returns(start: *mut s32, end: *mut s32);
}
extern "C" {
    pub fn apply_seal_endbr(start: *mut s32, end: *mut s32);
}
extern "C" {
    pub fn apply_fineibt(
        start_retpoline: *mut s32,
        end_retpoine: *mut s32,
        start_cfi: *mut s32,
        end_cfi: *mut s32,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct callthunk_sites {
    pub call_start: *mut s32,
    pub call_end: *mut s32,
    pub alt_start: *mut alt_instr,
    pub alt_end: *mut alt_instr,
}
impl Default for callthunk_sites {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn alternatives_smp_module_add(
        mod_: *mut module,
        name: *mut core::ffi::c_char,
        locks: *mut core::ffi::c_void,
        locks_end: *mut core::ffi::c_void,
        text: *mut core::ffi::c_void,
        text_end: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn alternatives_smp_module_del(mod_: *mut module);
}
extern "C" {
    pub fn alternatives_enable_smp();
}
extern "C" {
    pub fn alternatives_text_reserved(
        start: *mut core::ffi::c_void,
        end: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static mut skip_smp_alternatives: bool_;
}
extern "C" {
    pub fn BUG_func();
}
extern "C" {
    pub fn nop_func();
}
extern "C" {
    pub fn __xchg_wrong_size();
}
extern "C" {
    pub fn __cmpxchg_wrong_size();
}
extern "C" {
    pub fn __xadd_wrong_size();
}
extern "C" {
    pub fn __add_wrong_size();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union __u128_halves {
    pub full: u128_,
    pub __bindgen_anon_1: __u128_halves__bindgen_ty_1,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __u128_halves__bindgen_ty_1 {
    pub low: u64_,
    pub high: u64_,
}
impl Default for __u128_halves {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static x86_nops: [*const core::ffi::c_uchar; 0usize];
}
pub type atomic_long_t = atomic64_t;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct unwind_hint {
    pub ip: u32_,
    pub sp_offset: s16,
    pub sp_reg: u8_,
    pub type_: u8_,
    pub signal: u8_,
}
extern "C" {
    pub static mut panic_blink:
        ::core::option::Option<unsafe extern "C" fn(state: core::ffi::c_int) -> core::ffi::c_long>;
}
extern "C" {
    pub fn panic(fmt: *const core::ffi::c_char, ...) -> !;
}
extern "C" {
    pub fn nmi_panic(regs: *mut pt_regs, msg: *const core::ffi::c_char);
}
extern "C" {
    pub fn check_panic_on_warn(origin: *const core::ffi::c_char);
}
extern "C" {
    pub fn oops_enter();
}
extern "C" {
    pub fn oops_exit();
}
extern "C" {
    pub fn oops_may_print() -> bool_;
}
extern "C" {
    pub static mut panic_timeout: core::ffi::c_int;
}
extern "C" {
    pub static mut panic_print: core::ffi::c_ulong;
}
extern "C" {
    pub static mut panic_on_oops: core::ffi::c_int;
}
extern "C" {
    pub static mut panic_on_unrecovered_nmi: core::ffi::c_int;
}
extern "C" {
    pub static mut panic_on_io_nmi: core::ffi::c_int;
}
extern "C" {
    pub static mut panic_on_warn: core::ffi::c_int;
}
extern "C" {
    pub static mut panic_on_taint: core::ffi::c_ulong;
}
extern "C" {
    pub static mut panic_on_taint_nousertaint: bool_;
}
extern "C" {
    pub static mut sysctl_panic_on_rcu_stall: core::ffi::c_int;
}
extern "C" {
    pub static mut sysctl_max_rcu_stall_to_panic: core::ffi::c_int;
}
extern "C" {
    pub static mut sysctl_panic_on_stackoverflow: core::ffi::c_int;
}
extern "C" {
    pub static mut crash_kexec_post_notifiers: bool_;
}
extern "C" {
    pub fn __stack_chk_fail();
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub static mut panic_cpu: atomic_t;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct taint_flag {
    pub c_true: core::ffi::c_char,
    pub c_false: core::ffi::c_char,
    pub module: bool_,
}
extern "C" {
    pub static taint_flags: [taint_flag; 19usize];
}
pub const lockdep_ok_LOCKDEP_STILL_OK: lockdep_ok = 0;
pub const lockdep_ok_LOCKDEP_NOW_UNRELIABLE: lockdep_ok = 1;
pub type lockdep_ok = core::ffi::c_uint;
extern "C" {
    pub fn print_tainted() -> *const core::ffi::c_char;
}
extern "C" {
    pub fn add_taint(flag: core::ffi::c_uint, arg1: lockdep_ok);
}
extern "C" {
    pub fn test_taint(flag: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_taint() -> core::ffi::c_ulong;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct warn_args {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __warn(
        file: *const core::ffi::c_char,
        line: core::ffi::c_int,
        caller: *mut core::ffi::c_void,
        taint: core::ffi::c_uint,
        regs: *mut pt_regs,
        args: *mut warn_args,
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bug_entry {
    pub bug_addr_disp: core::ffi::c_int,
    pub file_disp: core::ffi::c_int,
    pub line: core::ffi::c_ushort,
    pub flags: core::ffi::c_ushort,
}
extern "C" {
    pub fn warn_slowpath_fmt(
        file: *const core::ffi::c_char,
        line: core::ffi::c_int,
        taint: core::ffi::c_uint,
        fmt: *const core::ffi::c_char,
        ...
    );
}
extern "C" {
    pub fn __warn_printk(fmt: *const core::ffi::c_char, ...);
}
pub const bug_trap_type_BUG_TRAP_TYPE_NONE: bug_trap_type = 0;
pub const bug_trap_type_BUG_TRAP_TYPE_WARN: bug_trap_type = 1;
pub const bug_trap_type_BUG_TRAP_TYPE_BUG: bug_trap_type = 2;
pub type bug_trap_type = core::ffi::c_uint;
extern "C" {
    pub fn bug_get_file_line(
        bug: *mut bug_entry,
        file: *mut *const core::ffi::c_char,
        line: *mut core::ffi::c_uint,
    );
}
extern "C" {
    pub fn find_bug(bugaddr: core::ffi::c_ulong) -> *mut bug_entry;
}
extern "C" {
    pub fn report_bug(bug_addr: core::ffi::c_ulong, regs: *mut pt_regs) -> bug_trap_type;
}
extern "C" {
    pub fn is_valid_bugaddr(addr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_bug_clear_once();
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct static_key_true {
    pub key: static_key,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct static_key_false {
    pub key: static_key,
}
extern "C" {
    pub fn ____wrong_branch_error() -> bool_;
}
extern "C" {
    pub fn __bad_size_call_parameter();
}
extern "C" {
    pub static mut __per_cpu_offset: [core::ffi::c_ulong; 2usize];
}
extern "C" {
    pub fn setup_per_cpu_areas();
}
extern "C" {
    pub static mut this_cpu_off: core::ffi::c_ulong;
}
#[repr(C)]
#[derive(Default)]
pub struct sysinfo {
    pub uptime: __kernel_long_t,
    pub loads: [__kernel_ulong_t; 3usize],
    pub totalram: __kernel_ulong_t,
    pub freeram: __kernel_ulong_t,
    pub sharedram: __kernel_ulong_t,
    pub bufferram: __kernel_ulong_t,
    pub totalswap: __kernel_ulong_t,
    pub freeswap: __kernel_ulong_t,
    pub procs: __u16,
    pub pad: __u16,
    pub totalhigh: __kernel_ulong_t,
    pub freehigh: __kernel_ulong_t,
    pub mem_unit: __u32,
    pub _f: __IncompleteArrayField<core::ffi::c_char>,
}
#[repr(C)]
#[repr(align(64))]
pub struct cacheline_padding {
    pub x: __IncompleteArrayField<core::ffi::c_char>,
}
impl Default for cacheline_padding {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pcpu_hot {
    pub __bindgen_anon_1: pcpu_hot__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pcpu_hot__bindgen_ty_1 {
    pub __bindgen_anon_1: pcpu_hot__bindgen_ty_1__bindgen_ty_1,
    pub pad: [u8_; 64usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pcpu_hot__bindgen_ty_1__bindgen_ty_1 {
    pub current_task: *mut task_struct,
    pub preempt_count: core::ffi::c_int,
    pub cpu_number: core::ffi::c_int,
    pub top_of_stack: core::ffi::c_ulong,
    pub hardirq_stack_ptr: *mut core::ffi::c_void,
    pub softirq_pending: u16_,
    pub hardirq_stack_inuse: bool_,
}
impl Default for pcpu_hot__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for pcpu_hot__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for pcpu_hot {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut pcpu_hot: pcpu_hot;
}
extern "C" {
    pub static mut const_pcpu_hot: pcpu_hot;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct static_call_site {
    pub addr: s32,
    pub key: s32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct static_call_key {
    pub func: *mut core::ffi::c_void,
    pub __bindgen_anon_1: static_call_key__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union static_call_key__bindgen_ty_1 {
    pub type_: core::ffi::c_ulong,
    pub mods: *mut static_call_mod,
    pub sites: *mut static_call_site,
}
impl Default for static_call_key__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for static_call_key {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn migrate_disable();
}
extern "C" {
    pub fn migrate_enable();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_preempt_t {
    pub lock: *mut core::ffi::c_void,
}
impl Default for class_preempt_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_preempt_notrace_t {
    pub lock: *mut core::ffi::c_void,
}
impl Default for class_preempt_notrace_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_migrate_t {
    pub lock: *mut core::ffi::c_void,
}
impl Default for class_migrate_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const cc_attr_CC_ATTR_MEM_ENCRYPT: cc_attr = 0;
pub const cc_attr_CC_ATTR_HOST_MEM_ENCRYPT: cc_attr = 1;
pub const cc_attr_CC_ATTR_GUEST_MEM_ENCRYPT: cc_attr = 2;
pub const cc_attr_CC_ATTR_GUEST_STATE_ENCRYPT: cc_attr = 3;
pub const cc_attr_CC_ATTR_GUEST_UNROLL_STRING_IO: cc_attr = 4;
pub const cc_attr_CC_ATTR_GUEST_SEV_SNP: cc_attr = 5;
pub const cc_attr_CC_ATTR_HOTPLUG_DISABLED: cc_attr = 6;
pub const cc_attr_CC_ATTR_HOST_SEV_SNP: cc_attr = 7;
pub type cc_attr = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct boot_params {
    _unused: [u8; 0],
}
extern "C" {
    pub fn add_encrypt_protection_map();
}
extern "C" {
    pub static mut __start_bss_decrypted: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __end_bss_decrypted: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut __start_bss_decrypted_unused: [core::ffi::c_char; 0usize];
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct orc_entry {
    pub sp_offset: s16,
    pub bp_offset: s16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl orc_entry {
    #[inline]
    pub fn sp_reg(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_sp_reg(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bp_reg(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_bp_reg(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn signal(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_signal(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sp_reg: core::ffi::c_uint,
        bp_reg: core::ffi::c_uint,
        type_: core::ffi::c_uint,
        signal: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let sp_reg: u32 = unsafe { ::core::mem::transmute(sp_reg) };
            sp_reg as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let bp_reg: u32 = unsafe { ::core::mem::transmute(bp_reg) };
            bp_reg as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let type_: u32 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let signal: u32 = unsafe { ::core::mem::transmute(signal) };
            signal as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type retpoline_thunk_t = [u8_; 32usize];
extern "C" {
    pub static mut __x86_indirect_thunk_array: [retpoline_thunk_t; 0usize];
}
extern "C" {
    pub static mut __x86_indirect_call_thunk_array: [retpoline_thunk_t; 0usize];
}
extern "C" {
    pub static mut __x86_indirect_jump_thunk_array: [retpoline_thunk_t; 0usize];
}
extern "C" {
    pub fn srso_alias_untrain_ret();
}
extern "C" {
    pub fn entry_untrain_ret();
}
extern "C" {
    pub fn entry_ibpb();
}
extern "C" {
    pub fn clear_bhb_loop();
}
extern "C" {
    pub static mut x86_return_thunk: ::core::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    pub fn __warn_thunk();
}
pub const spectre_v2_mitigation_SPECTRE_V2_NONE: spectre_v2_mitigation = 0;
pub const spectre_v2_mitigation_SPECTRE_V2_RETPOLINE: spectre_v2_mitigation = 1;
pub const spectre_v2_mitigation_SPECTRE_V2_LFENCE: spectre_v2_mitigation = 2;
pub const spectre_v2_mitigation_SPECTRE_V2_EIBRS: spectre_v2_mitigation = 3;
pub const spectre_v2_mitigation_SPECTRE_V2_EIBRS_RETPOLINE: spectre_v2_mitigation = 4;
pub const spectre_v2_mitigation_SPECTRE_V2_EIBRS_LFENCE: spectre_v2_mitigation = 5;
pub const spectre_v2_mitigation_SPECTRE_V2_IBRS: spectre_v2_mitigation = 6;
pub type spectre_v2_mitigation = core::ffi::c_uint;
pub const spectre_v2_user_mitigation_SPECTRE_V2_USER_NONE: spectre_v2_user_mitigation = 0;
pub const spectre_v2_user_mitigation_SPECTRE_V2_USER_STRICT: spectre_v2_user_mitigation = 1;
pub const spectre_v2_user_mitigation_SPECTRE_V2_USER_STRICT_PREFERRED: spectre_v2_user_mitigation =
    2;
pub const spectre_v2_user_mitigation_SPECTRE_V2_USER_PRCTL: spectre_v2_user_mitigation = 3;
pub const spectre_v2_user_mitigation_SPECTRE_V2_USER_SECCOMP: spectre_v2_user_mitigation = 4;
pub type spectre_v2_user_mitigation = core::ffi::c_uint;
pub const ssb_mitigation_SPEC_STORE_BYPASS_NONE: ssb_mitigation = 0;
pub const ssb_mitigation_SPEC_STORE_BYPASS_DISABLE: ssb_mitigation = 1;
pub const ssb_mitigation_SPEC_STORE_BYPASS_PRCTL: ssb_mitigation = 2;
pub const ssb_mitigation_SPEC_STORE_BYPASS_SECCOMP: ssb_mitigation = 3;
pub type ssb_mitigation = core::ffi::c_uint;
extern "C" {
    pub static mut x86_pred_cmd: u64_;
}
extern "C" {
    pub static mut x86_spec_ctrl_base: u64_;
}
extern "C" {
    pub static mut x86_spec_ctrl_current: core::ffi::c_ulonglong;
}
extern "C" {
    pub fn update_spec_ctrl_cond(val: u64_);
}
extern "C" {
    pub fn spec_ctrl_current() -> u64_;
}
extern "C" {
    pub static mut switch_to_cond_stibp: static_key_false;
}
extern "C" {
    pub static mut switch_mm_cond_ibpb: static_key_false;
}
extern "C" {
    pub static mut switch_mm_always_ibpb: static_key_false;
}
extern "C" {
    pub static mut mds_idle_clear: static_key_false;
}
extern "C" {
    pub static mut switch_mm_cond_l1d_flush: static_key_false;
}
extern "C" {
    pub static mut mmio_stale_data_clear: static_key_false;
}
extern "C" {
    pub static mut mds_verw_sel: u16_;
}
extern "C" {
    pub static mut early_idt_handler_array: [[core::ffi::c_char; 13usize]; 32usize];
}
extern "C" {
    pub fn early_ignore_irq();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_irq_t {
    pub lock: *mut core::ffi::c_void,
}
impl Default for class_irq_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_irqsave_t {
    pub lock: *mut core::ffi::c_void,
    pub flags: core::ffi::c_ulong,
}
impl Default for class_irqsave_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct timespec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pollfd {
    _unused: [u8; 0],
}
pub const timespec_type_TT_NONE: timespec_type = 0;
pub const timespec_type_TT_NATIVE: timespec_type = 1;
pub const timespec_type_TT_COMPAT: timespec_type = 2;
pub type timespec_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct restart_block {
    pub arch_data: core::ffi::c_ulong,
    pub fn_:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut restart_block) -> core::ffi::c_long>,
    pub __bindgen_anon_1: restart_block__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union restart_block__bindgen_ty_1 {
    pub futex: restart_block__bindgen_ty_1__bindgen_ty_1,
    pub nanosleep: restart_block__bindgen_ty_1__bindgen_ty_2,
    pub poll: restart_block__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct restart_block__bindgen_ty_1__bindgen_ty_1 {
    pub uaddr: *mut u32_,
    pub val: u32_,
    pub flags: u32_,
    pub bitset: u32_,
    pub time: u64_,
    pub uaddr2: *mut u32_,
}
impl Default for restart_block__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct restart_block__bindgen_ty_1__bindgen_ty_2 {
    pub clockid: clockid_t,
    pub type_: timespec_type,
    pub __bindgen_anon_1: restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub expires: u64_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub rmtp: *mut __kernel_timespec,
    pub compat_rmtp: *mut old_timespec32,
}
impl Default for restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for restart_block__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct restart_block__bindgen_ty_1__bindgen_ty_3 {
    pub ufds: *mut pollfd,
    pub nfds: core::ffi::c_int,
    pub has_timeout: core::ffi::c_int,
    pub tv_sec: core::ffi::c_ulong,
    pub tv_nsec: core::ffi::c_ulong,
}
impl Default for restart_block__bindgen_ty_1__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for restart_block__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for restart_block {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn do_no_restart_syscall(parm: *mut restart_block) -> core::ffi::c_long;
}
extern "C" {
    pub fn __sw_hweight8(w: core::ffi::c_uint) -> core::ffi::c_uint;
}
extern "C" {
    pub fn __sw_hweight16(w: core::ffi::c_uint) -> core::ffi::c_uint;
}
extern "C" {
    pub fn __sw_hweight32(w: core::ffi::c_uint) -> core::ffi::c_uint;
}
extern "C" {
    pub fn __sw_hweight64(w: __u64) -> core::ffi::c_ulong;
}
pub const BAD_STACK: _bindgen_ty_3 = -1;
pub const NOT_STACK: _bindgen_ty_3 = 0;
pub const GOOD_FRAME: _bindgen_ty_3 = 1;
pub const GOOD_STACK: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = core::ffi::c_int;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SECCOMP: syscall_work_bit = 0;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SYSCALL_TRACEPOINT: syscall_work_bit = 1;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SYSCALL_TRACE: syscall_work_bit = 2;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SYSCALL_EMU: syscall_work_bit = 3;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SYSCALL_AUDIT: syscall_work_bit = 4;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SYSCALL_USER_DISPATCH: syscall_work_bit = 5;
pub const syscall_work_bit_SYSCALL_WORK_BIT_SYSCALL_EXIT_TRAP: syscall_work_bit = 6;
pub type syscall_work_bit = core::ffi::c_uint;
extern "C" {
    pub fn kaslr_get_random_long(purpose: *const core::ffi::c_char) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn devmem_is_allowed(pagenr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub static mut max_low_pfn_mapped: core::ffi::c_ulong;
}
extern "C" {
    pub static mut max_pfn_mapped: core::ffi::c_ulong;
}
extern "C" {
    pub fn pfn_range_is_mapped(start_pfn: core::ffi::c_ulong, end_pfn: core::ffi::c_ulong)
        -> bool_;
}
extern "C" {
    pub fn initmem_init();
}
extern "C" {
    pub static mut max_pfn: core::ffi::c_ulong;
}
extern "C" {
    pub static mut phys_base: core::ffi::c_ulong;
}
extern "C" {
    pub static mut page_offset_base: core::ffi::c_ulong;
}
extern "C" {
    pub static mut vmalloc_base: core::ffi::c_ulong;
}
extern "C" {
    pub static mut vmemmap_base: core::ffi::c_ulong;
}
extern "C" {
    pub fn clear_page_orig(page: *mut core::ffi::c_void);
}
extern "C" {
    pub fn clear_page_rep(page: *mut core::ffi::c_void);
}
extern "C" {
    pub fn clear_page_erms(page: *mut core::ffi::c_void);
}
extern "C" {
    pub fn copy_page(to: *mut core::ffi::c_void, from: *mut core::ffi::c_void);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct range {
    pub start: u64_,
    pub end: u64_,
}
extern "C" {
    pub fn add_range(
        range: *mut range,
        az: core::ffi::c_int,
        nr_range: core::ffi::c_int,
        start: u64_,
        end: u64_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn add_range_with_merge(
        range: *mut range,
        az: core::ffi::c_int,
        nr_range: core::ffi::c_int,
        start: u64_,
        end: u64_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn subtract_range(range: *mut range, az: core::ffi::c_int, start: u64_, end: u64_);
}
extern "C" {
    pub fn clean_sort_range(range: *mut range, az: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn sort_range(range: *mut range, nr_range: core::ffi::c_int);
}
extern "C" {
    pub static mut pfn_mapped: [range; 0usize];
}
extern "C" {
    pub static mut nr_pfn_mapped: core::ffi::c_int;
}
extern "C" {
    pub fn __virt_addr_valid(kaddr: core::ffi::c_ulong) -> bool_;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pfn_t {
    pub val: u64_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_bitmap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm86 {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(8))]
#[derive(Default, Copy, Clone)]
pub struct fred_cs {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl fred_cs {
    #[inline]
    pub fn cs(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_cs(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn sl(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 2u8) as u64) }
    }
    #[inline]
    pub fn set_sl(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn wfe(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_wfe(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(cs: u64_, sl: u64_, wfe: u64_) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let cs: u64 = unsafe { ::core::mem::transmute(cs) };
            cs as u64
        });
        __bindgen_bitfield_unit.set(16usize, 2u8, {
            let sl: u64 = unsafe { ::core::mem::transmute(sl) };
            sl as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let wfe: u64 = unsafe { ::core::mem::transmute(wfe) };
            wfe as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Default, Copy, Clone)]
pub struct fred_ss {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl fred_ss {
    #[inline]
    pub fn ss(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_ss(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn sti(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sti(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn swevent(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_swevent(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nmi(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_nmi(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn vector(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_vector(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(48usize, 4u8) as u64) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(48usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn enclave(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(56usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_enclave(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(56usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lm(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(57usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_lm(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(57usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nested(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(58usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_nested(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(58usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn insnlen(&self) -> u64_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(60usize, 4u8) as u64) }
    }
    #[inline]
    pub fn set_insnlen(&mut self, val: u64_) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(60usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ss: u64_,
        sti: u64_,
        swevent: u64_,
        nmi: u64_,
        vector: u64_,
        type_: u64_,
        enclave: u64_,
        lm: u64_,
        nested: u64_,
        insnlen: u64_,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let ss: u64 = unsafe { ::core::mem::transmute(ss) };
            ss as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let sti: u64 = unsafe { ::core::mem::transmute(sti) };
            sti as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let swevent: u64 = unsafe { ::core::mem::transmute(swevent) };
            swevent as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let nmi: u64 = unsafe { ::core::mem::transmute(nmi) };
            nmi as u64
        });
        __bindgen_bitfield_unit.set(32usize, 8u8, {
            let vector: u64 = unsafe { ::core::mem::transmute(vector) };
            vector as u64
        });
        __bindgen_bitfield_unit.set(48usize, 4u8, {
            let type_: u64 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(56usize, 1u8, {
            let enclave: u64 = unsafe { ::core::mem::transmute(enclave) };
            enclave as u64
        });
        __bindgen_bitfield_unit.set(57usize, 1u8, {
            let lm: u64 = unsafe { ::core::mem::transmute(lm) };
            lm as u64
        });
        __bindgen_bitfield_unit.set(58usize, 1u8, {
            let nested: u64 = unsafe { ::core::mem::transmute(nested) };
            nested as u64
        });
        __bindgen_bitfield_unit.set(60usize, 4u8, {
            let insnlen: u64 = unsafe { ::core::mem::transmute(insnlen) };
            insnlen as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pt_regs {
    pub r15: core::ffi::c_ulong,
    pub r14: core::ffi::c_ulong,
    pub r13: core::ffi::c_ulong,
    pub r12: core::ffi::c_ulong,
    pub bp: core::ffi::c_ulong,
    pub bx: core::ffi::c_ulong,
    pub r11: core::ffi::c_ulong,
    pub r10: core::ffi::c_ulong,
    pub r9: core::ffi::c_ulong,
    pub r8: core::ffi::c_ulong,
    pub ax: core::ffi::c_ulong,
    pub cx: core::ffi::c_ulong,
    pub dx: core::ffi::c_ulong,
    pub si: core::ffi::c_ulong,
    pub di: core::ffi::c_ulong,
    pub orig_ax: core::ffi::c_ulong,
    pub ip: core::ffi::c_ulong,
    pub __bindgen_anon_1: pt_regs__bindgen_ty_1,
    pub flags: core::ffi::c_ulong,
    pub sp: core::ffi::c_ulong,
    pub __bindgen_anon_2: pt_regs__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pt_regs__bindgen_ty_1 {
    pub cs: u16_,
    pub csx: u64_,
    pub fred_cs: fred_cs,
}
impl Default for pt_regs__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pt_regs__bindgen_ty_2 {
    pub ss: u16_,
    pub ssx: u64_,
    pub fred_ss: fred_ss,
}
impl Default for pt_regs__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for pt_regs {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct user_desc {
    pub entry_number: core::ffi::c_uint,
    pub base_addr: core::ffi::c_uint,
    pub limit: core::ffi::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl user_desc {
    #[inline]
    pub fn seg_32bit(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_seg_32bit(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn contents(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_contents(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn read_exec_only(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_read_exec_only(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn limit_in_pages(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_limit_in_pages(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn seg_not_present(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_seg_not_present(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn useable(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_useable(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lm(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lm(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        seg_32bit: core::ffi::c_uint,
        contents: core::ffi::c_uint,
        read_exec_only: core::ffi::c_uint,
        limit_in_pages: core::ffi::c_uint,
        seg_not_present: core::ffi::c_uint,
        useable: core::ffi::c_uint,
        lm: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let seg_32bit: u32 = unsafe { ::core::mem::transmute(seg_32bit) };
            seg_32bit as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let contents: u32 = unsafe { ::core::mem::transmute(contents) };
            contents as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let read_exec_only: u32 = unsafe { ::core::mem::transmute(read_exec_only) };
            read_exec_only as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let limit_in_pages: u32 = unsafe { ::core::mem::transmute(limit_in_pages) };
            limit_in_pages as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let seg_not_present: u32 = unsafe { ::core::mem::transmute(seg_not_present) };
            seg_not_present as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let useable: u32 = unsafe { ::core::mem::transmute(useable) };
            useable as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let lm: u32 = unsafe { ::core::mem::transmute(lm) };
            lm as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn syscall_init();
}
extern "C" {
    pub fn entry_SYSCALL_64();
}
extern "C" {
    pub fn entry_SYSCALL_64_safe_stack();
}
extern "C" {
    pub fn entry_SYSRETQ_unsafe_stack();
}
extern "C" {
    pub fn entry_SYSRETQ_end();
}
extern "C" {
    pub fn do_arch_prctl_64(
        task: *mut task_struct,
        option: core::ffi::c_int,
        arg2: core::ffi::c_ulong,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn x86_configure_nx();
}
extern "C" {
    pub static mut reboot_force: core::ffi::c_int;
}
extern "C" {
    pub fn do_arch_prctl_common(
        option: core::ffi::c_int,
        arg2: core::ffi::c_ulong,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn profile_pc(regs: *mut pt_regs) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn convert_ip_to_linear(child: *mut task_struct, regs: *mut pt_regs) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn send_sigtrap(
        regs: *mut pt_regs,
        error_code: core::ffi::c_int,
        si_code: core::ffi::c_int,
    );
}
extern "C" {
    pub fn regs_query_register_offset(name: *const core::ffi::c_char) -> core::ffi::c_int;
}
extern "C" {
    pub fn regs_query_register_name(offset: core::ffi::c_uint) -> *const core::ffi::c_char;
}
extern "C" {
    pub fn copy_from_kernel_nofault(
        dst: *mut core::ffi::c_void,
        src: *const core::ffi::c_void,
        size: usize,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn do_get_thread_area(
        p: *mut task_struct,
        idx: core::ffi::c_int,
        info: *mut user_desc,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_set_thread_area(
        p: *mut task_struct,
        idx: core::ffi::c_int,
        info: *mut user_desc,
        can_allocate: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct math_emu_info {
    pub ___orig_eip: core::ffi::c_long,
    pub regs: *mut pt_regs,
}
impl Default for math_emu_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _fpx_sw_bytes {
    pub magic1: __u32,
    pub extended_size: __u32,
    pub xfeatures: __u64,
    pub xstate_size: __u32,
    pub padding: [__u32; 7usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _fpreg {
    pub significand: [__u16; 4usize],
    pub exponent: __u16,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _fpxreg {
    pub significand: [__u16; 4usize],
    pub exponent: __u16,
    pub padding: [__u16; 3usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _xmmreg {
    pub element: [__u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _fpstate_32 {
    pub cw: __u32,
    pub sw: __u32,
    pub tag: __u32,
    pub ipoff: __u32,
    pub cssel: __u32,
    pub dataoff: __u32,
    pub datasel: __u32,
    pub _st: [_fpreg; 8usize],
    pub status: __u16,
    pub magic: __u16,
    pub _fxsr_env: [__u32; 6usize],
    pub mxcsr: __u32,
    pub reserved: __u32,
    pub _fxsr_st: [_fpxreg; 8usize],
    pub _xmm: [_xmmreg; 8usize],
    pub __bindgen_anon_1: _fpstate_32__bindgen_ty_1,
    pub __bindgen_anon_2: _fpstate_32__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _fpstate_32__bindgen_ty_1 {
    pub padding1: [__u32; 44usize],
    pub padding: [__u32; 44usize],
}
impl Default for _fpstate_32__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _fpstate_32__bindgen_ty_2 {
    pub padding2: [__u32; 12usize],
    pub sw_reserved: _fpx_sw_bytes,
}
impl Default for _fpstate_32__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _fpstate_32 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _fpstate_64 {
    pub cwd: __u16,
    pub swd: __u16,
    pub twd: __u16,
    pub fop: __u16,
    pub rip: __u64,
    pub rdp: __u64,
    pub mxcsr: __u32,
    pub mxcsr_mask: __u32,
    pub st_space: [__u32; 32usize],
    pub xmm_space: [__u32; 64usize],
    pub reserved2: [__u32; 12usize],
    pub __bindgen_anon_1: _fpstate_64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _fpstate_64__bindgen_ty_1 {
    pub reserved3: [__u32; 12usize],
    pub sw_reserved: _fpx_sw_bytes,
}
impl Default for _fpstate_64__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _fpstate_64 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _header {
    pub xfeatures: __u64,
    pub reserved1: [__u64; 2usize],
    pub reserved2: [__u64; 5usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ymmh_state {
    pub ymmh_space: [__u32; 64usize],
}
impl Default for _ymmh_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _xstate {
    pub fpstate: _fpstate_64,
    pub xstate_hdr: _header,
    pub ymmh: _ymmh_state,
}
impl Default for _xstate {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sigcontext_32 {
    pub gs: __u16,
    pub __gsh: __u16,
    pub fs: __u16,
    pub __fsh: __u16,
    pub es: __u16,
    pub __esh: __u16,
    pub ds: __u16,
    pub __dsh: __u16,
    pub di: __u32,
    pub si: __u32,
    pub bp: __u32,
    pub sp: __u32,
    pub bx: __u32,
    pub dx: __u32,
    pub cx: __u32,
    pub ax: __u32,
    pub trapno: __u32,
    pub err: __u32,
    pub ip: __u32,
    pub cs: __u16,
    pub __csh: __u16,
    pub flags: __u32,
    pub sp_at_signal: __u32,
    pub ss: __u16,
    pub __ssh: __u16,
    pub fpstate: __u32,
    pub oldmask: __u32,
    pub cr2: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sigcontext_64 {
    pub r8: __u64,
    pub r9: __u64,
    pub r10: __u64,
    pub r11: __u64,
    pub r12: __u64,
    pub r13: __u64,
    pub r14: __u64,
    pub r15: __u64,
    pub di: __u64,
    pub si: __u64,
    pub bp: __u64,
    pub bx: __u64,
    pub dx: __u64,
    pub ax: __u64,
    pub cx: __u64,
    pub sp: __u64,
    pub ip: __u64,
    pub flags: __u64,
    pub cs: __u16,
    pub gs: __u16,
    pub fs: __u16,
    pub ss: __u16,
    pub err: __u64,
    pub trapno: __u64,
    pub oldmask: __u64,
    pub cr2: __u64,
    pub fpstate: __u64,
    pub reserved1: [__u64; 8usize],
}
extern "C" {
    pub fn memcpy(
        to: *mut core::ffi::c_void,
        from: *const core::ffi::c_void,
        len: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __memcpy(
        to: *mut core::ffi::c_void,
        from: *const core::ffi::c_void,
        len: usize,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn memset(
        s: *mut core::ffi::c_void,
        c: core::ffi::c_int,
        n: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __memset(
        s: *mut core::ffi::c_void,
        c: core::ffi::c_int,
        n: usize,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn memmove(
        dest: *mut core::ffi::c_void,
        src: *const core::ffi::c_void,
        count: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __memmove(
        dest: *mut core::ffi::c_void,
        src: *const core::ffi::c_void,
        count: usize,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn memcmp(
        cs: *const core::ffi::c_void,
        ct: *const core::ffi::c_void,
        count: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn strlen(s: *const core::ffi::c_char) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn strcpy(
        dest: *mut core::ffi::c_char,
        src: *const core::ffi::c_char,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strcat(
        dest: *mut core::ffi::c_char,
        src: *const core::ffi::c_char,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strcmp(cs: *const core::ffi::c_char, ct: *const core::ffi::c_char) -> core::ffi::c_int;
}
extern "C" {
    pub fn __memcpy_flushcache(
        dst: *mut core::ffi::c_void,
        src: *const core::ffi::c_void,
        cnt: usize,
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cpuid_regs {
    pub eax: u32_,
    pub ebx: u32_,
    pub ecx: u32_,
    pub edx: u32_,
}
pub const cpuid_regs_idx_CPUID_EAX: cpuid_regs_idx = 0;
pub const cpuid_regs_idx_CPUID_EBX: cpuid_regs_idx = 1;
pub const cpuid_regs_idx_CPUID_ECX: cpuid_regs_idx = 2;
pub const cpuid_regs_idx_CPUID_EDX: cpuid_regs_idx = 3;
pub type cpuid_regs_idx = core::ffi::c_uint;
pub const page_cache_mode__PAGE_CACHE_MODE_WB: page_cache_mode = 0;
pub const page_cache_mode__PAGE_CACHE_MODE_WC: page_cache_mode = 1;
pub const page_cache_mode__PAGE_CACHE_MODE_UC_MINUS: page_cache_mode = 2;
pub const page_cache_mode__PAGE_CACHE_MODE_UC: page_cache_mode = 3;
pub const page_cache_mode__PAGE_CACHE_MODE_WT: page_cache_mode = 4;
pub const page_cache_mode__PAGE_CACHE_MODE_WP: page_cache_mode = 5;
pub const page_cache_mode__PAGE_CACHE_MODE_NUM: page_cache_mode = 8;
pub type page_cache_mode = core::ffi::c_uint;
pub type pteval_t = core::ffi::c_ulong;
pub type pmdval_t = core::ffi::c_ulong;
pub type pudval_t = core::ffi::c_ulong;
pub type p4dval_t = core::ffi::c_ulong;
pub type pgdval_t = core::ffi::c_ulong;
pub type pgprotval_t = core::ffi::c_ulong;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pte_t {
    pub pte: pteval_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pmd_t {
    pub pmd: pmdval_t,
}
extern "C" {
    pub static mut __pgtable_l5_enabled: core::ffi::c_uint;
}
extern "C" {
    pub static mut pgdir_shift: core::ffi::c_uint;
}
extern "C" {
    pub static mut ptrs_per_p4d: core::ffi::c_uint;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pgprot {
    pub pgprot: pgprotval_t,
}
pub type pgprot_t = pgprot;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pgd_t {
    pub pgd: pgdval_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct p4d_t {
    pub p4d: p4dval_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pud_t {
    pub pud: pudval_t,
}
extern "C" {
    pub fn cachemode2protval(pcm: page_cache_mode) -> core::ffi::c_ulong;
}
pub type pgtable_t = *mut page;
extern "C" {
    pub static mut __supported_pte_mask: pteval_t;
}
extern "C" {
    pub static mut __default_kernel_pte_mask: pteval_t;
}
extern "C" {
    pub fn set_nx();
}
extern "C" {
    pub static mut nx_enabled: core::ffi::c_int;
}
extern "C" {
    pub fn pgprot_writecombine(prot: pgprot_t) -> pgprot_t;
}
extern "C" {
    pub fn pgprot_writethrough(prot: pgprot_t) -> pgprot_t;
}
extern "C" {
    pub fn phys_mem_access_prot(
        file: *mut file,
        pfn: core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        vma_prot: pgprot_t,
    ) -> pgprot_t;
}
extern "C" {
    pub fn set_pte_vaddr(vaddr: core::ffi::c_ulong, pte: pte_t);
}
pub const pg_level_PG_LEVEL_NONE: pg_level = 0;
pub const pg_level_PG_LEVEL_4K: pg_level = 1;
pub const pg_level_PG_LEVEL_2M: pg_level = 2;
pub const pg_level_PG_LEVEL_1G: pg_level = 3;
pub const pg_level_PG_LEVEL_512G: pg_level = 4;
pub const pg_level_PG_LEVEL_NUM: pg_level = 5;
pub type pg_level = core::ffi::c_uint;
extern "C" {
    pub fn update_page_count(level: core::ffi::c_int, pages: core::ffi::c_ulong);
}
extern "C" {
    pub fn lookup_address(address: core::ffi::c_ulong, level: *mut core::ffi::c_uint)
        -> *mut pte_t;
}
extern "C" {
    pub fn lookup_address_in_pgd(
        pgd: *mut pgd_t,
        address: core::ffi::c_ulong,
        level: *mut core::ffi::c_uint,
    ) -> *mut pte_t;
}
extern "C" {
    pub fn lookup_address_in_pgd_attr(
        pgd: *mut pgd_t,
        address: core::ffi::c_ulong,
        level: *mut core::ffi::c_uint,
        nx: *mut bool_,
        rw: *mut bool_,
    ) -> *mut pte_t;
}
extern "C" {
    pub fn lookup_pmd_address(address: core::ffi::c_ulong) -> *mut pmd_t;
}
extern "C" {
    pub fn slow_virt_to_phys(__address: *mut core::ffi::c_void) -> phys_addr_t;
}
extern "C" {
    pub fn kernel_map_pages_in_pgd(
        pgd: *mut pgd_t,
        pfn: u64_,
        address: core::ffi::c_ulong,
        numpages: core::ffi::c_uint,
        page_flags: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernel_unmap_pages_in_pgd(
        pgd: *mut pgd_t,
        address: core::ffi::c_ulong,
        numpages: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[repr(align(1))]
#[derive(Default, Copy, Clone)]
pub struct desc_struct {
    pub _bindgen_opaque_blob: [u8; 8usize],
}
pub const GATE_INTERRUPT: _bindgen_ty_4 = 14;
pub const GATE_TRAP: _bindgen_ty_4 = 15;
pub const GATE_CALL: _bindgen_ty_4 = 12;
pub const GATE_TASK: _bindgen_ty_4 = 5;
pub type _bindgen_ty_4 = core::ffi::c_uint;
pub const DESC_TSS: _bindgen_ty_5 = 9;
pub const DESC_LDT: _bindgen_ty_5 = 2;
pub const DESCTYPE_S: _bindgen_ty_5 = 16;
pub type _bindgen_ty_5 = core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct ldttss_desc {
    pub limit0: u16_,
    pub base0: u16_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub base3: u32_,
    pub zero1: u32_,
}
impl ldttss_desc {
    #[inline]
    pub fn base1(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u16) }
    }
    #[inline]
    pub fn set_base1(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn dpl(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_dpl(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn p(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_p(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn limit1(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_limit1(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn zero0(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_zero0(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn g(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_g(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn base2(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u16) }
    }
    #[inline]
    pub fn set_base2(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        base1: u16_,
        type_: u16_,
        dpl: u16_,
        p: u16_,
        limit1: u16_,
        zero0: u16_,
        g: u16_,
        base2: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let base1: u16 = unsafe { ::core::mem::transmute(base1) };
            base1 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 5u8, {
            let type_: u16 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(13usize, 2u8, {
            let dpl: u16 = unsafe { ::core::mem::transmute(dpl) };
            dpl as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let p: u16 = unsafe { ::core::mem::transmute(p) };
            p as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let limit1: u16 = unsafe { ::core::mem::transmute(limit1) };
            limit1 as u64
        });
        __bindgen_bitfield_unit.set(20usize, 3u8, {
            let zero0: u16 = unsafe { ::core::mem::transmute(zero0) };
            zero0 as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let g: u16 = unsafe { ::core::mem::transmute(g) };
            g as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let base2: u16 = unsafe { ::core::mem::transmute(base2) };
            base2 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type ldt_desc = ldttss_desc;
pub type tss_desc = ldttss_desc;
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct idt_bits {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl idt_bits {
    #[inline]
    pub fn ist(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_ist(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn zero(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_zero(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn dpl(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_dpl(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn p(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_p(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ist: u16_,
        zero: u16_,
        type_: u16_,
        dpl: u16_,
        p: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let ist: u16 = unsafe { ::core::mem::transmute(ist) };
            ist as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let zero: u16 = unsafe { ::core::mem::transmute(zero) };
            zero as u64
        });
        __bindgen_bitfield_unit.set(8usize, 5u8, {
            let type_: u16 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(13usize, 2u8, {
            let dpl: u16 = unsafe { ::core::mem::transmute(dpl) };
            dpl as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let p: u16 = unsafe { ::core::mem::transmute(p) };
            p as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct idt_data {
    pub vector: core::ffi::c_uint,
    pub segment: core::ffi::c_uint,
    pub bits: idt_bits,
    pub addr: *const core::ffi::c_void,
}
impl Default for idt_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct gate_struct {
    pub offset_low: u16_,
    pub segment: u16_,
    pub bits: idt_bits,
    pub offset_middle: u16_,
    pub offset_high: u32_,
    pub reserved: u32_,
}
pub type gate_desc = gate_struct;
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct desc_ptr {
    pub size: core::ffi::c_ushort,
    pub address: core::ffi::c_ulong,
}
extern "C" {
    pub fn native_write_cr0(val: core::ffi::c_ulong);
}
extern "C" {
    pub fn native_write_cr4(val: core::ffi::c_ulong);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fregs_state {
    pub cwd: u32_,
    pub swd: u32_,
    pub twd: u32_,
    pub fip: u32_,
    pub fcs: u32_,
    pub foo: u32_,
    pub fos: u32_,
    pub st_space: [u32_; 20usize],
    pub status: u32_,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct fxregs_state {
    pub cwd: u16_,
    pub swd: u16_,
    pub twd: u16_,
    pub fop: u16_,
    pub __bindgen_anon_1: fxregs_state__bindgen_ty_1,
    pub mxcsr: u32_,
    pub mxcsr_mask: u32_,
    pub st_space: [u32_; 32usize],
    pub xmm_space: [u32_; 64usize],
    pub padding: [u32_; 12usize],
    pub __bindgen_anon_2: fxregs_state__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fxregs_state__bindgen_ty_1 {
    pub __bindgen_anon_1: fxregs_state__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: fxregs_state__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fxregs_state__bindgen_ty_1__bindgen_ty_1 {
    pub rip: u64_,
    pub rdp: u64_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fxregs_state__bindgen_ty_1__bindgen_ty_2 {
    pub fip: u32_,
    pub fcs: u32_,
    pub foo: u32_,
    pub fos: u32_,
}
impl Default for fxregs_state__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fxregs_state__bindgen_ty_2 {
    pub padding1: [u32_; 12usize],
    pub sw_reserved: [u32_; 12usize],
}
impl Default for fxregs_state__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for fxregs_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct swregs_state {
    pub cwd: u32_,
    pub swd: u32_,
    pub twd: u32_,
    pub fip: u32_,
    pub fcs: u32_,
    pub foo: u32_,
    pub fos: u32_,
    pub st_space: [u32_; 20usize],
    pub ftop: u8_,
    pub changed: u8_,
    pub lookahead: u8_,
    pub no_update: u8_,
    pub rm: u8_,
    pub alimit: u8_,
    pub info: *mut math_emu_info,
    pub entry_eip: u32_,
}
impl Default for swregs_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const xfeature_XFEATURE_FP: xfeature = 0;
pub const xfeature_XFEATURE_SSE: xfeature = 1;
pub const xfeature_XFEATURE_YMM: xfeature = 2;
pub const xfeature_XFEATURE_BNDREGS: xfeature = 3;
pub const xfeature_XFEATURE_BNDCSR: xfeature = 4;
pub const xfeature_XFEATURE_OPMASK: xfeature = 5;
pub const xfeature_XFEATURE_ZMM_Hi256: xfeature = 6;
pub const xfeature_XFEATURE_Hi16_ZMM: xfeature = 7;
pub const xfeature_XFEATURE_PT_UNIMPLEMENTED_SO_FAR: xfeature = 8;
pub const xfeature_XFEATURE_PKRU: xfeature = 9;
pub const xfeature_XFEATURE_PASID: xfeature = 10;
pub const xfeature_XFEATURE_CET_USER: xfeature = 11;
pub const xfeature_XFEATURE_CET_KERNEL_UNUSED: xfeature = 12;
pub const xfeature_XFEATURE_RSRVD_COMP_13: xfeature = 13;
pub const xfeature_XFEATURE_RSRVD_COMP_14: xfeature = 14;
pub const xfeature_XFEATURE_LBR: xfeature = 15;
pub const xfeature_XFEATURE_RSRVD_COMP_16: xfeature = 16;
pub const xfeature_XFEATURE_XTILE_CFG: xfeature = 17;
pub const xfeature_XFEATURE_XTILE_DATA: xfeature = 18;
pub const xfeature_XFEATURE_MAX: xfeature = 19;
pub type xfeature = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct reg_128_bit {
    pub regbytes: [u8_; 16usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct reg_256_bit {
    pub regbytes: [u8_; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct reg_512_bit {
    pub regbytes: [u8_; 64usize],
}
impl Default for reg_512_bit {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct reg_1024_byte {
    pub regbytes: [u8_; 1024usize],
}
impl Default for reg_1024_byte {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct ymmh_struct {
    pub hi_ymm: [reg_128_bit; 16usize],
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct mpx_bndreg {
    pub lower_bound: u64_,
    pub upper_bound: u64_,
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct mpx_bndreg_state {
    pub bndreg: [mpx_bndreg; 4usize],
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct mpx_bndcsr {
    pub bndcfgu: u64_,
    pub bndstatus: u64_,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct mpx_bndcsr_state {
    pub __bindgen_anon_1: mpx_bndcsr_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mpx_bndcsr_state__bindgen_ty_1 {
    pub bndcsr: mpx_bndcsr,
    pub pad_to_64_bytes: [u8_; 64usize],
}
impl Default for mpx_bndcsr_state__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for mpx_bndcsr_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct avx_512_opmask_state {
    pub opmask_reg: [u64_; 8usize],
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct avx_512_zmm_uppers_state {
    pub zmm_upper: [reg_256_bit; 16usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct avx_512_hi16_state {
    pub hi16_zmm: [reg_512_bit; 16usize],
}
impl Default for avx_512_hi16_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct pkru_state {
    pub pkru: u32_,
    pub pad: u32_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cet_user_state {
    pub user_cet: u64_,
    pub user_ssp: u64_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct lbr_entry {
    pub from: u64_,
    pub to: u64_,
    pub info: u64_,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Default, Copy, Clone)]
pub struct arch_lbr_state {
    pub _bindgen_opaque_blob: [u64; 5usize],
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct xtile_cfg {
    pub tcfg: [u64_; 8usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct xtile_data {
    pub tmm: reg_1024_byte,
}
impl Default for xtile_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct ia32_pasid_state {
    pub pasid: u64_,
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct xstate_header {
    pub xfeatures: u64_,
    pub xcomp_bv: u64_,
    pub reserved: [u64_; 6usize],
}
#[repr(C)]
#[repr(align(64))]
pub struct xregs_state {
    pub _bindgen_opaque_blob: [u8; 576usize],
}
impl Default for xregs_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
pub struct fpregs_state {
    pub fsave: __BindgenUnionField<fregs_state>,
    pub fxsave: __BindgenUnionField<fxregs_state>,
    pub soft: __BindgenUnionField<swregs_state>,
    pub xsave: __BindgenUnionField<xregs_state>,
    pub __padding: __BindgenUnionField<[u8_; 4096usize]>,
    pub bindgen_union_field: [u8; 4096usize],
}
impl Default for fpregs_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
pub struct fpstate {
    pub size: core::ffi::c_uint,
    pub user_size: core::ffi::c_uint,
    pub xfeatures: u64_,
    pub user_xfeatures: u64_,
    pub xfd: u64_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u64; 3usize],
    pub regs: fpregs_state,
}
impl Default for fpstate {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl fpstate {
    #[inline]
    pub fn is_valloc(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_valloc(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_guest(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_guest(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_confidential(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_confidential(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_use(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_use(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_valloc: core::ffi::c_uint,
        is_guest: core::ffi::c_uint,
        is_confidential: core::ffi::c_uint,
        in_use: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_valloc: u32 = unsafe { ::core::mem::transmute(is_valloc) };
            is_valloc as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_guest: u32 = unsafe { ::core::mem::transmute(is_guest) };
            is_guest as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let is_confidential: u32 = unsafe { ::core::mem::transmute(is_confidential) };
            is_confidential as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let in_use: u32 = unsafe { ::core::mem::transmute(in_use) };
            in_use as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fpu_state_perm {
    pub __state_perm: u64_,
    pub __state_size: core::ffi::c_uint,
    pub __user_state_size: core::ffi::c_uint,
}
#[repr(C)]
#[repr(align(64))]
pub struct fpu {
    pub last_cpu: core::ffi::c_uint,
    pub avx512_timestamp: core::ffi::c_ulong,
    pub fpstate: *mut fpstate,
    pub __task_fpstate: *mut fpstate,
    pub perm: fpu_state_perm,
    pub guest_perm: fpu_state_perm,
    pub __fpstate: fpstate,
}
impl Default for fpu {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fpu_guest {
    pub xfeatures: u64_,
    pub perm: u64_,
    pub xfd_err: u64_,
    pub uabi_size: core::ffi::c_uint,
    pub fpstate: *mut fpstate,
}
impl Default for fpu_guest {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fpu_state_config {
    pub max_size: core::ffi::c_uint,
    pub default_size: core::ffi::c_uint,
    pub max_features: u64_,
    pub default_features: u64_,
    pub legacy_features: u64_,
}
extern "C" {
    pub static mut fpu_kernel_cfg: fpu_state_config;
}
extern "C" {
    pub static mut fpu_user_cfg: fpu_state_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct getcpu_cache {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __vdso_getcpu(
        cpu: *mut core::ffi::c_uint,
        node: *mut core::ffi::c_uint,
        unused: *mut getcpu_cache,
    ) -> core::ffi::c_long;
}
pub const UNAME26: _bindgen_ty_6 = 131072;
pub const ADDR_NO_RANDOMIZE: _bindgen_ty_6 = 262144;
pub const FDPIC_FUNCPTRS: _bindgen_ty_6 = 524288;
pub const MMAP_PAGE_ZERO: _bindgen_ty_6 = 1048576;
pub const ADDR_COMPAT_LAYOUT: _bindgen_ty_6 = 2097152;
pub const READ_IMPLIES_EXEC: _bindgen_ty_6 = 4194304;
pub const ADDR_LIMIT_32BIT: _bindgen_ty_6 = 8388608;
pub const SHORT_INODE: _bindgen_ty_6 = 16777216;
pub const WHOLE_SECONDS: _bindgen_ty_6 = 33554432;
pub const STICKY_TIMEOUTS: _bindgen_ty_6 = 67108864;
pub const ADDR_LIMIT_3GB: _bindgen_ty_6 = 134217728;
pub type _bindgen_ty_6 = core::ffi::c_uint;
pub const PER_LINUX: _bindgen_ty_7 = 0;
pub const PER_LINUX_32BIT: _bindgen_ty_7 = 8388608;
pub const PER_LINUX_FDPIC: _bindgen_ty_7 = 524288;
pub const PER_SVR4: _bindgen_ty_7 = 68157441;
pub const PER_SVR3: _bindgen_ty_7 = 83886082;
pub const PER_SCOSVR3: _bindgen_ty_7 = 117440515;
pub const PER_OSR5: _bindgen_ty_7 = 100663299;
pub const PER_WYSEV386: _bindgen_ty_7 = 83886084;
pub const PER_ISCR4: _bindgen_ty_7 = 67108869;
pub const PER_BSD: _bindgen_ty_7 = 6;
pub const PER_SUNOS: _bindgen_ty_7 = 67108870;
pub const PER_XENIX: _bindgen_ty_7 = 83886087;
pub const PER_LINUX32: _bindgen_ty_7 = 8;
pub const PER_LINUX32_3GB: _bindgen_ty_7 = 134217736;
pub const PER_IRIX32: _bindgen_ty_7 = 67108873;
pub const PER_IRIXN32: _bindgen_ty_7 = 67108874;
pub const PER_IRIX64: _bindgen_ty_7 = 67108875;
pub const PER_RISCOS: _bindgen_ty_7 = 12;
pub const PER_SOLARIS: _bindgen_ty_7 = 67108877;
pub const PER_UW7: _bindgen_ty_7 = 68157454;
pub const PER_OSF4: _bindgen_ty_7 = 15;
pub const PER_HPUX: _bindgen_ty_7 = 16;
pub const PER_MASK: _bindgen_ty_7 = 255;
pub type _bindgen_ty_7 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct s16_fract {
    pub numerator: __s16,
    pub denominator: __s16,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct u16_fract {
    pub numerator: __u16,
    pub denominator: __u16,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct s32_fract {
    pub numerator: __s32,
    pub denominator: __s32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct u32_fract {
    pub numerator: __u32,
    pub denominator: __u32,
}
extern "C" {
    pub fn int_pow(base: u64_, exp: core::ffi::c_uint) -> u64_;
}
extern "C" {
    pub fn int_sqrt(arg1: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn iter_div_u64_rem(dividend: u64_, divisor: u32_, remainder: *mut u64_) -> u32_;
}
pub const tlb_infos_ENTRIES: tlb_infos = 0;
pub const tlb_infos_NR_INFO: tlb_infos = 1;
pub type tlb_infos = core::ffi::c_uint;
extern "C" {
    pub static mut tlb_lli_4k: [u16_; 1usize];
}
extern "C" {
    pub static mut tlb_lli_2m: [u16_; 1usize];
}
extern "C" {
    pub static mut tlb_lli_4m: [u16_; 1usize];
}
extern "C" {
    pub static mut tlb_lld_4k: [u16_; 1usize];
}
extern "C" {
    pub static mut tlb_lld_2m: [u16_; 1usize];
}
extern "C" {
    pub static mut tlb_lld_4m: [u16_; 1usize];
}
extern "C" {
    pub static mut tlb_lld_1g: [u16_; 1usize];
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cpuinfo_topology {
    pub apicid: u32_,
    pub initial_apicid: u32_,
    pub pkg_id: u32_,
    pub die_id: u32_,
    pub cu_id: u32_,
    pub core_id: u32_,
    pub logical_pkg_id: u32_,
    pub logical_die_id: u32_,
    pub amd_node_id: u32_,
    pub llc_id: u32_,
    pub l2c_id: u32_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cpuinfo_x86 {
    pub __bindgen_anon_1: cpuinfo_x86__bindgen_ty_1,
    pub x86_stepping: __u8,
    pub x86_tlbsize: core::ffi::c_int,
    pub vmx_capability: [__u32; 5usize],
    pub x86_virt_bits: __u8,
    pub x86_phys_bits: __u8,
    pub extended_cpuid_level: __u32,
    pub cpuid_level: core::ffi::c_int,
    pub __bindgen_anon_2: cpuinfo_x86__bindgen_ty_2,
    pub x86_vendor_id: [core::ffi::c_char; 16usize],
    pub x86_model_id: [core::ffi::c_char; 64usize],
    pub topo: cpuinfo_topology,
    pub x86_cache_size: core::ffi::c_uint,
    pub x86_cache_alignment: core::ffi::c_int,
    pub x86_cache_max_rmid: core::ffi::c_int,
    pub x86_cache_occ_scale: core::ffi::c_int,
    pub x86_cache_mbm_width_offset: core::ffi::c_int,
    pub x86_power: core::ffi::c_int,
    pub loops_per_jiffy: core::ffi::c_ulong,
    pub ppin: u64_,
    pub x86_clflush_size: u16_,
    pub booted_cores: u16_,
    pub cpu_index: u16_,
    pub smt_active: bool_,
    pub microcode: u32_,
    pub x86_cache_bits: u8_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpuinfo_x86__bindgen_ty_1 {
    pub __bindgen_anon_1: cpuinfo_x86__bindgen_ty_1__bindgen_ty_1,
    pub x86_vfm: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cpuinfo_x86__bindgen_ty_1__bindgen_ty_1 {
    pub x86_model: __u8,
    pub x86: __u8,
    pub x86_vendor: __u8,
    pub x86_reserved: __u8,
}
impl Default for cpuinfo_x86__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpuinfo_x86__bindgen_ty_2 {
    pub x86_capability: [__u32; 24usize],
    pub x86_capability_alignment: core::ffi::c_ulong,
}
impl Default for cpuinfo_x86__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for cpuinfo_x86 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl cpuinfo_x86 {
    #[inline]
    pub fn initialized(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_initialized(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(initialized: core::ffi::c_uint) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let initialized: u32 = unsafe { ::core::mem::transmute(initialized) };
            initialized as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut boot_cpu_data: cpuinfo_x86;
}
extern "C" {
    pub static mut new_cpu_data: cpuinfo_x86;
}
extern "C" {
    pub static mut cpu_caps_cleared: [__u32; 24usize];
}
extern "C" {
    pub static mut cpu_caps_set: [__u32; 24usize];
}
extern "C" {
    pub static mut cpu_info: cpuinfo_x86;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct seq_operations {
    _unused: [u8; 0],
}
extern "C" {
    pub static cpuinfo_op: seq_operations;
}
extern "C" {
    pub fn cpu_detect(c: *mut cpuinfo_x86);
}
extern "C" {
    pub fn early_cpu_init();
}
extern "C" {
    pub fn identify_secondary_cpu(arg1: *mut cpuinfo_x86);
}
extern "C" {
    pub fn print_cpu_info(arg1: *mut cpuinfo_x86);
}
extern "C" {
    pub fn print_cpu_msr(arg1: *mut cpuinfo_x86);
}
#[repr(C, packed)]
#[derive(Default, Copy, Clone)]
pub struct x86_hw_tss {
    pub reserved1: u32_,
    pub sp0: u64_,
    pub sp1: u64_,
    pub sp2: u64_,
    pub reserved2: u64_,
    pub ist: [u64_; 7usize],
    pub reserved3: u32_,
    pub reserved4: u32_,
    pub reserved5: u16_,
    pub io_bitmap_base: u16_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct entry_stack {
    pub stack: [core::ffi::c_char; 4096usize],
}
impl Default for entry_stack {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4096))]
#[derive(Copy, Clone)]
pub struct entry_stack_page {
    pub stack: entry_stack,
}
impl Default for entry_stack_page {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_io_bitmap {
    pub prev_sequence: u64_,
    pub prev_max: core::ffi::c_uint,
    pub bitmap: [core::ffi::c_ulong; 1025usize],
    pub mapall: [core::ffi::c_ulong; 1025usize],
}
impl Default for x86_io_bitmap {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4096))]
#[derive(Copy, Clone)]
pub struct tss_struct {
    pub x86_tss: x86_hw_tss,
    pub io_bitmap: x86_io_bitmap,
}
impl Default for tss_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut cpu_tss_rw: tss_struct;
}
#[repr(C)]
#[repr(align(16384))]
#[derive(Copy, Clone)]
pub struct irq_stack {
    pub stack: [core::ffi::c_char; 16384usize],
}
impl Default for irq_stack {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fixed_percpu_data {
    pub gs_base: [core::ffi::c_char; 40usize],
    pub stack_canary: core::ffi::c_ulong,
}
impl Default for fixed_percpu_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut fixed_percpu_data: fixed_percpu_data;
}
extern "C" {
    pub static mut init_per_cpu__fixed_percpu_data: fixed_percpu_data;
}
extern "C" {
    pub fn entry_SYSCALL32_ignore();
}
extern "C" {
    pub fn current_save_fsgs();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct perf_event {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(64))]
pub struct thread_struct {
    pub tls_array: [desc_struct; 3usize],
    pub sp: core::ffi::c_ulong,
    pub es: core::ffi::c_ushort,
    pub ds: core::ffi::c_ushort,
    pub fsindex: core::ffi::c_ushort,
    pub gsindex: core::ffi::c_ushort,
    pub fsbase: core::ffi::c_ulong,
    pub gsbase: core::ffi::c_ulong,
    pub ptrace_bps: [*mut perf_event; 4usize],
    pub virtual_dr6: core::ffi::c_ulong,
    pub ptrace_dr7: core::ffi::c_ulong,
    pub cr2: core::ffi::c_ulong,
    pub trap_nr: core::ffi::c_ulong,
    pub error_code: core::ffi::c_ulong,
    pub io_bitmap: *mut io_bitmap,
    pub iopl_emul: core::ffi::c_ulong,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub pkru: u32_,
    pub __bindgen_padding_0: [u64; 5usize],
    pub fpu: fpu,
}
impl Default for thread_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl thread_struct {
    #[inline]
    pub fn iopl_warn(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_iopl_warn(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(iopl_warn: core::ffi::c_uint) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let iopl_warn: u32 = unsafe { ::core::mem::transmute(iopl_warn) };
            iopl_warn as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn fpu_thread_struct_whitelist(
        offset: *mut core::ffi::c_ulong,
        size: *mut core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn __get_wchan(p: *mut task_struct) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn select_idle_routine();
}
extern "C" {
    pub fn amd_e400_c1e_apic_setup();
}
extern "C" {
    pub static mut boot_option_idle_override: core::ffi::c_ulong;
}
pub const idle_boot_override_IDLE_NO_OVERRIDE: idle_boot_override = 0;
pub const idle_boot_override_IDLE_HALT: idle_boot_override = 1;
pub const idle_boot_override_IDLE_NOMWAIT: idle_boot_override = 2;
pub const idle_boot_override_IDLE_POLL: idle_boot_override = 3;
pub type idle_boot_override = core::ffi::c_uint;
extern "C" {
    pub fn enable_sep_cpu();
}
extern "C" {
    pub static mut early_gdt_descr: desc_ptr;
}
extern "C" {
    pub fn switch_gdt_and_percpu_base(arg1: core::ffi::c_int);
}
extern "C" {
    pub fn load_direct_gdt(arg1: core::ffi::c_int);
}
extern "C" {
    pub fn load_fixmap_gdt(arg1: core::ffi::c_int);
}
extern "C" {
    pub fn cpu_init();
}
extern "C" {
    pub fn cpu_init_exception_handling();
}
extern "C" {
    pub fn cr4_init();
}
extern "C" {
    pub fn set_task_blockstep(task: *mut task_struct, on: bool_);
}
extern "C" {
    pub static mut bootloader_type: core::ffi::c_int;
}
extern "C" {
    pub static mut bootloader_version: core::ffi::c_int;
}
extern "C" {
    pub static mut ignore_fpu_irq: core::ffi::c_char;
}
extern "C" {
    pub static mut __top_init_kernel_stack: [core::ffi::c_ulong; 0usize];
}
extern "C" {
    pub fn KSTK_ESP(task: *mut task_struct) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn start_thread(regs: *mut pt_regs, new_ip: core::ffi::c_ulong, new_sp: core::ffi::c_ulong);
}
extern "C" {
    pub fn get_tsc_mode(adr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_tsc_mode(val: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub static mut msr_misc_features_shadow: core::ffi::c_ulonglong;
}
extern "C" {
    pub fn amd_get_highest_perf() -> u32_;
}
extern "C" {
    pub fn amd_clear_divider();
}
extern "C" {
    pub fn amd_check_microcode();
}
extern "C" {
    pub fn arch_align_stack(sp: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn free_init_pages(
        what: *const core::ffi::c_char,
        begin: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn free_kernel_image_pages(
        what: *const core::ffi::c_char,
        begin: *mut core::ffi::c_void,
        end: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn default_idle();
}
extern "C" {
    pub fn stop_this_cpu(dummy: *mut core::ffi::c_void) -> !;
}
extern "C" {
    pub fn microcode_check(prev_info: *mut cpuinfo_x86);
}
extern "C" {
    pub fn store_cpu_caps(info: *mut cpuinfo_x86);
}
pub const l1tf_mitigations_L1TF_MITIGATION_OFF: l1tf_mitigations = 0;
pub const l1tf_mitigations_L1TF_MITIGATION_FLUSH_NOWARN: l1tf_mitigations = 1;
pub const l1tf_mitigations_L1TF_MITIGATION_FLUSH: l1tf_mitigations = 2;
pub const l1tf_mitigations_L1TF_MITIGATION_FLUSH_NOSMT: l1tf_mitigations = 3;
pub const l1tf_mitigations_L1TF_MITIGATION_FULL: l1tf_mitigations = 4;
pub const l1tf_mitigations_L1TF_MITIGATION_FULL_FORCE: l1tf_mitigations = 5;
pub type l1tf_mitigations = core::ffi::c_uint;
extern "C" {
    pub static mut l1tf_mitigation: l1tf_mitigations;
}
pub const mds_mitigations_MDS_MITIGATION_OFF: mds_mitigations = 0;
pub const mds_mitigations_MDS_MITIGATION_FULL: mds_mitigations = 1;
pub const mds_mitigations_MDS_MITIGATION_VMWERV: mds_mitigations = 2;
pub type mds_mitigations = core::ffi::c_uint;
extern "C" {
    pub fn gds_ucode_mitigated() -> bool_;
}
pub const cpuid_leafs_CPUID_1_EDX: cpuid_leafs = 0;
pub const cpuid_leafs_CPUID_8000_0001_EDX: cpuid_leafs = 1;
pub const cpuid_leafs_CPUID_8086_0001_EDX: cpuid_leafs = 2;
pub const cpuid_leafs_CPUID_LNX_1: cpuid_leafs = 3;
pub const cpuid_leafs_CPUID_1_ECX: cpuid_leafs = 4;
pub const cpuid_leafs_CPUID_C000_0001_EDX: cpuid_leafs = 5;
pub const cpuid_leafs_CPUID_8000_0001_ECX: cpuid_leafs = 6;
pub const cpuid_leafs_CPUID_LNX_2: cpuid_leafs = 7;
pub const cpuid_leafs_CPUID_LNX_3: cpuid_leafs = 8;
pub const cpuid_leafs_CPUID_7_0_EBX: cpuid_leafs = 9;
pub const cpuid_leafs_CPUID_D_1_EAX: cpuid_leafs = 10;
pub const cpuid_leafs_CPUID_LNX_4: cpuid_leafs = 11;
pub const cpuid_leafs_CPUID_7_1_EAX: cpuid_leafs = 12;
pub const cpuid_leafs_CPUID_8000_0008_EBX: cpuid_leafs = 13;
pub const cpuid_leafs_CPUID_6_EAX: cpuid_leafs = 14;
pub const cpuid_leafs_CPUID_8000_000A_EDX: cpuid_leafs = 15;
pub const cpuid_leafs_CPUID_7_ECX: cpuid_leafs = 16;
pub const cpuid_leafs_CPUID_8000_0007_EBX: cpuid_leafs = 17;
pub const cpuid_leafs_CPUID_7_EDX: cpuid_leafs = 18;
pub const cpuid_leafs_CPUID_8000_001F_EAX: cpuid_leafs = 19;
pub const cpuid_leafs_CPUID_8000_0021_EAX: cpuid_leafs = 20;
pub const cpuid_leafs_CPUID_LNX_5: cpuid_leafs = 21;
pub const cpuid_leafs_NR_CPUID_WORDS: cpuid_leafs = 22;
pub type cpuid_leafs = core::ffi::c_uint;
extern "C" {
    pub static x86_cap_flags: [*const core::ffi::c_char; 704usize];
}
extern "C" {
    pub static x86_power_flags: [*const core::ffi::c_char; 32usize];
}
extern "C" {
    pub static x86_bug_flags: [*const core::ffi::c_char; 64usize];
}
extern "C" {
    pub fn setup_clear_cpu_cap(bit: core::ffi::c_uint);
}
extern "C" {
    pub fn clear_cpu_cap(c: *mut cpuinfo_x86, bit: core::ffi::c_uint);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct thread_info {
    pub flags: core::ffi::c_ulong,
    pub syscall_work: core::ffi::c_ulong,
    pub status: u32_,
    pub cpu: u32_,
}
extern "C" {
    pub fn arch_setup_new_exec();
}
extern "C" {
    pub fn __bad_copy_from();
}
extern "C" {
    pub fn __bad_copy_to();
}
extern "C" {
    pub fn __copy_overflow(size: core::ffi::c_int, count: core::ffi::c_ulong);
}
extern "C" {
    pub fn arch_task_cache_init();
}
extern "C" {
    pub fn arch_release_task_struct(tsk: *mut task_struct);
}
extern "C" {
    pub fn arch_dup_task_struct(dst: *mut task_struct, src: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn _local_bh_enable();
}
extern "C" {
    pub fn __local_bh_enable_ip(ip: core::ffi::c_ulong, cnt: core::ffi::c_uint);
}
extern "C" {
    pub static hex_asc: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub static hex_asc_upper: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub fn hex_to_bin(ch: core::ffi::c_uchar) -> core::ffi::c_int;
}
extern "C" {
    pub fn hex2bin(dst: *mut u8_, src: *const core::ffi::c_char, count: usize) -> core::ffi::c_int;
}
extern "C" {
    pub fn bin2hex(
        dst: *mut core::ffi::c_char,
        src: *const core::ffi::c_void,
        count: usize,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn mac_pton(s: *const core::ffi::c_char, mac: *mut u8_) -> bool_;
}
extern "C" {
    pub fn _kstrtoul(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn _kstrtol(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_long,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtoull(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_ulonglong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtoll(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_longlong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtouint(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtoint(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtou16(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut u16_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtos16(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut s16,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtou8(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut u8_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtos8(
        s: *const core::ffi::c_char,
        base: core::ffi::c_uint,
        res: *mut s8,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtobool(s: *const core::ffi::c_char, res: *mut bool_) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtoull_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_ulonglong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtoll_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_longlong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtoul_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtol_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_long,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtouint_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtoint_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtou16_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut u16_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtos16_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut s16,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtou8_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut u8_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtos8_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        base: core::ffi::c_uint,
        res: *mut s8,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kstrtobool_from_user(
        s: *const core::ffi::c_char,
        count: usize,
        res: *mut bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_strtoul(
        arg1: *const core::ffi::c_char,
        arg2: *mut *mut core::ffi::c_char,
        arg3: core::ffi::c_uint,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn simple_strtol(
        arg1: *const core::ffi::c_char,
        arg2: *mut *mut core::ffi::c_char,
        arg3: core::ffi::c_uint,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn simple_strtoull(
        arg1: *const core::ffi::c_char,
        arg2: *mut *mut core::ffi::c_char,
        arg3: core::ffi::c_uint,
    ) -> core::ffi::c_ulonglong;
}
extern "C" {
    pub fn simple_strtoll(
        arg1: *const core::ffi::c_char,
        arg2: *mut *mut core::ffi::c_char,
        arg3: core::ffi::c_uint,
    ) -> core::ffi::c_longlong;
}
extern "C" {
    pub fn num_to_str(
        buf: *mut core::ffi::c_char,
        size: core::ffi::c_int,
        num: core::ffi::c_ulonglong,
        width: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sprintf(
        buf: *mut core::ffi::c_char,
        fmt: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vsprintf(
        buf: *mut core::ffi::c_char,
        arg1: *const core::ffi::c_char,
        arg2: *mut __va_list_tag,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn snprintf(
        buf: *mut core::ffi::c_char,
        size: core::ffi::c_ulong,
        fmt: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vsnprintf(
        buf: *mut core::ffi::c_char,
        size: core::ffi::c_ulong,
        fmt: *const core::ffi::c_char,
        args: *mut __va_list_tag,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn scnprintf(
        buf: *mut core::ffi::c_char,
        size: usize,
        fmt: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vscnprintf(
        buf: *mut core::ffi::c_char,
        size: usize,
        fmt: *const core::ffi::c_char,
        args: *mut __va_list_tag,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kasprintf(gfp: gfp_t, fmt: *const core::ffi::c_char, ...) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn kvasprintf(
        gfp: gfp_t,
        fmt: *const core::ffi::c_char,
        args: *mut __va_list_tag,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn kvasprintf_const(
        gfp: gfp_t,
        fmt: *const core::ffi::c_char,
        args: *mut __va_list_tag,
    ) -> *const core::ffi::c_char;
}
extern "C" {
    pub fn sscanf(
        arg1: *const core::ffi::c_char,
        arg2: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vsscanf(
        arg1: *const core::ffi::c_char,
        arg2: *const core::ffi::c_char,
        arg3: *mut __va_list_tag,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static mut no_hash_pointers: bool_;
}
extern "C" {
    pub fn no_hash_pointers_enable(str_: *mut core::ffi::c_char) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_exit(error_code: core::ffi::c_long) -> !;
}
extern "C" {
    pub fn core_kernel_text(addr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn __kernel_text_address(addr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernel_text_address(addr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn func_ptr_is_kernel_text(ptr: *mut core::ffi::c_void) -> core::ffi::c_int;
}
extern "C" {
    pub fn bust_spinlocks(yes: core::ffi::c_int);
}
extern "C" {
    pub static mut root_mountflags: core::ffi::c_int;
}
extern "C" {
    pub static mut early_boot_irqs_disabled: bool_;
}
pub const system_states_SYSTEM_BOOTING: system_states = 0;
pub const system_states_SYSTEM_SCHEDULING: system_states = 1;
pub const system_states_SYSTEM_FREEING_INITMEM: system_states = 2;
pub const system_states_SYSTEM_RUNNING: system_states = 3;
pub const system_states_SYSTEM_HALT: system_states = 4;
pub const system_states_SYSTEM_POWER_OFF: system_states = 5;
pub const system_states_SYSTEM_RESTART: system_states = 6;
pub const system_states_SYSTEM_SUSPEND: system_states = 7;
pub type system_states = core::ffi::c_uint;
extern "C" {
    pub static mut system_state: system_states;
}
pub const ftrace_dump_mode_DUMP_NONE: ftrace_dump_mode = 0;
pub const ftrace_dump_mode_DUMP_ALL: ftrace_dump_mode = 1;
pub const ftrace_dump_mode_DUMP_ORIG: ftrace_dump_mode = 2;
pub const ftrace_dump_mode_DUMP_PARAM: ftrace_dump_mode = 3;
pub type ftrace_dump_mode = core::ffi::c_uint;
extern "C" {
    pub fn _find_next_bit(
        addr1: *const core::ffi::c_ulong,
        nbits: core::ffi::c_ulong,
        start: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _find_next_and_bit(
        addr1: *const core::ffi::c_ulong,
        addr2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_ulong,
        start: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _find_next_andnot_bit(
        addr1: *const core::ffi::c_ulong,
        addr2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_ulong,
        start: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _find_next_or_bit(
        addr1: *const core::ffi::c_ulong,
        addr2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_ulong,
        start: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _find_next_zero_bit(
        addr: *const core::ffi::c_ulong,
        nbits: core::ffi::c_ulong,
        start: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _find_first_bit(
        addr: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __find_nth_bit(
        addr: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        n: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __find_nth_and_bit(
        addr1: *const core::ffi::c_ulong,
        addr2: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        n: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __find_nth_andnot_bit(
        addr1: *const core::ffi::c_ulong,
        addr2: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        n: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __find_nth_and_andnot_bit(
        addr1: *const core::ffi::c_ulong,
        addr2: *const core::ffi::c_ulong,
        addr3: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        n: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _find_first_and_bit(
        addr1: *const core::ffi::c_ulong,
        addr2: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _find_first_and_and_bit(
        addr1: *const core::ffi::c_ulong,
        addr2: *const core::ffi::c_ulong,
        addr3: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _find_first_zero_bit(
        addr: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _find_last_bit(
        addr: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn find_next_clump8(
        clump: *mut core::ffi::c_ulong,
        addr: *const core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        offset: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn strndup_user(
        arg1: *const core::ffi::c_char,
        arg2: core::ffi::c_long,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn memdup_user(arg1: *const core::ffi::c_void, arg2: usize) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn vmemdup_user(arg1: *const core::ffi::c_void, arg2: usize) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn memdup_user_nul(arg1: *const core::ffi::c_void, arg2: usize) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn strncpy(
        arg1: *mut core::ffi::c_char,
        arg2: *const core::ffi::c_char,
        arg3: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn sized_strscpy(
        arg1: *mut core::ffi::c_char,
        arg2: *const core::ffi::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn strncat(
        arg1: *mut core::ffi::c_char,
        arg2: *const core::ffi::c_char,
        arg3: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strlcat(
        arg1: *mut core::ffi::c_char,
        arg2: *const core::ffi::c_char,
        arg3: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn strncmp(
        arg1: *const core::ffi::c_char,
        arg2: *const core::ffi::c_char,
        arg3: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn strcasecmp(
        s1: *const core::ffi::c_char,
        s2: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn strncasecmp(
        s1: *const core::ffi::c_char,
        s2: *const core::ffi::c_char,
        n: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn strchr(arg1: *const core::ffi::c_char, arg2: core::ffi::c_int)
        -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strchrnul(
        arg1: *const core::ffi::c_char,
        arg2: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strnchrnul(
        arg1: *const core::ffi::c_char,
        arg2: usize,
        arg3: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strnchr(
        arg1: *const core::ffi::c_char,
        arg2: usize,
        arg3: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strrchr(
        arg1: *const core::ffi::c_char,
        arg2: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn skip_spaces(arg1: *const core::ffi::c_char) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strim(arg1: *mut core::ffi::c_char) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strstr(
        arg1: *const core::ffi::c_char,
        arg2: *const core::ffi::c_char,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strnstr(
        arg1: *const core::ffi::c_char,
        arg2: *const core::ffi::c_char,
        arg3: usize,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strnlen(arg1: *const core::ffi::c_char, arg2: __kernel_size_t) -> __kernel_size_t;
}
extern "C" {
    pub fn strpbrk(
        arg1: *const core::ffi::c_char,
        arg2: *const core::ffi::c_char,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strsep(
        arg1: *mut *mut core::ffi::c_char,
        arg2: *const core::ffi::c_char,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn strspn(
        arg1: *const core::ffi::c_char,
        arg2: *const core::ffi::c_char,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn strcspn(
        arg1: *const core::ffi::c_char,
        arg2: *const core::ffi::c_char,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __memcat_p(
        a: *mut *mut core::ffi::c_void,
        b: *mut *mut core::ffi::c_void,
    ) -> *mut *mut core::ffi::c_void;
}
extern "C" {
    pub fn memscan(
        arg1: *mut core::ffi::c_void,
        arg2: core::ffi::c_int,
        arg3: __kernel_size_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn bcmp(
        arg1: *const core::ffi::c_void,
        arg2: *const core::ffi::c_void,
        arg3: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn memchr(
        arg1: *const core::ffi::c_void,
        arg2: core::ffi::c_int,
        arg3: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn memchr_inv(
        s: *const core::ffi::c_void,
        c: core::ffi::c_int,
        n: usize,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn strreplace(
        str_: *mut core::ffi::c_char,
        old: core::ffi::c_char,
        new: core::ffi::c_char,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn kfree_const(x: *const core::ffi::c_void);
}
extern "C" {
    pub fn kstrdup(s: *const core::ffi::c_char, gfp: gfp_t) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn kstrdup_const(s: *const core::ffi::c_char, gfp: gfp_t) -> *const core::ffi::c_char;
}
extern "C" {
    pub fn kstrndup(s: *const core::ffi::c_char, len: usize, gfp: gfp_t) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn kmemdup_noprof(
        src: *const core::ffi::c_void,
        len: usize,
        gfp: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kvmemdup(
        src: *const core::ffi::c_void,
        len: usize,
        gfp: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kmemdup_nul(
        s: *const core::ffi::c_char,
        len: usize,
        gfp: gfp_t,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn kmemdup_array(
        src: *const core::ffi::c_void,
        count: usize,
        element_size: usize,
        gfp: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn argv_split(
        gfp: gfp_t,
        str_: *const core::ffi::c_char,
        argcp: *mut core::ffi::c_int,
    ) -> *mut *mut core::ffi::c_char;
}
extern "C" {
    pub fn argv_free(argv: *mut *mut core::ffi::c_char);
}
extern "C" {
    pub fn get_option(
        str_: *mut *mut core::ffi::c_char,
        pint: *mut core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_options(
        str_: *const core::ffi::c_char,
        nints: core::ffi::c_int,
        ints: *mut core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn memparse(
        ptr: *const core::ffi::c_char,
        retptr: *mut *mut core::ffi::c_char,
    ) -> core::ffi::c_ulonglong;
}
extern "C" {
    pub fn parse_option_str(
        str_: *const core::ffi::c_char,
        option: *const core::ffi::c_char,
    ) -> bool_;
}
extern "C" {
    pub fn next_arg(
        args: *mut core::ffi::c_char,
        param: *mut *mut core::ffi::c_char,
        val: *mut *mut core::ffi::c_char,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn sysfs_streq(s1: *const core::ffi::c_char, s2: *const core::ffi::c_char) -> bool_;
}
extern "C" {
    pub fn match_string(
        array: *const *const core::ffi::c_char,
        n: usize,
        string: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __sysfs_match_string(
        array: *const *const core::ffi::c_char,
        n: usize,
        s: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn memory_read_from_buffer(
        to: *mut core::ffi::c_void,
        count: usize,
        ppos: *mut loff_t,
        from: *const core::ffi::c_void,
        available: usize,
    ) -> isize;
}
extern "C" {
    pub fn ptr_to_hashval(
        ptr: *const core::ffi::c_void,
        hashval_out: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn memweight(ptr: *const core::ffi::c_void, bytes: usize) -> usize;
}
extern "C" {
    pub fn memcpy_and_pad(
        dest: *mut core::ffi::c_void,
        dest_len: usize,
        src: *const core::ffi::c_void,
        count: usize,
        pad: core::ffi::c_int,
    );
}
extern "C" {
    pub fn bitmap_parse_user(
        ubuf: *const core::ffi::c_char,
        ulen: core::ffi::c_uint,
        dst: *mut core::ffi::c_ulong,
        nbits: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bitmap_print_to_pagebuf(
        list: bool_,
        buf: *mut core::ffi::c_char,
        maskp: *const core::ffi::c_ulong,
        nmaskbits: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bitmap_print_bitmask_to_buf(
        buf: *mut core::ffi::c_char,
        maskp: *const core::ffi::c_ulong,
        nmaskbits: core::ffi::c_int,
        off: loff_t,
        count: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bitmap_print_list_to_buf(
        buf: *mut core::ffi::c_char,
        maskp: *const core::ffi::c_ulong,
        nmaskbits: core::ffi::c_int,
        off: loff_t,
        count: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bitmap_parse(
        buf: *const core::ffi::c_char,
        buflen: core::ffi::c_uint,
        dst: *mut core::ffi::c_ulong,
        nbits: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bitmap_parselist(
        buf: *const core::ffi::c_char,
        maskp: *mut core::ffi::c_ulong,
        nmaskbits: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bitmap_parselist_user(
        ubuf: *const core::ffi::c_char,
        ulen: core::ffi::c_uint,
        dst: *mut core::ffi::c_ulong,
        nbits: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct device {
    _unused: [u8; 0],
}
extern "C" {
    pub fn bitmap_alloc(nbits: core::ffi::c_uint, flags: gfp_t) -> *mut core::ffi::c_ulong;
}
extern "C" {
    pub fn bitmap_zalloc(nbits: core::ffi::c_uint, flags: gfp_t) -> *mut core::ffi::c_ulong;
}
extern "C" {
    pub fn bitmap_alloc_node(
        nbits: core::ffi::c_uint,
        flags: gfp_t,
        node: core::ffi::c_int,
    ) -> *mut core::ffi::c_ulong;
}
extern "C" {
    pub fn bitmap_zalloc_node(
        nbits: core::ffi::c_uint,
        flags: gfp_t,
        node: core::ffi::c_int,
    ) -> *mut core::ffi::c_ulong;
}
extern "C" {
    pub fn bitmap_free(bitmap: *const core::ffi::c_ulong);
}
extern "C" {
    pub fn devm_bitmap_alloc(
        dev: *mut device,
        nbits: core::ffi::c_uint,
        flags: gfp_t,
    ) -> *mut core::ffi::c_ulong;
}
extern "C" {
    pub fn devm_bitmap_zalloc(
        dev: *mut device,
        nbits: core::ffi::c_uint,
        flags: gfp_t,
    ) -> *mut core::ffi::c_ulong;
}
extern "C" {
    pub fn __bitmap_equal(
        bitmap1: *const core::ffi::c_ulong,
        bitmap2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn __bitmap_or_equal(
        src1: *const core::ffi::c_ulong,
        src2: *const core::ffi::c_ulong,
        src3: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn __bitmap_complement(
        dst: *mut core::ffi::c_ulong,
        src: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn __bitmap_shift_right(
        dst: *mut core::ffi::c_ulong,
        src: *const core::ffi::c_ulong,
        shift: core::ffi::c_uint,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn __bitmap_shift_left(
        dst: *mut core::ffi::c_ulong,
        src: *const core::ffi::c_ulong,
        shift: core::ffi::c_uint,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn bitmap_cut(
        dst: *mut core::ffi::c_ulong,
        src: *const core::ffi::c_ulong,
        first: core::ffi::c_uint,
        cut: core::ffi::c_uint,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn __bitmap_and(
        dst: *mut core::ffi::c_ulong,
        bitmap1: *const core::ffi::c_ulong,
        bitmap2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn __bitmap_or(
        dst: *mut core::ffi::c_ulong,
        bitmap1: *const core::ffi::c_ulong,
        bitmap2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn __bitmap_xor(
        dst: *mut core::ffi::c_ulong,
        bitmap1: *const core::ffi::c_ulong,
        bitmap2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn __bitmap_andnot(
        dst: *mut core::ffi::c_ulong,
        bitmap1: *const core::ffi::c_ulong,
        bitmap2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn __bitmap_replace(
        dst: *mut core::ffi::c_ulong,
        old: *const core::ffi::c_ulong,
        new: *const core::ffi::c_ulong,
        mask: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn __bitmap_intersects(
        bitmap1: *const core::ffi::c_ulong,
        bitmap2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn __bitmap_subset(
        bitmap1: *const core::ffi::c_ulong,
        bitmap2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn __bitmap_weight(
        bitmap: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn __bitmap_weight_and(
        bitmap1: *const core::ffi::c_ulong,
        bitmap2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn __bitmap_weight_andnot(
        bitmap1: *const core::ffi::c_ulong,
        bitmap2: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn __bitmap_set(
        map: *mut core::ffi::c_ulong,
        start: core::ffi::c_uint,
        len: core::ffi::c_int,
    );
}
extern "C" {
    pub fn __bitmap_clear(
        map: *mut core::ffi::c_ulong,
        start: core::ffi::c_uint,
        len: core::ffi::c_int,
    );
}
extern "C" {
    pub fn bitmap_find_next_zero_area_off(
        map: *mut core::ffi::c_ulong,
        size: core::ffi::c_ulong,
        start: core::ffi::c_ulong,
        nr: core::ffi::c_uint,
        align_mask: core::ffi::c_ulong,
        align_offset: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn bitmap_remap(
        dst: *mut core::ffi::c_ulong,
        src: *const core::ffi::c_ulong,
        old: *const core::ffi::c_ulong,
        new: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn bitmap_bitremap(
        oldbit: core::ffi::c_int,
        old: *const core::ffi::c_ulong,
        new: *const core::ffi::c_ulong,
        bits: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bitmap_onto(
        dst: *mut core::ffi::c_ulong,
        orig: *const core::ffi::c_ulong,
        relmap: *const core::ffi::c_ulong,
        bits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn bitmap_fold(
        dst: *mut core::ffi::c_ulong,
        orig: *const core::ffi::c_ulong,
        sz: core::ffi::c_uint,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn bitmap_from_arr32(
        bitmap: *mut core::ffi::c_ulong,
        buf: *const u32_,
        nbits: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn bitmap_to_arr32(
        buf: *mut u32_,
        bitmap: *const core::ffi::c_ulong,
        nbits: core::ffi::c_uint,
    );
}
pub const ___GFP_DMA_BIT: _bindgen_ty_8 = 0;
pub const ___GFP_HIGHMEM_BIT: _bindgen_ty_8 = 1;
pub const ___GFP_DMA32_BIT: _bindgen_ty_8 = 2;
pub const ___GFP_MOVABLE_BIT: _bindgen_ty_8 = 3;
pub const ___GFP_RECLAIMABLE_BIT: _bindgen_ty_8 = 4;
pub const ___GFP_HIGH_BIT: _bindgen_ty_8 = 5;
pub const ___GFP_IO_BIT: _bindgen_ty_8 = 6;
pub const ___GFP_FS_BIT: _bindgen_ty_8 = 7;
pub const ___GFP_ZERO_BIT: _bindgen_ty_8 = 8;
pub const ___GFP_UNUSED_BIT: _bindgen_ty_8 = 9;
pub const ___GFP_DIRECT_RECLAIM_BIT: _bindgen_ty_8 = 10;
pub const ___GFP_KSWAPD_RECLAIM_BIT: _bindgen_ty_8 = 11;
pub const ___GFP_WRITE_BIT: _bindgen_ty_8 = 12;
pub const ___GFP_NOWARN_BIT: _bindgen_ty_8 = 13;
pub const ___GFP_RETRY_MAYFAIL_BIT: _bindgen_ty_8 = 14;
pub const ___GFP_NOFAIL_BIT: _bindgen_ty_8 = 15;
pub const ___GFP_NORETRY_BIT: _bindgen_ty_8 = 16;
pub const ___GFP_MEMALLOC_BIT: _bindgen_ty_8 = 17;
pub const ___GFP_COMP_BIT: _bindgen_ty_8 = 18;
pub const ___GFP_NOMEMALLOC_BIT: _bindgen_ty_8 = 19;
pub const ___GFP_HARDWALL_BIT: _bindgen_ty_8 = 20;
pub const ___GFP_THISNODE_BIT: _bindgen_ty_8 = 21;
pub const ___GFP_ACCOUNT_BIT: _bindgen_ty_8 = 22;
pub const ___GFP_ZEROTAGS_BIT: _bindgen_ty_8 = 23;
pub const ___GFP_LAST_BIT: _bindgen_ty_8 = 24;
pub type _bindgen_ty_8 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cpumask {
    pub bits: [core::ffi::c_ulong; 1usize],
}
pub type cpumask_t = cpumask;
extern "C" {
    pub static mut nr_cpu_ids: core::ffi::c_uint;
}
extern "C" {
    pub static mut __cpu_possible_mask: cpumask;
}
extern "C" {
    pub static mut __cpu_online_mask: cpumask;
}
extern "C" {
    pub static mut __cpu_present_mask: cpumask;
}
extern "C" {
    pub static mut __cpu_active_mask: cpumask;
}
extern "C" {
    pub static mut __cpu_dying_mask: cpumask;
}
extern "C" {
    pub static mut __num_online_cpus: atomic_t;
}
extern "C" {
    pub static mut cpus_booted_once_mask: cpumask_t;
}
extern "C" {
    pub fn cpumask_local_spread(i: core::ffi::c_uint, node: core::ffi::c_int) -> core::ffi::c_uint;
}
extern "C" {
    pub fn cpumask_any_and_distribute(
        src1p: *const cpumask,
        src2p: *const cpumask,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn cpumask_any_distribute(srcp: *const cpumask) -> core::ffi::c_uint;
}
extern "C" {
    pub fn cpumask_next_wrap(
        n: core::ffi::c_int,
        mask: *const cpumask,
        start: core::ffi::c_int,
        wrap: bool_,
    ) -> core::ffi::c_uint;
}
pub type cpumask_var_t = [cpumask; 1usize];
extern "C" {
    pub static cpu_all_bits: [core::ffi::c_ulong; 1usize];
}
extern "C" {
    pub fn init_cpu_present(src: *const cpumask);
}
extern "C" {
    pub fn init_cpu_possible(src: *const cpumask);
}
extern "C" {
    pub fn init_cpu_online(src: *const cpumask);
}
extern "C" {
    pub fn set_cpu_online(cpu: core::ffi::c_uint, online: bool_);
}
extern "C" {
    pub static mut cpu_bit_bitmap: [[core::ffi::c_ulong; 1usize]; 65usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct llist_head {
    pub first: *mut llist_node,
}
impl Default for llist_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct llist_node {
    pub next: *mut llist_node,
}
impl Default for llist_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn llist_add_batch(
        new_first: *mut llist_node,
        new_last: *mut llist_node,
        head: *mut llist_head,
    ) -> bool_;
}
extern "C" {
    pub fn llist_del_first(head: *mut llist_head) -> *mut llist_node;
}
extern "C" {
    pub fn llist_del_first_this(head: *mut llist_head, this: *mut llist_node) -> bool_;
}
extern "C" {
    pub fn llist_reverse_order(head: *mut llist_node) -> *mut llist_node;
}
pub const CSD_FLAG_LOCK: _bindgen_ty_9 = 1;
pub const IRQ_WORK_PENDING: _bindgen_ty_9 = 1;
pub const IRQ_WORK_BUSY: _bindgen_ty_9 = 2;
pub const IRQ_WORK_LAZY: _bindgen_ty_9 = 4;
pub const IRQ_WORK_HARD_IRQ: _bindgen_ty_9 = 8;
pub const IRQ_WORK_CLAIMED: _bindgen_ty_9 = 3;
pub const CSD_TYPE_ASYNC: _bindgen_ty_9 = 0;
pub const CSD_TYPE_SYNC: _bindgen_ty_9 = 16;
pub const CSD_TYPE_IRQ_WORK: _bindgen_ty_9 = 32;
pub const CSD_TYPE_TTWU: _bindgen_ty_9 = 48;
pub const CSD_FLAG_TYPE_MASK: _bindgen_ty_9 = 240;
pub type _bindgen_ty_9 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __call_single_node {
    pub llist: llist_node,
    pub __bindgen_anon_1: __call_single_node__bindgen_ty_1,
    pub src: u16_,
    pub dst: u16_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __call_single_node__bindgen_ty_1 {
    pub u_flags: core::ffi::c_uint,
    pub a_flags: atomic_t,
}
impl Default for __call_single_node__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for __call_single_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type smp_call_func_t =
    ::core::option::Option<unsafe extern "C" fn(info: *mut core::ffi::c_void)>;
pub type smp_cond_func_t = ::core::option::Option<
    unsafe extern "C" fn(cpu: core::ffi::c_int, info: *mut core::ffi::c_void) -> bool_,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __call_single_data {
    pub node: __call_single_node,
    pub func: smp_call_func_t,
    pub info: *mut core::ffi::c_void,
}
impl Default for __call_single_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type call_single_data_t = __call_single_data;
extern "C" {
    pub fn __smp_call_single_queue(cpu: core::ffi::c_int, node: *mut llist_node);
}
extern "C" {
    pub static mut total_cpus: core::ffi::c_uint;
}
extern "C" {
    pub fn smp_call_function_single(
        cpuid: core::ffi::c_int,
        func: smp_call_func_t,
        info: *mut core::ffi::c_void,
        wait: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn on_each_cpu_cond_mask(
        cond_func: smp_cond_func_t,
        func: smp_call_func_t,
        info: *mut core::ffi::c_void,
        wait: bool_,
        mask: *const cpumask,
    );
}
extern "C" {
    pub fn smp_call_function_single_async(
        cpu: core::ffi::c_int,
        csd: *mut call_single_data_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn panic_smp_self_stop() -> !;
}
extern "C" {
    pub fn nmi_panic_self_stop(regs: *mut pt_regs) -> !;
}
extern "C" {
    pub fn crash_smp_send_stop();
}
extern "C" {
    pub fn smp_prepare_boot_cpu();
}
extern "C" {
    pub fn setup_cpu_local_masks();
}
extern "C" {
    pub static mut cpu_sibling_map: [cpumask; 1usize];
}
extern "C" {
    pub static mut cpu_core_map: [cpumask; 1usize];
}
extern "C" {
    pub static mut cpu_die_map: [cpumask; 1usize];
}
extern "C" {
    pub static mut cpu_llc_shared_map: [cpumask; 1usize];
}
extern "C" {
    pub static mut cpu_l2c_shared_map: [cpumask; 1usize];
}
extern "C" {
    pub static mut x86_cpu_to_apicid: core::ffi::c_uint;
}
extern "C" {
    pub static mut x86_cpu_to_apicid_early_ptr: *mut core::ffi::c_uint;
}
extern "C" {
    pub static mut x86_cpu_to_apicid_early_map: [core::ffi::c_uint; 0usize];
}
extern "C" {
    pub static mut x86_cpu_to_acpiid: core::ffi::c_uint;
}
extern "C" {
    pub static mut x86_cpu_to_acpiid_early_ptr: *mut core::ffi::c_uint;
}
extern "C" {
    pub static mut x86_cpu_to_acpiid_early_map: [core::ffi::c_uint; 0usize];
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct smp_ops {
    pub smp_prepare_boot_cpu: ::core::option::Option<unsafe extern "C" fn()>,
    pub smp_prepare_cpus: ::core::option::Option<unsafe extern "C" fn(max_cpus: core::ffi::c_uint)>,
    pub smp_cpus_done: ::core::option::Option<unsafe extern "C" fn(max_cpus: core::ffi::c_uint)>,
    pub stop_other_cpus: ::core::option::Option<unsafe extern "C" fn(wait: core::ffi::c_int)>,
    pub crash_stop_other_cpus: ::core::option::Option<unsafe extern "C" fn()>,
    pub smp_send_reschedule: ::core::option::Option<unsafe extern "C" fn(cpu: core::ffi::c_int)>,
    pub cleanup_dead_cpu: ::core::option::Option<unsafe extern "C" fn(cpu: core::ffi::c_uint)>,
    pub poll_sync_state: ::core::option::Option<unsafe extern "C" fn()>,
    pub kick_ap_alive: ::core::option::Option<
        unsafe extern "C" fn(cpu: core::ffi::c_uint, tidle: *mut task_struct) -> core::ffi::c_int,
    >,
    pub cpu_disable: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
    pub cpu_die: ::core::option::Option<unsafe extern "C" fn(cpu: core::ffi::c_uint)>,
    pub play_dead: ::core::option::Option<unsafe extern "C" fn()>,
    pub send_call_func_ipi: ::core::option::Option<unsafe extern "C" fn(mask: *const cpumask)>,
    pub send_call_func_single_ipi:
        ::core::option::Option<unsafe extern "C" fn(cpu: core::ffi::c_int)>,
}
extern "C" {
    pub fn set_cpu_sibling_map(cpu: core::ffi::c_int);
}
extern "C" {
    pub static mut smp_ops: smp_ops;
}
extern "C" {
    pub fn cpu_disable_common();
}
extern "C" {
    pub fn native_smp_prepare_boot_cpu();
}
extern "C" {
    pub fn smp_prepare_cpus_common();
}
extern "C" {
    pub fn native_smp_prepare_cpus(max_cpus: core::ffi::c_uint);
}
extern "C" {
    pub fn native_smp_cpus_done(max_cpus: core::ffi::c_uint);
}
extern "C" {
    pub fn common_cpu_up(cpunum: core::ffi::c_uint, tidle: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn native_kick_ap(cpu: core::ffi::c_uint, tidle: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn native_cpu_disable() -> core::ffi::c_int;
}
extern "C" {
    pub fn hlt_play_dead() -> !;
}
extern "C" {
    pub fn native_play_dead();
}
extern "C" {
    pub fn play_dead_common();
}
extern "C" {
    pub fn wbinvd_on_cpu(cpu: core::ffi::c_int);
}
extern "C" {
    pub fn wbinvd_on_all_cpus() -> core::ffi::c_int;
}
extern "C" {
    pub fn smp_kick_mwait_play_dead();
}
extern "C" {
    pub fn native_smp_send_reschedule(cpu: core::ffi::c_int);
}
extern "C" {
    pub fn native_send_call_func_ipi(mask: *const cpumask);
}
extern "C" {
    pub fn native_send_call_func_single_ipi(cpu: core::ffi::c_int);
}
extern "C" {
    pub fn smp_store_cpu_info(id: core::ffi::c_int);
}
extern "C" {
    pub fn smp_reboot_interrupt();
}
extern "C" {
    pub fn smp_reschedule_interrupt(regs: *mut pt_regs);
}
extern "C" {
    pub fn smp_call_function_interrupt(regs: *mut pt_regs);
}
extern "C" {
    pub fn smp_call_function_single_interrupt(r: *mut pt_regs);
}
extern "C" {
    pub static mut smpboot_control: core::ffi::c_uint;
}
extern "C" {
    pub static mut apic_mmio_base: core::ffi::c_ulong;
}
extern "C" {
    pub fn __cpu_up(cpunum: core::ffi::c_uint, tidle: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn smp_call_function(
        func: smp_call_func_t,
        info: *mut core::ffi::c_void,
        wait: core::ffi::c_int,
    );
}
extern "C" {
    pub fn smp_call_function_many(
        mask: *const cpumask,
        func: smp_call_func_t,
        info: *mut core::ffi::c_void,
        wait: bool_,
    );
}
extern "C" {
    pub fn smp_call_function_any(
        mask: *const cpumask,
        func: smp_call_func_t,
        info: *mut core::ffi::c_void,
        wait: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kick_all_cpus_sync();
}
extern "C" {
    pub fn wake_up_all_idle_cpus();
}
extern "C" {
    pub fn call_function_init();
}
extern "C" {
    pub fn generic_smp_call_function_single_interrupt();
}
extern "C" {
    pub static mut setup_max_cpus: core::ffi::c_uint;
}
extern "C" {
    pub fn setup_nr_cpu_ids();
}
extern "C" {
    pub fn smp_init();
}
extern "C" {
    pub static mut __boot_cpu_id: core::ffi::c_int;
}
extern "C" {
    pub fn arch_disable_smp_support();
}
extern "C" {
    pub fn arch_thaw_secondary_cpus_begin();
}
extern "C" {
    pub fn arch_thaw_secondary_cpus_end();
}
extern "C" {
    pub fn smp_setup_processor_id();
}
extern "C" {
    pub fn smp_call_on_cpu(
        cpu: core::ffi::c_uint,
        func: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut core::ffi::c_void) -> core::ffi::c_int,
        >,
        par: *mut core::ffi::c_void,
        phys: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn smpcfd_prepare_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn smpcfd_dead_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn smpcfd_dying_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn lock_is_held(arg1: *const core::ffi::c_void) -> core::ffi::c_int;
}
extern "C" {
    pub fn lockdep_is_held(arg1: *const core::ffi::c_void) -> core::ffi::c_int;
}
pub const xhlock_context_t_XHLOCK_HARD: xhlock_context_t = 0;
pub const xhlock_context_t_XHLOCK_SOFT: xhlock_context_t = 1;
pub const xhlock_context_t_XHLOCK_CTX_NR: xhlock_context_t = 2;
pub type xhlock_context_t = core::ffi::c_uint;
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct spinlock {
    pub _bindgen_opaque_blob: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spinlock__bindgen_ty_1 {
    pub rlock: raw_spinlock,
}
impl Default for spinlock__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type spinlock_t = spinlock;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rwlock_t {
    pub raw_lock: arch_rwlock_t,
}
impl Default for rwlock_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn queued_spin_lock_slowpath(lock: *mut qspinlock, val: u32_);
}
extern "C" {
    pub fn queued_read_lock_slowpath(lock: *mut qrwlock);
}
extern "C" {
    pub fn queued_write_lock_slowpath(lock: *mut qrwlock);
}
extern "C" {
    pub fn in_lock_functions(addr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn _raw_spin_lock(lock: *mut raw_spinlock_t);
}
extern "C" {
    pub fn _raw_spin_lock_nested(lock: *mut raw_spinlock_t, subclass: core::ffi::c_int);
}
extern "C" {
    pub fn _raw_spin_lock_nest_lock(lock: *mut raw_spinlock_t, map: *mut lockdep_map);
}
extern "C" {
    pub fn _raw_spin_lock_bh(lock: *mut raw_spinlock_t);
}
extern "C" {
    pub fn _raw_spin_lock_irq(lock: *mut raw_spinlock_t);
}
extern "C" {
    pub fn _raw_spin_lock_irqsave(lock: *mut raw_spinlock_t) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _raw_spin_lock_irqsave_nested(
        lock: *mut raw_spinlock_t,
        subclass: core::ffi::c_int,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _raw_spin_trylock(lock: *mut raw_spinlock_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn _raw_spin_trylock_bh(lock: *mut raw_spinlock_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn _raw_spin_unlock(lock: *mut raw_spinlock_t);
}
extern "C" {
    pub fn _raw_spin_unlock_bh(lock: *mut raw_spinlock_t);
}
extern "C" {
    pub fn _raw_spin_unlock_irq(lock: *mut raw_spinlock_t);
}
extern "C" {
    pub fn _raw_spin_unlock_irqrestore(lock: *mut raw_spinlock_t, flags: core::ffi::c_ulong);
}
extern "C" {
    pub fn _raw_read_lock(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_lock(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_lock_nested(lock: *mut rwlock_t, subclass: core::ffi::c_int);
}
extern "C" {
    pub fn _raw_read_lock_bh(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_lock_bh(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_read_lock_irq(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_lock_irq(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_read_lock_irqsave(lock: *mut rwlock_t) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _raw_write_lock_irqsave(lock: *mut rwlock_t) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _raw_read_trylock(lock: *mut rwlock_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn _raw_write_trylock(lock: *mut rwlock_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn _raw_read_unlock(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_unlock(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_read_unlock_bh(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_unlock_bh(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_read_unlock_irq(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_write_unlock_irq(lock: *mut rwlock_t);
}
extern "C" {
    pub fn _raw_read_unlock_irqrestore(lock: *mut rwlock_t, flags: core::ffi::c_ulong);
}
extern "C" {
    pub fn _raw_write_unlock_irqrestore(lock: *mut rwlock_t, flags: core::ffi::c_ulong);
}
extern "C" {
    pub fn _atomic_dec_and_lock(atomic: *mut atomic_t, lock: *mut spinlock_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn _atomic_dec_and_lock_irqsave(
        atomic: *mut atomic_t,
        lock: *mut spinlock_t,
        flags: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn _atomic_dec_and_raw_lock(
        atomic: *mut atomic_t,
        lock: *mut raw_spinlock_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn _atomic_dec_and_raw_lock_irqsave(
        atomic: *mut atomic_t,
        lock: *mut raw_spinlock_t,
        flags: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __alloc_bucket_spinlocks(
        locks: *mut *mut spinlock_t,
        lock_mask: *mut core::ffi::c_uint,
        max_size: usize,
        cpu_mult: core::ffi::c_uint,
        gfp: gfp_t,
        name: *const core::ffi::c_char,
        key: *mut lock_class_key,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn free_bucket_spinlocks(locks: *mut spinlock_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_raw_spinlock_t {
    pub lock: *mut raw_spinlock_t,
}
impl Default for class_raw_spinlock_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type class_raw_spinlock_try_t = class_raw_spinlock_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_raw_spinlock_nested_t {
    pub lock: *mut raw_spinlock_t,
}
impl Default for class_raw_spinlock_nested_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_raw_spinlock_irq_t {
    pub lock: *mut raw_spinlock_t,
}
impl Default for class_raw_spinlock_irq_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type class_raw_spinlock_irq_try_t = class_raw_spinlock_irq_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_raw_spinlock_irqsave_t {
    pub lock: *mut raw_spinlock_t,
    pub flags: core::ffi::c_ulong,
}
impl Default for class_raw_spinlock_irqsave_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type class_raw_spinlock_irqsave_try_t = class_raw_spinlock_irqsave_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_spinlock_t {
    pub lock: *mut spinlock_t,
}
impl Default for class_spinlock_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type class_spinlock_try_t = class_spinlock_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_spinlock_irq_t {
    pub lock: *mut spinlock_t,
}
impl Default for class_spinlock_irq_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type class_spinlock_irq_try_t = class_spinlock_irq_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_spinlock_irqsave_t {
    pub lock: *mut spinlock_t,
    pub flags: core::ffi::c_ulong,
}
impl Default for class_spinlock_irqsave_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type class_spinlock_irqsave_try_t = class_spinlock_irqsave_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_read_lock_t {
    pub lock: *mut rwlock_t,
}
impl Default for class_read_lock_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_read_lock_irq_t {
    pub lock: *mut rwlock_t,
}
impl Default for class_read_lock_irq_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_read_lock_irqsave_t {
    pub lock: *mut rwlock_t,
    pub flags: core::ffi::c_ulong,
}
impl Default for class_read_lock_irqsave_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_write_lock_t {
    pub lock: *mut rwlock_t,
}
impl Default for class_write_lock_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_write_lock_irq_t {
    pub lock: *mut rwlock_t,
}
impl Default for class_write_lock_irq_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_write_lock_irqsave_t {
    pub lock: *mut rwlock_t,
    pub flags: core::ffi::c_ulong,
}
impl Default for class_write_lock_irqsave_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct refcount_struct {
    pub refs: atomic_t,
}
pub type refcount_t = refcount_struct;
pub const refcount_saturation_type_REFCOUNT_ADD_NOT_ZERO_OVF: refcount_saturation_type = 0;
pub const refcount_saturation_type_REFCOUNT_ADD_OVF: refcount_saturation_type = 1;
pub const refcount_saturation_type_REFCOUNT_ADD_UAF: refcount_saturation_type = 2;
pub const refcount_saturation_type_REFCOUNT_SUB_UAF: refcount_saturation_type = 3;
pub const refcount_saturation_type_REFCOUNT_DEC_LEAK: refcount_saturation_type = 4;
pub type refcount_saturation_type = core::ffi::c_uint;
extern "C" {
    pub fn refcount_warn_saturate(r: *mut refcount_t, t: refcount_saturation_type);
}
extern "C" {
    pub fn refcount_dec_if_one(r: *mut refcount_t) -> bool_;
}
extern "C" {
    pub fn refcount_dec_not_one(r: *mut refcount_t) -> bool_;
}
extern "C" {
    pub fn refcount_dec_and_mutex_lock(r: *mut refcount_t, lock: *mut mutex) -> bool_;
}
extern "C" {
    pub fn refcount_dec_and_lock(r: *mut refcount_t, lock: *mut spinlock_t) -> bool_;
}
extern "C" {
    pub fn refcount_dec_and_lock_irqsave(
        r: *mut refcount_t,
        lock: *mut spinlock_t,
        flags: *mut core::ffi::c_ulong,
    ) -> bool_;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kref {
    pub refcount: refcount_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct stat {
    pub st_dev: __kernel_ulong_t,
    pub st_ino: __kernel_ulong_t,
    pub st_nlink: __kernel_ulong_t,
    pub st_mode: core::ffi::c_uint,
    pub st_uid: core::ffi::c_uint,
    pub st_gid: core::ffi::c_uint,
    pub __pad0: core::ffi::c_uint,
    pub st_rdev: __kernel_ulong_t,
    pub st_size: __kernel_long_t,
    pub st_blksize: __kernel_long_t,
    pub st_blocks: __kernel_long_t,
    pub st_atime: __kernel_ulong_t,
    pub st_atime_nsec: __kernel_ulong_t,
    pub st_mtime: __kernel_ulong_t,
    pub st_mtime_nsec: __kernel_ulong_t,
    pub st_ctime: __kernel_ulong_t,
    pub st_ctime_nsec: __kernel_ulong_t,
    pub __unused: [__kernel_long_t; 3usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __old_kernel_stat {
    pub st_dev: core::ffi::c_ushort,
    pub st_ino: core::ffi::c_ushort,
    pub st_mode: core::ffi::c_ushort,
    pub st_nlink: core::ffi::c_ushort,
    pub st_uid: core::ffi::c_ushort,
    pub st_gid: core::ffi::c_ushort,
    pub st_rdev: core::ffi::c_ushort,
    pub st_size: core::ffi::c_uint,
    pub st_atime: core::ffi::c_uint,
    pub st_mtime: core::ffi::c_uint,
    pub st_ctime: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct statx_timestamp {
    pub tv_sec: __s64,
    pub tv_nsec: __u32,
    pub __reserved: __s32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct statx {
    pub stx_mask: __u32,
    pub stx_blksize: __u32,
    pub stx_attributes: __u64,
    pub stx_nlink: __u32,
    pub stx_uid: __u32,
    pub stx_gid: __u32,
    pub stx_mode: __u16,
    pub __spare0: [__u16; 1usize],
    pub stx_ino: __u64,
    pub stx_size: __u64,
    pub stx_blocks: __u64,
    pub stx_attributes_mask: __u64,
    pub stx_atime: statx_timestamp,
    pub stx_btime: statx_timestamp,
    pub stx_ctime: statx_timestamp,
    pub stx_mtime: statx_timestamp,
    pub stx_rdev_major: __u32,
    pub stx_rdev_minor: __u32,
    pub stx_dev_major: __u32,
    pub stx_dev_minor: __u32,
    pub stx_mnt_id: __u64,
    pub stx_dio_mem_align: __u32,
    pub stx_dio_offset_align: __u32,
    pub stx_subvol: __u64,
    pub __spare3: [__u64; 11usize],
}
pub type time64_t = __s64;
pub type timeu64_t = __u64;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __kernel_timespec {
    pub tv_sec: __kernel_time64_t,
    pub tv_nsec: core::ffi::c_longlong,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __kernel_itimerspec {
    pub it_interval: __kernel_timespec,
    pub it_value: __kernel_timespec,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __kernel_old_timeval {
    pub tv_sec: __kernel_long_t,
    pub tv_usec: __kernel_long_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __kernel_old_timespec {
    pub tv_sec: __kernel_old_time_t,
    pub tv_nsec: core::ffi::c_long,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __kernel_old_itimerval {
    pub it_interval: __kernel_old_timeval,
    pub it_value: __kernel_old_timeval,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __kernel_sock_timeval {
    pub tv_sec: __s64,
    pub tv_usec: __s64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: core::ffi::c_int,
    pub tz_dsttime: core::ffi::c_int,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct timespec64 {
    pub tv_sec: time64_t,
    pub tv_nsec: core::ffi::c_long,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct itimerspec64 {
    pub it_interval: timespec64,
    pub it_value: timespec64,
}
extern "C" {
    pub fn set_normalized_timespec64(ts: *mut timespec64, sec: time64_t, nsec: s64);
}
extern "C" {
    pub fn ns_to_timespec64(nsec: s64) -> timespec64;
}
extern "C" {
    pub fn timespec64_add_safe(lhs: timespec64, rhs: timespec64) -> timespec64;
}
extern "C" {
    pub static mut sys_tz: timezone;
}
extern "C" {
    pub fn get_timespec64(ts: *mut timespec64, uts: *const __kernel_timespec) -> core::ffi::c_int;
}
extern "C" {
    pub fn put_timespec64(ts: *const timespec64, uts: *mut __kernel_timespec) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_itimerspec64(
        it: *mut itimerspec64,
        uit: *const __kernel_itimerspec,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn put_itimerspec64(
        it: *const itimerspec64,
        uit: *mut __kernel_itimerspec,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mktime64(
        year: core::ffi::c_uint,
        mon: core::ffi::c_uint,
        day: core::ffi::c_uint,
        hour: core::ffi::c_uint,
        min: core::ffi::c_uint,
        sec: core::ffi::c_uint,
    ) -> time64_t;
}
extern "C" {
    pub fn clear_itimer();
}
extern "C" {
    pub fn do_utimes(
        dfd: core::ffi::c_int,
        filename: *const core::ffi::c_char,
        times: *mut timespec64,
        flags: core::ffi::c_int,
    ) -> core::ffi::c_long;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm {
    pub tm_sec: core::ffi::c_int,
    pub tm_min: core::ffi::c_int,
    pub tm_hour: core::ffi::c_int,
    pub tm_mday: core::ffi::c_int,
    pub tm_mon: core::ffi::c_int,
    pub tm_year: core::ffi::c_long,
    pub tm_wday: core::ffi::c_int,
    pub tm_yday: core::ffi::c_int,
}
extern "C" {
    pub fn time64_to_tm(totalsecs: time64_t, offset: core::ffi::c_int, result: *mut tm);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __kernel_timex_timeval {
    pub tv_sec: __kernel_time64_t,
    pub tv_usec: core::ffi::c_longlong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __kernel_timex {
    pub modes: core::ffi::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub offset: core::ffi::c_longlong,
    pub freq: core::ffi::c_longlong,
    pub maxerror: core::ffi::c_longlong,
    pub esterror: core::ffi::c_longlong,
    pub status: core::ffi::c_int,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub constant: core::ffi::c_longlong,
    pub precision: core::ffi::c_longlong,
    pub tolerance: core::ffi::c_longlong,
    pub time: __kernel_timex_timeval,
    pub tick: core::ffi::c_longlong,
    pub ppsfreq: core::ffi::c_longlong,
    pub jitter: core::ffi::c_longlong,
    pub shift: core::ffi::c_int,
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub stabil: core::ffi::c_longlong,
    pub jitcnt: core::ffi::c_longlong,
    pub calcnt: core::ffi::c_longlong,
    pub errcnt: core::ffi::c_longlong,
    pub stbcnt: core::ffi::c_longlong,
    pub tai: core::ffi::c_int,
    pub _bitfield_align_4: [u8; 0],
    pub _bitfield_4: __BindgenBitfieldUnit<[u8; 44usize]>,
}
impl Default for __kernel_timex {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl __kernel_timex {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn new_bitfield_2() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn new_bitfield_3() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn random_get_entropy_fallback() -> core::ffi::c_ulong;
}
extern "C" {
    pub static mut __invalid_size_argument_for_IOC: core::ffi::c_uint;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct msr {
    pub __bindgen_anon_1: msr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union msr__bindgen_ty_1 {
    pub __bindgen_anon_1: msr__bindgen_ty_1__bindgen_ty_1,
    pub q: u64_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct msr__bindgen_ty_1__bindgen_ty_1 {
    pub l: u32_,
    pub h: u32_,
}
impl Default for msr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for msr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct codetag_type {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct codetag_module {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct seq_buf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct codetag {
    pub flags: core::ffi::c_uint,
    pub lineno: core::ffi::c_uint,
    pub modname: *const core::ffi::c_char,
    pub function: *const core::ffi::c_char,
    pub filename: *const core::ffi::c_char,
}
impl Default for codetag {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union codetag_ref {
    pub ct: *mut codetag,
}
impl Default for codetag_ref {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct codetag_type_desc {
    pub section: *const core::ffi::c_char,
    pub tag_size: usize,
    pub module_load: ::core::option::Option<
        unsafe extern "C" fn(cttype: *mut codetag_type, cmod: *mut codetag_module),
    >,
    pub module_unload: ::core::option::Option<
        unsafe extern "C" fn(cttype: *mut codetag_type, cmod: *mut codetag_module) -> bool_,
    >,
}
impl Default for codetag_type_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct codetag_iterator {
    pub cttype: *mut codetag_type,
    pub cmod: *mut codetag_module,
    pub mod_id: core::ffi::c_ulong,
    pub ct: *mut codetag,
}
impl Default for codetag_iterator {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn codetag_lock_module_list(cttype: *mut codetag_type, lock: bool_);
}
extern "C" {
    pub fn codetag_trylock_module_list(cttype: *mut codetag_type) -> bool_;
}
extern "C" {
    pub fn codetag_get_ct_iter(cttype: *mut codetag_type) -> codetag_iterator;
}
extern "C" {
    pub fn codetag_next_ct(iter: *mut codetag_iterator) -> *mut codetag;
}
extern "C" {
    pub fn codetag_to_text(out: *mut seq_buf, ct: *mut codetag);
}
extern "C" {
    pub fn codetag_register_type(desc: *const codetag_type_desc) -> *mut codetag_type;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct alloc_tag_counters {
    pub bytes: u64_,
    pub calls: u64_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct alloc_tag {
    pub ct: codetag,
    pub counters: *mut alloc_tag_counters,
}
impl Default for alloc_tag {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn dump_page(page: *const page, reason: *const core::ffi::c_char);
}
extern "C" {
    pub fn dump_vma(vma: *const vm_area_struct);
}
extern "C" {
    pub fn dump_mm(mm: *const mm_struct);
}
extern "C" {
    pub fn vma_iter_dump_tree(vmi: *const vma_iterator);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct clone_args {
    pub flags: __u64,
    pub pidfd: __u64,
    pub child_tid: __u64,
    pub parent_tid: __u64,
    pub exit_signal: __u64,
    pub stack: __u64,
    pub stack_size: __u64,
    pub tls: __u64,
    pub set_tid: __u64,
    pub set_tid_size: __u64,
    pub cgroup: __u64,
}
pub const pid_type_PIDTYPE_PID: pid_type = 0;
pub const pid_type_PIDTYPE_TGID: pid_type = 1;
pub const pid_type_PIDTYPE_PGID: pid_type = 2;
pub const pid_type_PIDTYPE_SID: pid_type = 3;
pub const pid_type_PIDTYPE_MAX: pid_type = 4;
pub type pid_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pid_namespace {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut init_pid_ns: pid_namespace;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sem_undo_list {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sysv_sem {}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sysv_shm {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kmsan_context_state {
    pub param_tls: [core::ffi::c_char; 800usize],
    pub retval_tls: [core::ffi::c_char; 800usize],
    pub va_arg_tls: [core::ffi::c_char; 800usize],
    pub va_arg_origin_tls: [core::ffi::c_char; 800usize],
    pub va_arg_overflow_size_tls: u64_,
    pub param_origin_tls: [core::ffi::c_char; 800usize],
    pub retval_origin_tls: u32_,
}
impl Default for kmsan_context_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kmsan_ctx {
    pub cstate: kmsan_context_state,
    pub kmsan_in_runtime: core::ffi::c_int,
    pub allow_reporting: bool_,
}
impl Default for kmsan_ctx {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct optimistic_spin_queue {
    pub tail: atomic_t,
}
extern "C" {
    pub fn osq_lock(lock: *mut optimistic_spin_queue) -> bool_;
}
extern "C" {
    pub fn osq_unlock(lock: *mut optimistic_spin_queue);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mutex {
    pub owner: atomic_long_t,
    pub wait_lock: raw_spinlock_t,
    pub osq: optimistic_spin_queue,
    pub wait_list: list_head,
}
impl Default for mutex {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct plist_head {
    pub node_list: list_head,
}
impl Default for plist_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct plist_node {
    pub prio: core::ffi::c_int,
    pub prio_list: list_head,
    pub node_list: list_head,
}
impl Default for plist_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_node {
    pub __rb_parent_color: core::ffi::c_ulong,
    pub rb_right: *mut rb_node,
    pub rb_left: *mut rb_node,
}
impl Default for rb_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_root {
    pub rb_node: *mut rb_node,
}
impl Default for rb_root {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_root_cached {
    pub rb_root: rb_root,
    pub rb_leftmost: *mut rb_node,
}
impl Default for rb_root_cached {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct timerqueue_node {
    pub node: rb_node,
    pub expires: ktime_t,
}
impl Default for timerqueue_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct timerqueue_head {
    pub rb_root: rb_root_cached,
}
impl Default for timerqueue_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const hrtimer_restart_HRTIMER_NORESTART: hrtimer_restart = 0;
pub const hrtimer_restart_HRTIMER_RESTART: hrtimer_restart = 1;
pub type hrtimer_restart = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hrtimer {
    pub node: timerqueue_node,
    pub _softexpires: ktime_t,
    pub function:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut hrtimer) -> hrtimer_restart>,
    pub base: *mut hrtimer_clock_base,
    pub state: u8_,
    pub is_rel: u8_,
    pub is_soft: u8_,
    pub is_hard: u8_,
}
impl Default for hrtimer {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct timer_list {
    pub entry: hlist_node,
    pub expires: core::ffi::c_ulong,
    pub function: ::core::option::Option<unsafe extern "C" fn(arg1: *mut timer_list)>,
    pub flags: u32_,
}
impl Default for timer_list {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct seccomp {}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct seccomp_filter {}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct nodemask_t {
    pub bits: [core::ffi::c_ulong; 1usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct rusage {
    pub ru_utime: __kernel_old_timeval,
    pub ru_stime: __kernel_old_timeval,
    pub ru_maxrss: __kernel_long_t,
    pub ru_ixrss: __kernel_long_t,
    pub ru_idrss: __kernel_long_t,
    pub ru_isrss: __kernel_long_t,
    pub ru_minflt: __kernel_long_t,
    pub ru_majflt: __kernel_long_t,
    pub ru_nswap: __kernel_long_t,
    pub ru_inblock: __kernel_long_t,
    pub ru_oublock: __kernel_long_t,
    pub ru_msgsnd: __kernel_long_t,
    pub ru_msgrcv: __kernel_long_t,
    pub ru_nsignals: __kernel_long_t,
    pub ru_nvcsw: __kernel_long_t,
    pub ru_nivcsw: __kernel_long_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: __kernel_ulong_t,
    pub rlim_max: __kernel_ulong_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct rlimit64 {
    pub rlim_cur: __u64,
    pub rlim_max: __u64,
}
extern "C" {
    pub fn getrusage(p: *mut task_struct, who: core::ffi::c_int, ru: *mut rusage);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct task_cputime {
    pub stime: u64_,
    pub utime: u64_,
    pub sum_exec_runtime: core::ffi::c_ulonglong,
}
pub type old_sigset_t = core::ffi::c_ulong;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sigset_t {
    pub sig: [core::ffi::c_ulong; 1usize],
}
pub type __signalfn_t = ::core::option::Option<unsafe extern "C" fn(arg1: core::ffi::c_int)>;
pub type __sighandler_t = __signalfn_t;
pub type __restorefn_t = ::core::option::Option<unsafe extern "C" fn()>;
pub type __sigrestore_t = __restorefn_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaltstack {
    pub ss_sp: *mut core::ffi::c_void,
    pub ss_flags: core::ffi::c_int,
    pub ss_size: __kernel_size_t,
}
impl Default for sigaltstack {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type stack_t = sigaltstack;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: core::ffi::c_int,
    pub sival_ptr: *mut core::ffi::c_void,
}
impl Default for sigval {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sifields {
    pub _kill: __sifields__bindgen_ty_1,
    pub _timer: __sifields__bindgen_ty_2,
    pub _rt: __sifields__bindgen_ty_3,
    pub _sigchld: __sifields__bindgen_ty_4,
    pub _sigfault: __sifields__bindgen_ty_5,
    pub _sigpoll: __sifields__bindgen_ty_6,
    pub _sigsys: __sifields__bindgen_ty_7,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __sifields__bindgen_ty_1 {
    pub _pid: __kernel_pid_t,
    pub _uid: __kernel_uid32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sifields__bindgen_ty_2 {
    pub _tid: __kernel_timer_t,
    pub _overrun: core::ffi::c_int,
    pub _sigval: sigval_t,
    pub _sys_private: core::ffi::c_int,
}
impl Default for __sifields__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sifields__bindgen_ty_3 {
    pub _pid: __kernel_pid_t,
    pub _uid: __kernel_uid32_t,
    pub _sigval: sigval_t,
}
impl Default for __sifields__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __sifields__bindgen_ty_4 {
    pub _pid: __kernel_pid_t,
    pub _uid: __kernel_uid32_t,
    pub _status: core::ffi::c_int,
    pub _utime: __kernel_clock_t,
    pub _stime: __kernel_clock_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sifields__bindgen_ty_5 {
    pub _addr: *mut core::ffi::c_void,
    pub __bindgen_anon_1: __sifields__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sifields__bindgen_ty_5__bindgen_ty_1 {
    pub _trapno: core::ffi::c_int,
    pub _addr_lsb: core::ffi::c_short,
    pub _addr_bnd: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _addr_pkey: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
    pub _perf: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _dummy_bnd: [core::ffi::c_char; 8usize],
    pub _lower: *mut core::ffi::c_void,
    pub _upper: *mut core::ffi::c_void,
}
impl Default for __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2 {
    pub _dummy_pkey: [core::ffi::c_char; 8usize],
    pub _pkey: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3 {
    pub _data: core::ffi::c_ulong,
    pub _type: __u32,
    pub _flags: __u32,
}
impl Default for __sifields__bindgen_ty_5__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for __sifields__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __sifields__bindgen_ty_6 {
    pub _band: core::ffi::c_long,
    pub _fd: core::ffi::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sifields__bindgen_ty_7 {
    pub _call_addr: *mut core::ffi::c_void,
    pub _syscall: core::ffi::c_int,
    pub _arch: core::ffi::c_uint,
}
impl Default for __sifields__bindgen_ty_7 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for __sifields {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo {
    pub __bindgen_anon_1: siginfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo__bindgen_ty_1 {
    pub __bindgen_anon_1: siginfo__bindgen_ty_1__bindgen_ty_1,
    pub _si_pad: [core::ffi::c_int; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo__bindgen_ty_1__bindgen_ty_1 {
    pub si_signo: core::ffi::c_int,
    pub si_errno: core::ffi::c_int,
    pub si_code: core::ffi::c_int,
    pub _sifields: __sifields,
}
impl Default for siginfo__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for siginfo__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for siginfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type siginfo_t = siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_value: sigval_t,
    pub sigev_signo: core::ffi::c_int,
    pub sigev_notify: core::ffi::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _pad: [core::ffi::c_int; 12usize],
    pub _tid: core::ffi::c_int,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::core::option::Option<unsafe extern "C" fn(arg1: sigval_t)>,
    pub _attribute: *mut core::ffi::c_void,
}
impl Default for sigevent__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for sigevent__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for sigevent {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type sigevent_t = sigevent;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernel_siginfo {
    pub __bindgen_anon_1: kernel_siginfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernel_siginfo__bindgen_ty_1 {
    pub si_signo: core::ffi::c_int,
    pub si_errno: core::ffi::c_int,
    pub si_code: core::ffi::c_int,
    pub _sifields: __sifields,
}
impl Default for kernel_siginfo__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for kernel_siginfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type kernel_siginfo_t = kernel_siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ucounts {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigqueue {
    pub list: list_head,
    pub flags: core::ffi::c_int,
    pub info: kernel_siginfo_t,
    pub ucounts: *mut ucounts,
}
impl Default for sigqueue {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigpending {
    pub list: list_head,
    pub signal: sigset_t,
}
impl Default for sigpending {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sigaction {
    pub sa_handler: __sighandler_t,
    pub sa_flags: core::ffi::c_ulong,
    pub sa_restorer: __sigrestore_t,
    pub sa_mask: sigset_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct k_sigaction {
    pub sa: sigaction,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ksignal {
    pub ka: k_sigaction,
    pub info: kernel_siginfo_t,
    pub sig: core::ffi::c_int,
}
impl Default for ksignal {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct syscall_user_dispatch {
    pub selector: *mut core::ffi::c_char,
    pub offset: core::ffi::c_ulong,
    pub len: core::ffi::c_ulong,
    pub on_dispatch: bool_,
}
impl Default for syscall_user_dispatch {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct arch_tlbflush_unmap_batch {
    pub cpumask: cpumask,
}
pub const MM_FILEPAGES: _bindgen_ty_10 = 0;
pub const MM_ANONPAGES: _bindgen_ty_10 = 1;
pub const MM_SWAPENTS: _bindgen_ty_10 = 2;
pub const MM_SHMEMPAGES: _bindgen_ty_10 = 3;
pub const NR_MM_COUNTERS: _bindgen_ty_10 = 4;
pub type _bindgen_ty_10 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page_frag {
    pub page: *mut page,
    pub offset: __u32,
    pub size: __u32,
}
impl Default for page_frag {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tlbflush_unmap_batch {
    pub arch: arch_tlbflush_unmap_batch,
    pub flush_required: bool_,
    pub writable: bool_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct task_io_accounting {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct posix_cputimer_base {
    pub nextevt: u64_,
    pub tqhead: timerqueue_head,
}
impl Default for posix_cputimer_base {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct posix_cputimers {
    pub bases: [posix_cputimer_base; 3usize],
    pub timers_active: core::ffi::c_uint,
    pub expiry_active: core::ffi::c_uint,
}
impl Default for posix_cputimers {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct posix_cputimers_work {
    pub work: callback_head,
    pub mutex: mutex,
    pub scheduled: core::ffi::c_uint,
}
impl Default for posix_cputimers_work {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const rseq_cpu_id_state_RSEQ_CPU_ID_UNINITIALIZED: rseq_cpu_id_state = -1;
pub const rseq_cpu_id_state_RSEQ_CPU_ID_REGISTRATION_FAILED: rseq_cpu_id_state = -2;
pub type rseq_cpu_id_state = core::ffi::c_int;
pub const rseq_flags_RSEQ_FLAG_UNREGISTER: rseq_flags = 1;
pub type rseq_flags = core::ffi::c_uint;
pub const rseq_cs_flags_bit_RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT: rseq_cs_flags_bit = 0;
pub const rseq_cs_flags_bit_RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT: rseq_cs_flags_bit = 1;
pub const rseq_cs_flags_bit_RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT: rseq_cs_flags_bit = 2;
pub type rseq_cs_flags_bit = core::ffi::c_uint;
pub const rseq_cs_flags_RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT: rseq_cs_flags = 1;
pub const rseq_cs_flags_RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL: rseq_cs_flags = 2;
pub const rseq_cs_flags_RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE: rseq_cs_flags = 4;
pub type rseq_cs_flags = core::ffi::c_uint;
#[repr(C)]
#[repr(align(32))]
#[derive(Default, Copy, Clone)]
pub struct rseq_cs {
    pub version: __u32,
    pub flags: __u32,
    pub start_ip: __u64,
    pub post_commit_offset: __u64,
    pub abort_ip: __u64,
}
#[repr(C)]
#[repr(align(32))]
#[derive(Default)]
pub struct rseq {
    pub cpu_id_start: __u32,
    pub cpu_id: __u32,
    pub rseq_cs: __u64,
    pub flags: __u32,
    pub node_id: __u32,
    pub mm_cid: __u32,
    pub end: __IncompleteArrayField<core::ffi::c_char>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct seqcount {
    pub sequence: core::ffi::c_uint,
}
pub type seqcount_t = seqcount;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct seqcount_raw_spinlock {
    pub seqcount: seqcount_t,
}
pub type seqcount_raw_spinlock_t = seqcount_raw_spinlock;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct seqcount_spinlock {
    pub seqcount: seqcount_t,
}
pub type seqcount_spinlock_t = seqcount_spinlock;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct seqcount_rwlock {
    pub seqcount: seqcount_t,
}
pub type seqcount_rwlock_t = seqcount_rwlock;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct seqcount_mutex {
    pub seqcount: seqcount_t,
}
pub type seqcount_mutex_t = seqcount_mutex;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct seqlock_t {
    pub seqcount: seqcount_spinlock_t,
    pub lock: spinlock_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kuid_t {
    pub val: uid_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kgid_t {
    pub val: gid_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct audit_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bio_list {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct blk_plug {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_local_storage {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_run_ctx {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct capture_control {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cfs_rq {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fs_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct futex_pi_state {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_uring_task {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mempolicy {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nameidata {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nsproxy {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct perf_event_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pipe_inode_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rcu_node {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct reclaim_state {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct robust_list_head {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct root_domain {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rq {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sched_attr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct seq_file {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct task_delay_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct task_group {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user_event_mm {
    _unused: [u8; 0],
}
pub const TASK_COMM_LEN: _bindgen_ty_11 = 16;
pub type _bindgen_ty_11 = core::ffi::c_uint;
extern "C" {
    pub fn sched_tick();
}
extern "C" {
    pub fn schedule_timeout(timeout: core::ffi::c_long) -> core::ffi::c_long;
}
extern "C" {
    pub fn schedule_timeout_interruptible(timeout: core::ffi::c_long) -> core::ffi::c_long;
}
extern "C" {
    pub fn schedule_timeout_killable(timeout: core::ffi::c_long) -> core::ffi::c_long;
}
extern "C" {
    pub fn schedule_timeout_uninterruptible(timeout: core::ffi::c_long) -> core::ffi::c_long;
}
extern "C" {
    pub fn schedule_timeout_idle(timeout: core::ffi::c_long) -> core::ffi::c_long;
}
extern "C" {
    pub fn schedule();
}
extern "C" {
    pub fn schedule_preempt_disabled();
}
extern "C" {
    pub fn preempt_schedule_irq();
}
extern "C" {
    pub fn io_schedule_prepare() -> core::ffi::c_int;
}
extern "C" {
    pub fn io_schedule_finish(token: core::ffi::c_int);
}
extern "C" {
    pub fn io_schedule_timeout(timeout: core::ffi::c_long) -> core::ffi::c_long;
}
extern "C" {
    pub fn io_schedule();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct prev_cputime {
    pub utime: u64_,
    pub stime: u64_,
    pub lock: raw_spinlock_t,
}
impl Default for prev_cputime {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const vtime_state_VTIME_INACTIVE: vtime_state = 0;
pub const vtime_state_VTIME_IDLE: vtime_state = 1;
pub const vtime_state_VTIME_SYS: vtime_state = 2;
pub const vtime_state_VTIME_USER: vtime_state = 3;
pub const vtime_state_VTIME_GUEST: vtime_state = 4;
pub type vtime_state = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vtime {
    pub seqcount: seqcount_t,
    pub starttime: core::ffi::c_ulonglong,
    pub state: vtime_state,
    pub cpu: core::ffi::c_uint,
    pub utime: u64_,
    pub stime: u64_,
    pub gtime: u64_,
}
impl Default for vtime {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const uclamp_id_UCLAMP_MIN: uclamp_id = 0;
pub const uclamp_id_UCLAMP_MAX: uclamp_id = 1;
pub const uclamp_id_UCLAMP_CNT: uclamp_id = 2;
pub type uclamp_id = core::ffi::c_uint;
extern "C" {
    pub static mut def_root_domain: root_domain;
}
extern "C" {
    pub static mut sched_domains_mutex: mutex;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: core::ffi::c_int,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sched_info {}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct load_weight {
    pub weight: core::ffi::c_ulong,
    pub inv_weight: u32_,
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct sched_avg {
    pub last_update_time: u64_,
    pub load_sum: u64_,
    pub runnable_sum: u64_,
    pub util_sum: u32_,
    pub period_contrib: u32_,
    pub load_avg: core::ffi::c_ulong,
    pub runnable_avg: core::ffi::c_ulong,
    pub util_avg: core::ffi::c_ulong,
    pub util_est: core::ffi::c_uint,
}
impl Default for sched_avg {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sched_statistics {}
impl Default for sched_statistics {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct sched_entity {
    pub load: load_weight,
    pub run_node: rb_node,
    pub deadline: u64_,
    pub min_vruntime: u64_,
    pub group_node: list_head,
    pub on_rq: core::ffi::c_uint,
    pub exec_start: u64_,
    pub sum_exec_runtime: u64_,
    pub prev_sum_exec_runtime: u64_,
    pub vruntime: u64_,
    pub vlag: s64,
    pub slice: u64_,
    pub nr_migrations: u64_,
    pub __bindgen_padding_0: [u64; 7usize],
    pub avg: sched_avg,
}
impl Default for sched_entity {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sched_rt_entity {
    pub run_list: list_head,
    pub timeout: core::ffi::c_ulong,
    pub watchdog_stamp: core::ffi::c_ulong,
    pub time_slice: core::ffi::c_uint,
    pub on_rq: core::ffi::c_ushort,
    pub on_list: core::ffi::c_ushort,
    pub back: *mut sched_rt_entity,
}
impl Default for sched_rt_entity {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type dl_server_has_tasks_f =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut sched_dl_entity) -> bool_>;
pub type dl_server_pick_f =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut sched_dl_entity) -> *mut task_struct>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sched_dl_entity {
    pub rb_node: rb_node,
    pub dl_runtime: u64_,
    pub dl_deadline: u64_,
    pub dl_period: u64_,
    pub dl_bw: u64_,
    pub dl_density: u64_,
    pub runtime: s64,
    pub deadline: u64_,
    pub flags: core::ffi::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub dl_timer: hrtimer,
    pub inactive_timer: hrtimer,
    pub rq: *mut rq,
    pub server_has_tasks: dl_server_has_tasks_f,
    pub server_pick: dl_server_pick_f,
    pub pi_se: *mut sched_dl_entity,
}
impl Default for sched_dl_entity {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sched_dl_entity {
    #[inline]
    pub fn dl_throttled(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dl_throttled(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dl_yielded(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dl_yielded(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dl_non_contending(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dl_non_contending(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dl_overrun(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dl_overrun(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dl_server(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dl_server(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dl_throttled: core::ffi::c_uint,
        dl_yielded: core::ffi::c_uint,
        dl_non_contending: core::ffi::c_uint,
        dl_overrun: core::ffi::c_uint,
        dl_server: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dl_throttled: u32 = unsafe { ::core::mem::transmute(dl_throttled) };
            dl_throttled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dl_yielded: u32 = unsafe { ::core::mem::transmute(dl_yielded) };
            dl_yielded as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let dl_non_contending: u32 = unsafe { ::core::mem::transmute(dl_non_contending) };
            dl_non_contending as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let dl_overrun: u32 = unsafe { ::core::mem::transmute(dl_overrun) };
            dl_overrun as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let dl_server: u32 = unsafe { ::core::mem::transmute(dl_server) };
            dl_server as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rcu_special {
    pub b: rcu_special__bindgen_ty_1,
    pub s: u32_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct rcu_special__bindgen_ty_1 {
    pub blocked: u8_,
    pub need_qs: u8_,
    pub exp_hint: u8_,
    pub need_mb: u8_,
}
impl Default for rcu_special {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const perf_event_task_context_perf_invalid_context: perf_event_task_context = -1;
pub const perf_event_task_context_perf_hw_context: perf_event_task_context = 0;
pub const perf_event_task_context_perf_sw_context: perf_event_task_context = 1;
pub const perf_event_task_context_perf_nr_task_contexts: perf_event_task_context = 2;
pub type perf_event_task_context = core::ffi::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wake_q_node {
    pub next: *mut wake_q_node,
}
impl Default for wake_q_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kmap_ctrl {}
#[repr(C)]
#[repr(align(64))]
pub struct task_struct {
    pub thread_info: thread_info,
    pub __state: core::ffi::c_uint,
    pub saved_state: core::ffi::c_uint,
    pub stack: *mut core::ffi::c_void,
    pub usage: refcount_t,
    pub flags: core::ffi::c_uint,
    pub ptrace: core::ffi::c_uint,
    pub on_cpu: core::ffi::c_int,
    pub wake_entry: __call_single_node,
    pub wakee_flips: core::ffi::c_uint,
    pub wakee_flip_decay_ts: core::ffi::c_ulong,
    pub last_wakee: *mut task_struct,
    pub recent_used_cpu: core::ffi::c_int,
    pub wake_cpu: core::ffi::c_int,
    pub on_rq: core::ffi::c_int,
    pub prio: core::ffi::c_int,
    pub static_prio: core::ffi::c_int,
    pub normal_prio: core::ffi::c_int,
    pub rt_priority: core::ffi::c_uint,
    pub __bindgen_padding_0: [u64; 0usize],
    pub se: sched_entity,
    pub rt: sched_rt_entity,
    pub dl: sched_dl_entity,
    pub dl_server: *mut sched_dl_entity,
    pub sched_class: *mut sched_class,
    pub __bindgen_padding_1: u64,
    pub stats: sched_statistics,
    pub policy: core::ffi::c_uint,
    pub max_allowed_capacity: core::ffi::c_ulong,
    pub nr_cpus_allowed: core::ffi::c_int,
    pub cpus_ptr: *const cpumask_t,
    pub user_cpus_ptr: *mut cpumask_t,
    pub cpus_mask: cpumask_t,
    pub migration_pending: *mut core::ffi::c_void,
    pub migration_disabled: core::ffi::c_ushort,
    pub migration_flags: core::ffi::c_ushort,
    pub sched_info: sched_info,
    pub tasks: list_head,
    pub pushable_tasks: plist_node,
    pub pushable_dl_tasks: rb_node,
    pub mm: *mut mm_struct,
    pub active_mm: *mut mm_struct,
    pub faults_disabled_mapping: *mut address_space,
    pub exit_state: core::ffi::c_int,
    pub exit_code: core::ffi::c_int,
    pub exit_signal: core::ffi::c_int,
    pub pdeath_signal: core::ffi::c_int,
    pub jobctl: core::ffi::c_ulong,
    pub personality: core::ffi::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 5usize]>,
    pub atomic_flags: core::ffi::c_ulong,
    pub restart_block: restart_block,
    pub pid: pid_t,
    pub tgid: pid_t,
    pub real_parent: *mut task_struct,
    pub parent: *mut task_struct,
    pub children: list_head,
    pub sibling: list_head,
    pub group_leader: *mut task_struct,
    pub ptraced: list_head,
    pub ptrace_entry: list_head,
    pub thread_pid: *mut pid,
    pub pid_links: [hlist_node; 4usize],
    pub thread_node: list_head,
    pub vfork_done: *mut completion,
    pub set_child_tid: *mut core::ffi::c_int,
    pub clear_child_tid: *mut core::ffi::c_int,
    pub worker_private: *mut core::ffi::c_void,
    pub utime: u64_,
    pub stime: u64_,
    pub gtime: u64_,
    pub prev_cputime: prev_cputime,
    pub nvcsw: core::ffi::c_ulong,
    pub nivcsw: core::ffi::c_ulong,
    pub start_time: u64_,
    pub start_boottime: u64_,
    pub min_flt: core::ffi::c_ulong,
    pub maj_flt: core::ffi::c_ulong,
    pub posix_cputimers: posix_cputimers,
    pub posix_cputimers_work: posix_cputimers_work,
    pub ptracer_cred: *const cred,
    pub real_cred: *const cred,
    pub cred: *const cred,
    pub comm: [core::ffi::c_char; 16usize],
    pub nameidata: *mut nameidata,
    pub fs: *mut fs_struct,
    pub files: *mut files_struct,
    pub io_uring: *mut io_uring_task,
    pub nsproxy: *mut nsproxy,
    pub signal: *mut signal_struct,
    pub sighand: *mut sighand_struct,
    pub blocked: sigset_t,
    pub real_blocked: sigset_t,
    pub saved_sigmask: sigset_t,
    pub pending: sigpending,
    pub sas_ss_sp: core::ffi::c_ulong,
    pub sas_ss_size: usize,
    pub sas_ss_flags: core::ffi::c_uint,
    pub task_works: *mut callback_head,
    pub seccomp: seccomp,
    pub syscall_dispatch: syscall_user_dispatch,
    pub parent_exec_id: u64_,
    pub self_exec_id: u64_,
    pub alloc_lock: spinlock_t,
    pub pi_lock: raw_spinlock_t,
    pub wake_q: wake_q_node,
    pub pi_waiters: rb_root_cached,
    pub pi_top_task: *mut task_struct,
    pub pi_blocked_on: *mut rt_mutex_waiter,
    pub journal_info: *mut core::ffi::c_void,
    pub bio_list: *mut bio_list,
    pub plug: *mut blk_plug,
    pub reclaim_state: *mut reclaim_state,
    pub io_context: *mut io_context,
    pub ptrace_message: core::ffi::c_ulong,
    pub last_siginfo: *mut kernel_siginfo_t,
    pub ioac: task_io_accounting,
    pub robust_list: *mut robust_list_head,
    pub pi_state_list: list_head,
    pub pi_state_cache: *mut futex_pi_state,
    pub futex_exit_mutex: mutex,
    pub futex_state: core::ffi::c_uint,
    pub perf_event_ctxp: *mut perf_event_context,
    pub perf_event_mutex: mutex,
    pub perf_event_list: list_head,
    pub rseq: *mut rseq,
    pub rseq_len: u32_,
    pub rseq_sig: u32_,
    pub rseq_event_mask: core::ffi::c_ulong,
    pub tlb_ubc: tlbflush_unmap_batch,
    pub splice_pipe: *mut pipe_inode_info,
    pub task_frag: page_frag,
    pub nr_dirtied: core::ffi::c_int,
    pub nr_dirtied_pause: core::ffi::c_int,
    pub dirty_paused_when: core::ffi::c_ulong,
    pub timer_slack_ns: u64_,
    pub default_timer_slack_ns: u64_,
    pub kmap_ctrl: kmap_ctrl,
    pub rcu: callback_head,
    pub rcu_users: refcount_t,
    pub pagefault_disabled: core::ffi::c_int,
    pub oom_reaper_list: *mut task_struct,
    pub oom_reaper_timer: timer_list,
    pub stack_vm_area: *mut vm_struct,
    pub stack_refcount: refcount_t,
    pub l1d_flush_kill: callback_head,
    pub __bindgen_padding_2: [u64; 4usize],
    pub thread: thread_struct,
}
impl Default for task_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl task_struct {
    #[inline]
    pub fn sched_reset_on_fork(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sched_reset_on_fork(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sched_contributes_to_load(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sched_contributes_to_load(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sched_migrated(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sched_migrated(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sched_remote_wakeup(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sched_remote_wakeup(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sched_rt_mutex(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sched_rt_mutex(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_execve(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_execve(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_iowait(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(35usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_iowait(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(35usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn restore_sigmask(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(36usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_restore_sigmask(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(36usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_eventfd(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(37usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_eventfd(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(37usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reported_split_lock(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(38usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reported_split_lock(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(38usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sched_reset_on_fork: core::ffi::c_uint,
        sched_contributes_to_load: core::ffi::c_uint,
        sched_migrated: core::ffi::c_uint,
        sched_remote_wakeup: core::ffi::c_uint,
        sched_rt_mutex: core::ffi::c_uint,
        in_execve: core::ffi::c_uint,
        in_iowait: core::ffi::c_uint,
        restore_sigmask: core::ffi::c_uint,
        in_eventfd: core::ffi::c_uint,
        reported_split_lock: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 5usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 5usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let sched_reset_on_fork: u32 = unsafe { ::core::mem::transmute(sched_reset_on_fork) };
            sched_reset_on_fork as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let sched_contributes_to_load: u32 =
                unsafe { ::core::mem::transmute(sched_contributes_to_load) };
            sched_contributes_to_load as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let sched_migrated: u32 = unsafe { ::core::mem::transmute(sched_migrated) };
            sched_migrated as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let sched_remote_wakeup: u32 = unsafe { ::core::mem::transmute(sched_remote_wakeup) };
            sched_remote_wakeup as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let sched_rt_mutex: u32 = unsafe { ::core::mem::transmute(sched_rt_mutex) };
            sched_rt_mutex as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let in_execve: u32 = unsafe { ::core::mem::transmute(in_execve) };
            in_execve as u64
        });
        __bindgen_bitfield_unit.set(35usize, 1u8, {
            let in_iowait: u32 = unsafe { ::core::mem::transmute(in_iowait) };
            in_iowait as u64
        });
        __bindgen_bitfield_unit.set(36usize, 1u8, {
            let restore_sigmask: u32 = unsafe { ::core::mem::transmute(restore_sigmask) };
            restore_sigmask as u64
        });
        __bindgen_bitfield_unit.set(37usize, 1u8, {
            let in_eventfd: u32 = unsafe { ::core::mem::transmute(in_eventfd) };
            in_eventfd as u64
        });
        __bindgen_bitfield_unit.set(38usize, 1u8, {
            let reported_split_lock: u32 = unsafe { ::core::mem::transmute(reported_split_lock) };
            reported_split_lock as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut cad_pid: *mut pid;
}
extern "C" {
    pub fn cpuset_cpumask_can_shrink(
        cur: *const cpumask,
        trial: *const cpumask,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn task_can_attach(p: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn dl_bw_alloc(cpu: core::ffi::c_int, dl_bw: u64_) -> core::ffi::c_int;
}
extern "C" {
    pub fn dl_bw_free(cpu: core::ffi::c_int, dl_bw: u64_);
}
extern "C" {
    pub fn do_set_cpus_allowed(p: *mut task_struct, new_mask: *const cpumask);
}
extern "C" {
    pub fn set_cpus_allowed_ptr(p: *mut task_struct, new_mask: *const cpumask) -> core::ffi::c_int;
}
extern "C" {
    pub fn dup_user_cpus_ptr(
        dst: *mut task_struct,
        src: *mut task_struct,
        node: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn release_user_cpus_ptr(p: *mut task_struct);
}
extern "C" {
    pub fn dl_task_check_affinity(p: *mut task_struct, mask: *const cpumask) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_compatible_cpus_allowed_ptr(p: *mut task_struct);
}
extern "C" {
    pub fn relax_compatible_cpus_allowed_ptr(p: *mut task_struct);
}
extern "C" {
    pub fn yield_to(p: *mut task_struct, preempt: bool_) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_user_nice(p: *mut task_struct, nice: core::ffi::c_long);
}
extern "C" {
    pub fn task_prio(p: *const task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn can_nice(p: *const task_struct, nice: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn task_curr(p: *const task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn idle_cpu(cpu: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn available_idle_cpu(cpu: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        arg1: *mut task_struct,
        arg2: core::ffi::c_int,
        arg3: *const sched_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sched_setscheduler_nocheck(
        arg1: *mut task_struct,
        arg2: core::ffi::c_int,
        arg3: *const sched_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sched_set_fifo(p: *mut task_struct);
}
extern "C" {
    pub fn sched_set_fifo_low(p: *mut task_struct);
}
extern "C" {
    pub fn sched_set_normal(p: *mut task_struct, nice: core::ffi::c_int);
}
extern "C" {
    pub fn sched_setattr(arg1: *mut task_struct, arg2: *const sched_attr) -> core::ffi::c_int;
}
extern "C" {
    pub fn sched_setattr_nocheck(
        arg1: *mut task_struct,
        arg2: *const sched_attr,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn idle_task(cpu: core::ffi::c_int) -> *mut task_struct;
}
extern "C" {
    pub fn curr_task(cpu: core::ffi::c_int) -> *mut task_struct;
}
extern "C" {
    pub fn ia64_set_curr_task(cpu: core::ffi::c_int, p: *mut task_struct);
}
extern "C" {
    #[link_name = "\u{1}yield"]
    pub fn yield_();
}
#[repr(C)]
#[repr(align(64))]
pub struct thread_union {
    pub task: __BindgenUnionField<task_struct>,
    pub stack: __BindgenUnionField<[core::ffi::c_ulong; 2048usize]>,
    pub bindgen_union_field: [u8; 16384usize],
}
impl Default for thread_union {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut init_stack: [core::ffi::c_ulong; 2048usize];
}
extern "C" {
    pub fn find_task_by_vpid(nr: pid_t) -> *mut task_struct;
}
extern "C" {
    pub fn find_task_by_pid_ns(nr: pid_t, ns: *mut pid_namespace) -> *mut task_struct;
}
extern "C" {
    pub fn find_get_task_by_vpid(nr: pid_t) -> *mut task_struct;
}
extern "C" {
    pub fn wake_up_state(tsk: *mut task_struct, state: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn wake_up_process(tsk: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn wake_up_new_task(tsk: *mut task_struct);
}
extern "C" {
    pub fn kick_process(tsk: *mut task_struct);
}
extern "C" {
    pub fn __set_task_comm(tsk: *mut task_struct, from: *const core::ffi::c_char, exec: bool_);
}
extern "C" {
    pub fn __get_task_comm(
        to: *mut core::ffi::c_char,
        len: usize,
        tsk: *mut task_struct,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn wait_task_inactive(
        arg1: *mut task_struct,
        match_state: core::ffi::c_uint,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __cond_resched() -> core::ffi::c_int;
}
extern "C" {
    pub fn __cond_resched_lock(lock: *mut spinlock_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn __cond_resched_rwlock_read(lock: *mut rwlock_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn __cond_resched_rwlock_write(lock: *mut rwlock_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_task_cpu(p: *mut task_struct, cpu: core::ffi::c_uint);
}
extern "C" {
    pub fn sched_task_on_rq(p: *mut task_struct) -> bool_;
}
extern "C" {
    pub fn get_wchan(p: *mut task_struct) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn cpu_curr_snapshot(cpu: core::ffi::c_int) -> *mut task_struct;
}
extern "C" {
    pub fn sched_setaffinity(pid: pid_t, new_mask: *const cpumask) -> core::ffi::c_long;
}
extern "C" {
    pub fn sched_getaffinity(pid: pid_t, mask: *mut cpumask) -> core::ffi::c_long;
}
extern "C" {
    pub fn sched_cpu_util(cpu: core::ffi::c_int) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn sched_set_stop_task(cpu: core::ffi::c_int, stop: *mut task_struct);
}
extern "C" {
    pub static mut pcpu_base_addr: *mut core::ffi::c_void;
}
extern "C" {
    pub static mut pcpu_unit_offsets: *const core::ffi::c_ulong;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pcpu_group_info {
    pub nr_units: core::ffi::c_int,
    pub base_offset: core::ffi::c_ulong,
    pub cpu_map: *mut core::ffi::c_uint,
}
impl Default for pcpu_group_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct pcpu_alloc_info {
    pub static_size: usize,
    pub reserved_size: usize,
    pub dyn_size: usize,
    pub unit_size: usize,
    pub atom_size: usize,
    pub alloc_size: usize,
    pub __ai_size: usize,
    pub nr_groups: core::ffi::c_int,
    pub groups: __IncompleteArrayField<pcpu_group_info>,
}
impl Default for pcpu_alloc_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const pcpu_fc_PCPU_FC_AUTO: pcpu_fc = 0;
pub const pcpu_fc_PCPU_FC_EMBED: pcpu_fc = 1;
pub const pcpu_fc_PCPU_FC_PAGE: pcpu_fc = 2;
pub const pcpu_fc_PCPU_FC_NR: pcpu_fc = 3;
pub type pcpu_fc = core::ffi::c_uint;
extern "C" {
    pub static pcpu_fc_names: [*const core::ffi::c_char; 3usize];
}
extern "C" {
    pub static mut pcpu_chosen_fc: pcpu_fc;
}
pub type pcpu_fc_cpu_to_node_fn_t =
    ::core::option::Option<unsafe extern "C" fn(cpu: core::ffi::c_int) -> core::ffi::c_int>;
pub type pcpu_fc_cpu_distance_fn_t = ::core::option::Option<
    unsafe extern "C" fn(from: core::ffi::c_uint, to: core::ffi::c_uint) -> core::ffi::c_int,
>;
extern "C" {
    pub fn pcpu_alloc_alloc_info(
        nr_groups: core::ffi::c_int,
        nr_units: core::ffi::c_int,
    ) -> *mut pcpu_alloc_info;
}
extern "C" {
    pub fn pcpu_free_alloc_info(ai: *mut pcpu_alloc_info);
}
extern "C" {
    pub fn pcpu_setup_first_chunk(ai: *const pcpu_alloc_info, base_addr: *mut core::ffi::c_void);
}
extern "C" {
    pub fn pcpu_embed_first_chunk(
        reserved_size: usize,
        dyn_size: usize,
        atom_size: usize,
        cpu_distance_fn: pcpu_fc_cpu_distance_fn_t,
        cpu_to_nd_fn: pcpu_fc_cpu_to_node_fn_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn pcpu_populate_pte(addr: core::ffi::c_ulong);
}
extern "C" {
    pub fn pcpu_page_first_chunk(
        reserved_size: usize,
        cpu_to_nd_fn: pcpu_fc_cpu_to_node_fn_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __is_kernel_percpu_address(
        addr: core::ffi::c_ulong,
        can_addr: *mut core::ffi::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn is_kernel_percpu_address(addr: core::ffi::c_ulong) -> bool_;
}
extern "C" {
    pub fn pcpu_alloc_noprof(
        size: usize,
        align: usize,
        reserved: bool_,
        gfp: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn pcpu_alloc_size(__pdata: *mut core::ffi::c_void) -> usize;
}
extern "C" {
    pub fn free_percpu(__pdata: *mut core::ffi::c_void);
}
extern "C" {
    pub fn per_cpu_ptr_to_phys(addr: *mut core::ffi::c_void) -> phys_addr_t;
}
extern "C" {
    pub fn pcpu_nr_pages() -> core::ffi::c_ulong;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct msr_info {
    pub msr_no: u32_,
    pub reg: msr,
    pub msrs: *mut msr,
    pub err: core::ffi::c_int,
}
impl Default for msr_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct msr_regs_info {
    pub regs: *mut u32_,
    pub err: core::ffi::c_int,
}
impl Default for msr_regs_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct saved_msr {
    pub valid: bool_,
    pub info: msr_info,
}
impl Default for saved_msr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct saved_msrs {
    pub num: core::ffi::c_uint,
    pub array: *mut saved_msr,
}
impl Default for saved_msrs {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct trace_print_flags {
    pub mask: core::ffi::c_ulong,
    pub name: *const core::ffi::c_char,
}
impl Default for trace_print_flags {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct trace_print_flags_u64 {
    pub mask: core::ffi::c_ulonglong,
    pub name: *const core::ffi::c_char,
}
impl Default for trace_print_flags_u64 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tracepoint_func {
    pub func: *mut core::ffi::c_void,
    pub data: *mut core::ffi::c_void,
    pub prio: core::ffi::c_int,
}
impl Default for tracepoint_func {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tracepoint {
    pub name: *const core::ffi::c_char,
    pub key: static_key,
    pub static_call_key: *mut static_call_key,
    pub static_call_tramp: *mut core::ffi::c_void,
    pub iterator: *mut core::ffi::c_void,
    pub probestub: *mut core::ffi::c_void,
    pub regfunc: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
    pub unregfunc: ::core::option::Option<unsafe extern "C" fn()>,
    pub funcs: *mut tracepoint_func,
}
impl Default for tracepoint {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type tracepoint_ptr_t = core::ffi::c_int;
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub struct bpf_raw_event_map {
    pub tp: *mut tracepoint,
    pub bpf_func: *mut core::ffi::c_void,
    pub num_args: u32_,
    pub writable_size: u32_,
}
impl Default for bpf_raw_event_map {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn rdmsr_safe_regs(regs: *mut u32_) -> core::ffi::c_int;
}
extern "C" {
    pub fn wrmsr_safe_regs(regs: *mut u32_) -> core::ffi::c_int;
}
extern "C" {
    pub fn msrs_alloc() -> *mut msr;
}
extern "C" {
    pub fn msrs_free(msrs: *mut msr);
}
extern "C" {
    pub fn msr_set_bit(msr: u32_, bit: u8_) -> core::ffi::c_int;
}
extern "C" {
    pub fn msr_clear_bit(msr: u32_, bit: u8_) -> core::ffi::c_int;
}
extern "C" {
    pub fn rdmsr_on_cpu(
        cpu: core::ffi::c_uint,
        msr_no: u32_,
        l: *mut u32_,
        h: *mut u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn wrmsr_on_cpu(cpu: core::ffi::c_uint, msr_no: u32_, l: u32_, h: u32_)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn rdmsrl_on_cpu(cpu: core::ffi::c_uint, msr_no: u32_, q: *mut u64_) -> core::ffi::c_int;
}
extern "C" {
    pub fn wrmsrl_on_cpu(cpu: core::ffi::c_uint, msr_no: u32_, q: u64_) -> core::ffi::c_int;
}
extern "C" {
    pub fn rdmsr_on_cpus(mask: *const cpumask, msr_no: u32_, msrs: *mut msr);
}
extern "C" {
    pub fn wrmsr_on_cpus(mask: *const cpumask, msr_no: u32_, msrs: *mut msr);
}
extern "C" {
    pub fn rdmsr_safe_on_cpu(
        cpu: core::ffi::c_uint,
        msr_no: u32_,
        l: *mut u32_,
        h: *mut u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn wrmsr_safe_on_cpu(
        cpu: core::ffi::c_uint,
        msr_no: u32_,
        l: u32_,
        h: u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn rdmsrl_safe_on_cpu(
        cpu: core::ffi::c_uint,
        msr_no: u32_,
        q: *mut u64_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn wrmsrl_safe_on_cpu(cpu: core::ffi::c_uint, msr_no: u32_, q: u64_) -> core::ffi::c_int;
}
extern "C" {
    pub fn rdmsr_safe_regs_on_cpu(cpu: core::ffi::c_uint, regs: *mut u32_) -> core::ffi::c_int;
}
extern "C" {
    pub fn wrmsr_safe_regs_on_cpu(cpu: core::ffi::c_uint, regs: *mut u32_) -> core::ffi::c_int;
}
pub type cycles_t = core::ffi::c_ulonglong;
extern "C" {
    pub static mut cpu_khz: core::ffi::c_uint;
}
extern "C" {
    pub static mut tsc_khz: core::ffi::c_uint;
}
extern "C" {
    pub fn disable_TSC();
}
extern "C" {
    pub fn convert_art_to_tsc(art: u64_) -> system_counterval_t;
}
extern "C" {
    pub fn convert_art_ns_to_tsc(art_ns: u64_) -> system_counterval_t;
}
extern "C" {
    pub fn tsc_early_init();
}
extern "C" {
    pub fn tsc_init();
}
extern "C" {
    pub fn mark_tsc_unstable(reason: *mut core::ffi::c_char);
}
extern "C" {
    pub fn unsynchronized_tsc() -> core::ffi::c_int;
}
extern "C" {
    pub fn check_tsc_unstable() -> core::ffi::c_int;
}
extern "C" {
    pub fn mark_tsc_async_resets(reason: *mut core::ffi::c_char);
}
extern "C" {
    pub fn native_calibrate_cpu_early() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn native_calibrate_tsc() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn native_sched_clock_from_tsc(tsc: u64_) -> core::ffi::c_ulonglong;
}
extern "C" {
    pub static mut tsc_clocksource_reliable: core::ffi::c_int;
}
extern "C" {
    pub static mut tsc_async_resets: bool_;
}
extern "C" {
    pub fn tsc_store_and_check_tsc_adjust(bootcpu: bool_) -> bool_;
}
extern "C" {
    pub fn tsc_verify_tsc_adjust(resume: bool_);
}
extern "C" {
    pub fn check_tsc_sync_target();
}
extern "C" {
    pub fn notsc_setup(arg1: *mut core::ffi::c_char) -> core::ffi::c_int;
}
extern "C" {
    pub fn tsc_save_sched_clock_state();
}
extern "C" {
    pub fn tsc_restore_sched_clock_state();
}
extern "C" {
    pub fn cpu_khz_from_msr() -> core::ffi::c_ulong;
}
extern "C" {
    pub static mut tick_usec: core::ffi::c_ulong;
}
extern "C" {
    pub static mut tick_nsec: core::ffi::c_ulong;
}
extern "C" {
    pub fn do_adjtimex(arg1: *mut __kernel_timex) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_clock_adjtime(which_clock: clockid_t, ktx: *mut __kernel_timex) -> core::ffi::c_int;
}
extern "C" {
    pub fn hardpps(arg1: *const timespec64, arg2: *const timespec64);
}
extern "C" {
    pub fn read_current_timer(timer_val: *mut core::ffi::c_ulong) -> core::ffi::c_int;
}
pub type old_time32_t = s32;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct old_timespec32 {
    pub tv_sec: old_time32_t,
    pub tv_nsec: s32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct old_timeval32 {
    pub tv_sec: old_time32_t,
    pub tv_usec: s32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct old_itimerspec32 {
    pub it_interval: old_timespec32,
    pub it_value: old_timespec32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct old_utimbuf32 {
    pub actime: old_time32_t,
    pub modtime: old_time32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct old_timex32 {
    pub modes: u32_,
    pub offset: s32,
    pub freq: s32,
    pub maxerror: s32,
    pub esterror: s32,
    pub status: s32,
    pub constant: s32,
    pub precision: s32,
    pub tolerance: s32,
    pub time: old_timeval32,
    pub tick: s32,
    pub ppsfreq: s32,
    pub jitter: s32,
    pub shift: s32,
    pub stabil: s32,
    pub jitcnt: s32,
    pub calcnt: s32,
    pub errcnt: s32,
    pub stbcnt: s32,
    pub tai: s32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 44usize]>,
}
impl Default for old_timex32 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn get_old_timespec32(
        arg1: *mut timespec64,
        arg2: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn put_old_timespec32(
        arg1: *const timespec64,
        arg2: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_old_itimerspec32(
        its: *mut itimerspec64,
        uits: *const old_itimerspec32,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn put_old_itimerspec32(
        its: *const itimerspec64,
        uits: *mut old_itimerspec32,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_old_timex32(arg1: *mut __kernel_timex, arg2: *const old_timex32)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn put_old_timex32(arg1: *mut old_timex32, arg2: *const __kernel_timex)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn ns_to_kernel_old_timeval(nsec: s64) -> __kernel_old_timeval;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct timens_offset {
    pub sec: s64,
    pub nsec: u64_,
}
extern "C" {
    pub static mut overflowuid: core::ffi::c_int;
}
extern "C" {
    pub static mut overflowgid: core::ffi::c_int;
}
extern "C" {
    pub fn __bad_uid();
}
extern "C" {
    pub fn __bad_gid();
}
extern "C" {
    pub static mut fs_overflowuid: core::ffi::c_int;
}
extern "C" {
    pub static mut fs_overflowgid: core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user_namespace {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut init_user_ns: user_namespace;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uid_gid_map {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kstat {
    pub result_mask: u32_,
    pub mode: umode_t,
    pub nlink: core::ffi::c_uint,
    pub blksize: u32,
    pub attributes: u64_,
    pub attributes_mask: u64_,
    pub ino: u64_,
    pub dev: dev_t,
    pub rdev: dev_t,
    pub uid: kuid_t,
    pub gid: kgid_t,
    pub size: loff_t,
    pub atime: timespec64,
    pub mtime: timespec64,
    pub ctime: timespec64,
    pub btime: timespec64,
    pub blocks: u64_,
    pub mnt_id: u64_,
    pub dio_mem_align: u32_,
    pub dio_offset_align: u32_,
    pub change_cookie: u64_,
    pub subvol: u64_,
}
extern "C" {
    pub fn build_id_parse(
        vma: *mut vm_area_struct,
        build_id: *mut core::ffi::c_uchar,
        size: *mut __u32,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn build_id_parse_buf(
        buf: *const core::ffi::c_void,
        build_id: *mut core::ffi::c_uchar,
        buf_size: u32_,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hlist_nulls_head {
    pub first: *mut hlist_nulls_node,
}
impl Default for hlist_nulls_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hlist_nulls_node {
    pub next: *mut hlist_nulls_node,
    pub pprev: *mut *mut hlist_nulls_node,
}
impl Default for hlist_nulls_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type wait_queue_entry_t = wait_queue_entry;
pub type wait_queue_func_t = ::core::option::Option<
    unsafe extern "C" fn(
        wq_entry: *mut wait_queue_entry,
        mode: core::ffi::c_uint,
        flags: core::ffi::c_int,
        key: *mut core::ffi::c_void,
    ) -> core::ffi::c_int,
>;
extern "C" {
    pub fn default_wake_function(
        wq_entry: *mut wait_queue_entry,
        mode: core::ffi::c_uint,
        flags: core::ffi::c_int,
        key: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wait_queue_entry {
    pub flags: core::ffi::c_uint,
    pub private: *mut core::ffi::c_void,
    pub func: wait_queue_func_t,
    pub entry: list_head,
}
impl Default for wait_queue_entry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wait_queue_head {
    pub lock: spinlock_t,
    pub head: list_head,
}
impl Default for wait_queue_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type wait_queue_head_t = wait_queue_head;
extern "C" {
    pub fn __init_waitqueue_head(
        wq_head: *mut wait_queue_head,
        name: *const core::ffi::c_char,
        arg1: *mut lock_class_key,
    );
}
extern "C" {
    pub fn add_wait_queue(wq_head: *mut wait_queue_head, wq_entry: *mut wait_queue_entry);
}
extern "C" {
    pub fn add_wait_queue_exclusive(wq_head: *mut wait_queue_head, wq_entry: *mut wait_queue_entry);
}
extern "C" {
    pub fn add_wait_queue_priority(wq_head: *mut wait_queue_head, wq_entry: *mut wait_queue_entry);
}
extern "C" {
    pub fn remove_wait_queue(wq_head: *mut wait_queue_head, wq_entry: *mut wait_queue_entry);
}
extern "C" {
    pub fn __wake_up(
        wq_head: *mut wait_queue_head,
        mode: core::ffi::c_uint,
        nr: core::ffi::c_int,
        key: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __wake_up_on_current_cpu(
        wq_head: *mut wait_queue_head,
        mode: core::ffi::c_uint,
        key: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn __wake_up_locked_key(
        wq_head: *mut wait_queue_head,
        mode: core::ffi::c_uint,
        key: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn __wake_up_sync_key(
        wq_head: *mut wait_queue_head,
        mode: core::ffi::c_uint,
        key: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn __wake_up_locked_sync_key(
        wq_head: *mut wait_queue_head,
        mode: core::ffi::c_uint,
        key: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn __wake_up_locked(
        wq_head: *mut wait_queue_head,
        mode: core::ffi::c_uint,
        nr: core::ffi::c_int,
    );
}
extern "C" {
    pub fn __wake_up_sync(wq_head: *mut wait_queue_head, mode: core::ffi::c_uint);
}
extern "C" {
    pub fn __wake_up_pollfree(wq_head: *mut wait_queue_head);
}
extern "C" {
    pub fn init_wait_entry(wq_entry: *mut wait_queue_entry, flags: core::ffi::c_int);
}
extern "C" {
    pub fn do_wait_intr(
        arg1: *mut wait_queue_head_t,
        arg2: *mut wait_queue_entry_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_wait_intr_irq(
        arg1: *mut wait_queue_head_t,
        arg2: *mut wait_queue_entry_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn prepare_to_wait(
        wq_head: *mut wait_queue_head,
        wq_entry: *mut wait_queue_entry,
        state: core::ffi::c_int,
    );
}
extern "C" {
    pub fn prepare_to_wait_exclusive(
        wq_head: *mut wait_queue_head,
        wq_entry: *mut wait_queue_entry,
        state: core::ffi::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn prepare_to_wait_event(
        wq_head: *mut wait_queue_head,
        wq_entry: *mut wait_queue_entry,
        state: core::ffi::c_int,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn finish_wait(wq_head: *mut wait_queue_head, wq_entry: *mut wait_queue_entry);
}
extern "C" {
    pub fn wait_woken(
        wq_entry: *mut wait_queue_entry,
        mode: core::ffi::c_uint,
        timeout: core::ffi::c_long,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn woken_wake_function(
        wq_entry: *mut wait_queue_entry,
        mode: core::ffi::c_uint,
        sync: core::ffi::c_int,
        key: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn autoremove_wake_function(
        wq_entry: *mut wait_queue_entry,
        mode: core::ffi::c_uint,
        sync: core::ffi::c_int,
        key: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
pub type task_call_f = ::core::option::Option<
    unsafe extern "C" fn(p: *mut task_struct, arg: *mut core::ffi::c_void) -> core::ffi::c_int,
>;
extern "C" {
    pub fn task_call_func(
        p: *mut task_struct,
        func: task_call_f,
        arg: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static mut debug_locks: core::ffi::c_int;
}
extern "C" {
    pub static mut debug_locks_silent: core::ffi::c_int;
}
extern "C" {
    pub fn debug_locks_off() -> core::ffi::c_int;
}
extern "C" {
    pub fn __mutex_init(lock: *mut mutex, name: *const core::ffi::c_char, key: *mut lock_class_key);
}
extern "C" {
    pub fn mutex_is_locked(lock: *mut mutex) -> bool_;
}
extern "C" {
    pub fn mutex_lock(lock: *mut mutex);
}
extern "C" {
    pub fn mutex_lock_interruptible(lock: *mut mutex) -> core::ffi::c_int;
}
extern "C" {
    pub fn mutex_lock_killable(lock: *mut mutex) -> core::ffi::c_int;
}
extern "C" {
    pub fn mutex_lock_io(lock: *mut mutex);
}
extern "C" {
    pub fn mutex_trylock(lock: *mut mutex) -> core::ffi::c_int;
}
extern "C" {
    pub fn mutex_unlock(lock: *mut mutex);
}
extern "C" {
    pub fn atomic_dec_and_mutex_lock(cnt: *mut atomic_t, lock: *mut mutex) -> core::ffi::c_int;
}
pub type class_mutex_t = *mut mutex;
pub type class_mutex_try_t = class_mutex_t;
pub type class_mutex_intr_t = class_mutex_t;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct seqcount_latch_t {
    pub seqcount: seqcount_t,
}
extern "C" {
    pub static mut nr_irqs: core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct irq_desc {
    _unused: [u8; 0],
}
extern "C" {
    pub fn irq_to_desc(irq: core::ffi::c_uint) -> *mut irq_desc;
}
extern "C" {
    pub fn irq_get_next_irq(offset: core::ffi::c_uint) -> core::ffi::c_uint;
}
#[repr(C)]
#[derive(Default)]
pub struct rand_pool_info {
    pub entropy_count: core::ffi::c_int,
    pub buf_size: core::ffi::c_int,
    pub buf: __IncompleteArrayField<__u32>,
}
extern "C" {
    pub fn add_device_randomness(buf: *const core::ffi::c_void, len: usize);
}
extern "C" {
    pub fn add_bootloader_randomness(buf: *const core::ffi::c_void, len: usize);
}
extern "C" {
    pub fn add_input_randomness(
        type_: core::ffi::c_uint,
        code: core::ffi::c_uint,
        value: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn add_interrupt_randomness(irq: core::ffi::c_int);
}
extern "C" {
    pub fn add_hwgenerator_randomness(
        buf: *const core::ffi::c_void,
        len: usize,
        entropy: usize,
        sleep_after: bool_,
    );
}
extern "C" {
    pub fn get_random_bytes(buf: *mut core::ffi::c_void, len: usize);
}
extern "C" {
    pub fn get_random_u8() -> u8_;
}
extern "C" {
    pub fn get_random_u16() -> u16_;
}
extern "C" {
    pub fn get_random_u32() -> u32_;
}
extern "C" {
    pub fn get_random_u64() -> u64_;
}
extern "C" {
    pub fn __get_random_u32_below(ceil: u32_) -> u32_;
}
extern "C" {
    pub fn random_init_early(command_line: *const core::ffi::c_char);
}
extern "C" {
    pub fn random_init();
}
extern "C" {
    pub fn rng_is_initialized() -> bool_;
}
extern "C" {
    pub fn wait_for_random_bytes() -> core::ffi::c_int;
}
extern "C" {
    pub fn execute_with_initialized_rng(nb: *mut notifier_block) -> core::ffi::c_int;
}
extern "C" {
    pub fn __do_once_start(done: *mut bool_, flags: *mut core::ffi::c_ulong) -> bool_;
}
extern "C" {
    pub fn __do_once_done(
        done: *mut bool_,
        once_key: *mut static_key_true,
        flags: *mut core::ffi::c_ulong,
        mod_: *mut module,
    );
}
extern "C" {
    pub fn __do_once_sleepable_start(done: *mut bool_) -> bool_;
}
extern "C" {
    pub fn __do_once_sleepable_done(
        done: *mut bool_,
        once_key: *mut static_key_true,
        mod_: *mut module,
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct rnd_state {
    pub s1: __u32,
    pub s2: __u32,
    pub s3: __u32,
    pub s4: __u32,
}
extern "C" {
    pub fn prandom_u32_state(state: *mut rnd_state) -> u32_;
}
extern "C" {
    pub fn prandom_bytes_state(state: *mut rnd_state, buf: *mut core::ffi::c_void, nbytes: usize);
}
extern "C" {
    pub fn prandom_seed_full_state(pcpu_state: *mut rnd_state);
}
extern "C" {
    pub fn random_prepare_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn random_online_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub static mut _unused_nodemask_arg_: nodemask_t;
}
pub const node_states_N_POSSIBLE: node_states = 0;
pub const node_states_N_ONLINE: node_states = 1;
pub const node_states_N_NORMAL_MEMORY: node_states = 2;
pub const node_states_N_HIGH_MEMORY: node_states = 2;
pub const node_states_N_MEMORY: node_states = 3;
pub const node_states_N_CPU: node_states = 4;
pub const node_states_N_GENERIC_INITIATOR: node_states = 5;
pub const node_states_NR_NODE_STATES: node_states = 6;
pub type node_states = core::ffi::c_uint;
extern "C" {
    pub static mut node_states: [nodemask_t; 6usize];
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct nodemask_scratch {
    pub mask1: nodemask_t,
    pub mask2: nodemask_t,
}
pub const pageblock_bits_PB_migrate: pageblock_bits = 0;
pub const pageblock_bits_PB_migrate_end: pageblock_bits = 2;
pub const pageblock_bits_PB_migrate_skip: pageblock_bits = 3;
pub const pageblock_bits_NR_PAGEBLOCK_BITS: pageblock_bits = 4;
pub type pageblock_bits = core::ffi::c_uint;
extern "C" {
    pub fn get_pfnblock_flags_mask(
        page: *const page,
        pfn: core::ffi::c_ulong,
        mask: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn set_pfnblock_flags_mask(
        page: *mut page,
        flags: core::ffi::c_ulong,
        pfn: core::ffi::c_ulong,
        mask: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn ct_irq_enter();
}
extern "C" {
    pub fn ct_irq_exit();
}
extern "C" {
    pub fn ct_irq_enter_irqson();
}
extern "C" {
    pub fn ct_irq_exit_irqson();
}
extern "C" {
    pub fn ct_nmi_enter();
}
extern "C" {
    pub fn ct_nmi_exit();
}
extern "C" {
    pub fn call_rcu(head: *mut callback_head, func: rcu_callback_t);
}
extern "C" {
    pub fn rcu_barrier_tasks();
}
extern "C" {
    pub fn rcu_barrier_tasks_rude();
}
extern "C" {
    pub fn synchronize_rcu();
}
extern "C" {
    pub fn get_completed_synchronize_rcu() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn get_completed_synchronize_rcu_full(rgosp: *mut rcu_gp_oldstate);
}
extern "C" {
    pub fn rcu_read_unlock_strict();
}
extern "C" {
    pub fn rcu_init();
}
extern "C" {
    pub static mut rcu_scheduler_active: core::ffi::c_int;
}
extern "C" {
    pub fn rcu_sched_clock_irq(user: core::ffi::c_int);
}
extern "C" {
    pub fn rcu_sysrq_start();
}
extern "C" {
    pub fn rcu_sysrq_end();
}
extern "C" {
    pub fn rcu_softirq_qs();
}
extern "C" {
    pub fn rcu_note_context_switch(preempt: bool_);
}
extern "C" {
    pub fn rcu_needs_cpu() -> core::ffi::c_int;
}
extern "C" {
    pub fn rcu_cpu_stall_reset();
}
extern "C" {
    pub fn rcu_request_urgent_qs_task(t: *mut task_struct);
}
extern "C" {
    pub fn synchronize_rcu_expedited();
}
extern "C" {
    pub fn kvfree_call_rcu(head: *mut callback_head, ptr: *mut core::ffi::c_void);
}
extern "C" {
    pub fn rcu_barrier();
}
extern "C" {
    pub fn rcu_momentary_dyntick_idle();
}
extern "C" {
    pub fn kfree_rcu_scheduler_running();
}
extern "C" {
    pub fn rcu_gp_might_be_stalled() -> bool_;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct rcu_gp_oldstate {
    pub rgos_norm: core::ffi::c_ulong,
    pub rgos_exp: core::ffi::c_ulong,
}
extern "C" {
    pub fn start_poll_synchronize_rcu_expedited() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn start_poll_synchronize_rcu_expedited_full(rgosp: *mut rcu_gp_oldstate);
}
extern "C" {
    pub fn cond_synchronize_rcu_expedited(oldstate: core::ffi::c_ulong);
}
extern "C" {
    pub fn cond_synchronize_rcu_expedited_full(rgosp: *mut rcu_gp_oldstate);
}
extern "C" {
    pub fn get_state_synchronize_rcu() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn get_state_synchronize_rcu_full(rgosp: *mut rcu_gp_oldstate);
}
extern "C" {
    pub fn start_poll_synchronize_rcu() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn start_poll_synchronize_rcu_full(rgosp: *mut rcu_gp_oldstate);
}
extern "C" {
    pub fn poll_state_synchronize_rcu(oldstate: core::ffi::c_ulong) -> bool_;
}
extern "C" {
    pub fn poll_state_synchronize_rcu_full(rgosp: *mut rcu_gp_oldstate) -> bool_;
}
extern "C" {
    pub fn cond_synchronize_rcu(oldstate: core::ffi::c_ulong);
}
extern "C" {
    pub fn cond_synchronize_rcu_full(rgosp: *mut rcu_gp_oldstate);
}
extern "C" {
    pub fn rcu_preempt_deferred_qs(t: *mut task_struct);
}
extern "C" {
    pub fn exit_rcu();
}
extern "C" {
    pub fn rcu_scheduler_starting();
}
extern "C" {
    pub fn rcu_end_inkernel_boot();
}
extern "C" {
    pub fn rcu_inkernel_boot_has_ended() -> bool_;
}
extern "C" {
    pub fn rcu_is_watching() -> bool_;
}
extern "C" {
    pub fn rcu_all_qs();
}
extern "C" {
    pub fn rcutree_prepare_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn rcutree_online_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn rcutree_report_cpu_starting(cpu: core::ffi::c_uint);
}
extern "C" {
    pub fn rcutree_dead_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn rcutree_dying_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn rcutree_offline_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn rcutree_migrate_callbacks(cpu: core::ffi::c_int);
}
extern "C" {
    pub fn rcutree_report_cpu_dead();
}
extern "C" {
    pub static mut rcu_lock_map: lockdep_map;
}
extern "C" {
    pub static mut rcu_bh_lock_map: lockdep_map;
}
extern "C" {
    pub static mut rcu_sched_lock_map: lockdep_map;
}
extern "C" {
    pub static mut rcu_callback_map: lockdep_map;
}
extern "C" {
    pub static mut rcu_expedited: core::ffi::c_int;
}
extern "C" {
    pub static mut rcu_normal: core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_rcu_t {
    pub lock: *mut core::ffi::c_void,
}
impl Default for class_rcu_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn rb_insert_color(arg1: *mut rb_node, arg2: *mut rb_root);
}
extern "C" {
    pub fn rb_erase(arg1: *mut rb_node, arg2: *mut rb_root);
}
extern "C" {
    pub fn rb_next(arg1: *const rb_node) -> *mut rb_node;
}
extern "C" {
    pub fn rb_prev(arg1: *const rb_node) -> *mut rb_node;
}
extern "C" {
    pub fn rb_first(arg1: *const rb_root) -> *mut rb_node;
}
extern "C" {
    pub fn rb_last(arg1: *const rb_root) -> *mut rb_node;
}
extern "C" {
    pub fn rb_first_postorder(arg1: *const rb_root) -> *mut rb_node;
}
extern "C" {
    pub fn rb_next_postorder(arg1: *const rb_node) -> *mut rb_node;
}
extern "C" {
    pub fn rb_replace_node(victim: *mut rb_node, new: *mut rb_node, root: *mut rb_root);
}
extern "C" {
    pub fn rb_replace_node_rcu(victim: *mut rb_node, new: *mut rb_node, root: *mut rb_root);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct maple_metadata {
    pub end: core::ffi::c_uchar,
    pub gap: core::ffi::c_uchar,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_range_64 {
    pub parent: *mut maple_pnode,
    pub pivot: [core::ffi::c_ulong; 15usize],
    pub __bindgen_anon_1: maple_range_64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union maple_range_64__bindgen_ty_1 {
    pub slot: [*mut core::ffi::c_void; 16usize],
    pub __bindgen_anon_1: maple_range_64__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_range_64__bindgen_ty_1__bindgen_ty_1 {
    pub pad: [*mut core::ffi::c_void; 15usize],
    pub meta: maple_metadata,
}
impl Default for maple_range_64__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for maple_range_64__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for maple_range_64 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_arange_64 {
    pub parent: *mut maple_pnode,
    pub pivot: [core::ffi::c_ulong; 9usize],
    pub slot: [*mut core::ffi::c_void; 10usize],
    pub gap: [core::ffi::c_ulong; 10usize],
    pub meta: maple_metadata,
}
impl Default for maple_arange_64 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_alloc {
    pub total: core::ffi::c_ulong,
    pub node_count: core::ffi::c_uchar,
    pub request_count: core::ffi::c_uint,
    pub slot: [*mut maple_alloc; 30usize],
}
impl Default for maple_alloc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_topiary {
    pub parent: *mut maple_pnode,
    pub next: *mut maple_enode,
}
impl Default for maple_topiary {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const maple_type_maple_dense: maple_type = 0;
pub const maple_type_maple_leaf_64: maple_type = 1;
pub const maple_type_maple_range_64: maple_type = 2;
pub const maple_type_maple_arange_64: maple_type = 3;
pub type maple_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct lockdep_map_p {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_tree {
    pub __bindgen_anon_1: maple_tree__bindgen_ty_1,
    pub ma_flags: core::ffi::c_uint,
    pub ma_root: *mut core::ffi::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union maple_tree__bindgen_ty_1 {
    pub ma_lock: spinlock_t,
    pub ma_external_lock: lockdep_map_p,
}
impl Default for maple_tree__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for maple_tree {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_node {
    pub __bindgen_anon_1: maple_node__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union maple_node__bindgen_ty_1 {
    pub __bindgen_anon_1: maple_node__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: maple_node__bindgen_ty_1__bindgen_ty_2,
    pub mr64: maple_range_64,
    pub ma64: maple_arange_64,
    pub alloc: maple_alloc,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_node__bindgen_ty_1__bindgen_ty_1 {
    pub parent: *mut maple_pnode,
    pub slot: [*mut core::ffi::c_void; 31usize],
}
impl Default for maple_node__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_node__bindgen_ty_1__bindgen_ty_2 {
    pub pad: *mut core::ffi::c_void,
    pub rcu: callback_head,
    pub piv_parent: *mut maple_enode,
    pub parent_slot: core::ffi::c_uchar,
    pub type_: maple_type,
    pub slot_len: core::ffi::c_uchar,
    pub ma_flags: core::ffi::c_uint,
}
impl Default for maple_node__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for maple_node__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for maple_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_topiary {
    pub head: *mut maple_enode,
    pub tail: *mut maple_enode,
    pub mtree: *mut maple_tree,
}
impl Default for ma_topiary {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn mtree_load(mt: *mut maple_tree, index: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mtree_insert(
        mt: *mut maple_tree,
        index: core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mtree_insert_range(
        mt: *mut maple_tree,
        first: core::ffi::c_ulong,
        last: core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mtree_alloc_range(
        mt: *mut maple_tree,
        startp: *mut core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        size: core::ffi::c_ulong,
        min: core::ffi::c_ulong,
        max: core::ffi::c_ulong,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mtree_alloc_cyclic(
        mt: *mut maple_tree,
        startp: *mut core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        range_lo: core::ffi::c_ulong,
        range_hi: core::ffi::c_ulong,
        next: *mut core::ffi::c_ulong,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mtree_alloc_rrange(
        mt: *mut maple_tree,
        startp: *mut core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        size: core::ffi::c_ulong,
        min: core::ffi::c_ulong,
        max: core::ffi::c_ulong,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mtree_store_range(
        mt: *mut maple_tree,
        first: core::ffi::c_ulong,
        last: core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mtree_store(
        mt: *mut maple_tree,
        index: core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mtree_erase(mt: *mut maple_tree, index: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mtree_dup(mt: *mut maple_tree, new: *mut maple_tree, gfp: gfp_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn __mt_dup(mt: *mut maple_tree, new: *mut maple_tree, gfp: gfp_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn mtree_destroy(mt: *mut maple_tree);
}
extern "C" {
    pub fn __mt_destroy(mt: *mut maple_tree);
}
pub const maple_status_ma_active: maple_status = 0;
pub const maple_status_ma_start: maple_status = 1;
pub const maple_status_ma_root: maple_status = 2;
pub const maple_status_ma_none: maple_status = 3;
pub const maple_status_ma_pause: maple_status = 4;
pub const maple_status_ma_overflow: maple_status = 5;
pub const maple_status_ma_underflow: maple_status = 6;
pub const maple_status_ma_error: maple_status = 7;
pub type maple_status = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_state {
    pub tree: *mut maple_tree,
    pub index: core::ffi::c_ulong,
    pub last: core::ffi::c_ulong,
    pub node: *mut maple_enode,
    pub min: core::ffi::c_ulong,
    pub max: core::ffi::c_ulong,
    pub alloc: *mut maple_alloc,
    pub status: maple_status,
    pub depth: core::ffi::c_uchar,
    pub offset: core::ffi::c_uchar,
    pub mas_flags: core::ffi::c_uchar,
    pub end: core::ffi::c_uchar,
}
impl Default for ma_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_wr_state {
    pub mas: *mut ma_state,
    pub node: *mut maple_node,
    pub r_min: core::ffi::c_ulong,
    pub r_max: core::ffi::c_ulong,
    pub type_: maple_type,
    pub offset_end: core::ffi::c_uchar,
    pub pivots: *mut core::ffi::c_ulong,
    pub end_piv: core::ffi::c_ulong,
    pub slots: *mut *mut core::ffi::c_void,
    pub entry: *mut core::ffi::c_void,
    pub content: *mut core::ffi::c_void,
}
impl Default for ma_wr_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn mas_walk(mas: *mut ma_state) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_store(mas: *mut ma_state, entry: *mut core::ffi::c_void) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_erase(mas: *mut ma_state) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_store_gfp(
        mas: *mut ma_state,
        entry: *mut core::ffi::c_void,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mas_store_prealloc(mas: *mut ma_state, entry: *mut core::ffi::c_void);
}
extern "C" {
    pub fn mas_find(mas: *mut ma_state, max: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_find_range(mas: *mut ma_state, max: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_find_rev(mas: *mut ma_state, min: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_find_range_rev(
        mas: *mut ma_state,
        max: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_preallocate(
        mas: *mut ma_state,
        entry: *mut core::ffi::c_void,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mas_alloc_cyclic(
        mas: *mut ma_state,
        startp: *mut core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        range_lo: core::ffi::c_ulong,
        range_hi: core::ffi::c_ulong,
        next: *mut core::ffi::c_ulong,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mas_nomem(mas: *mut ma_state, gfp: gfp_t) -> bool_;
}
extern "C" {
    pub fn mas_pause(mas: *mut ma_state);
}
extern "C" {
    pub fn maple_tree_init();
}
extern "C" {
    pub fn mas_destroy(mas: *mut ma_state);
}
extern "C" {
    pub fn mas_expected_entries(
        mas: *mut ma_state,
        nr_entries: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mas_prev(mas: *mut ma_state, min: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_prev_range(mas: *mut ma_state, max: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_next(mas: *mut ma_state, max: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_next_range(mas: *mut ma_state, max: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mas_empty_area(
        mas: *mut ma_state,
        min: core::ffi::c_ulong,
        max: core::ffi::c_ulong,
        size: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mas_empty_area_rev(
        mas: *mut ma_state,
        min: core::ffi::c_ulong,
        max: core::ffi::c_ulong,
        size: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn mt_find(
        mt: *mut maple_tree,
        index: *mut core::ffi::c_ulong,
        max: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mt_find_after(
        mt: *mut maple_tree,
        index: *mut core::ffi::c_ulong,
        max: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mt_prev(
        mt: *mut maple_tree,
        index: core::ffi::c_ulong,
        min: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn mt_next(
        mt: *mut maple_tree,
        index: core::ffi::c_ulong,
        max: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rw_semaphore {
    pub count: atomic_long_t,
    pub owner: atomic_long_t,
    pub osq: optimistic_spin_queue,
    pub wait_lock: raw_spinlock_t,
    pub wait_list: list_head,
}
impl Default for rw_semaphore {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __init_rwsem(
        sem: *mut rw_semaphore,
        name: *const core::ffi::c_char,
        key: *mut lock_class_key,
    );
}
extern "C" {
    pub fn down_read(sem: *mut rw_semaphore);
}
extern "C" {
    pub fn down_read_interruptible(sem: *mut rw_semaphore) -> core::ffi::c_int;
}
extern "C" {
    pub fn down_read_killable(sem: *mut rw_semaphore) -> core::ffi::c_int;
}
extern "C" {
    pub fn down_read_trylock(sem: *mut rw_semaphore) -> core::ffi::c_int;
}
extern "C" {
    pub fn down_write(sem: *mut rw_semaphore);
}
extern "C" {
    pub fn down_write_killable(sem: *mut rw_semaphore) -> core::ffi::c_int;
}
extern "C" {
    pub fn down_write_trylock(sem: *mut rw_semaphore) -> core::ffi::c_int;
}
extern "C" {
    pub fn up_read(sem: *mut rw_semaphore);
}
extern "C" {
    pub fn up_write(sem: *mut rw_semaphore);
}
pub type class_rwsem_read_t = *mut rw_semaphore;
pub type class_rwsem_read_try_t = class_rwsem_read_t;
pub type class_rwsem_read_intr_t = class_rwsem_read_t;
pub type class_rwsem_write_t = *mut rw_semaphore;
pub type class_rwsem_write_try_t = class_rwsem_write_t;
extern "C" {
    pub fn downgrade_write(sem: *mut rw_semaphore);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct swait_queue_head {
    pub lock: raw_spinlock_t,
    pub task_list: list_head,
}
impl Default for swait_queue_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct swait_queue {
    pub task: *mut task_struct,
    pub task_list: list_head,
}
impl Default for swait_queue {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __init_swait_queue_head(
        q: *mut swait_queue_head,
        name: *const core::ffi::c_char,
        key: *mut lock_class_key,
    );
}
extern "C" {
    pub fn swake_up_one(q: *mut swait_queue_head);
}
extern "C" {
    pub fn swake_up_all(q: *mut swait_queue_head);
}
extern "C" {
    pub fn swake_up_locked(q: *mut swait_queue_head, wake_flags: core::ffi::c_int);
}
extern "C" {
    pub fn prepare_to_swait_exclusive(
        q: *mut swait_queue_head,
        wait: *mut swait_queue,
        state: core::ffi::c_int,
    );
}
extern "C" {
    pub fn prepare_to_swait_event(
        q: *mut swait_queue_head,
        wait: *mut swait_queue,
        state: core::ffi::c_int,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn __finish_swait(q: *mut swait_queue_head, wait: *mut swait_queue);
}
extern "C" {
    pub fn finish_swait(q: *mut swait_queue_head, wait: *mut swait_queue);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct completion {
    pub done: core::ffi::c_uint,
    pub wait: swait_queue_head,
}
impl Default for completion {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn wait_for_completion(arg1: *mut completion);
}
extern "C" {
    pub fn wait_for_completion_io(arg1: *mut completion);
}
extern "C" {
    pub fn wait_for_completion_interruptible(x: *mut completion) -> core::ffi::c_int;
}
extern "C" {
    pub fn wait_for_completion_killable(x: *mut completion) -> core::ffi::c_int;
}
extern "C" {
    pub fn wait_for_completion_state(
        x: *mut completion,
        state: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn wait_for_completion_timeout(
        x: *mut completion,
        timeout: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn wait_for_completion_io_timeout(
        x: *mut completion,
        timeout: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn wait_for_completion_interruptible_timeout(
        x: *mut completion,
        timeout: core::ffi::c_ulong,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn wait_for_completion_killable_timeout(
        x: *mut completion,
        timeout: core::ffi::c_ulong,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn try_wait_for_completion(x: *mut completion) -> bool_;
}
extern "C" {
    pub fn completion_done(x: *mut completion) -> bool_;
}
extern "C" {
    pub fn complete(arg1: *mut completion);
}
extern "C" {
    pub fn complete_on_current_cpu(x: *mut completion);
}
extern "C" {
    pub fn complete_all(arg1: *mut completion);
}
pub const uprobe_filter_ctx_UPROBE_FILTER_REGISTER: uprobe_filter_ctx = 0;
pub const uprobe_filter_ctx_UPROBE_FILTER_UNREGISTER: uprobe_filter_ctx = 1;
pub const uprobe_filter_ctx_UPROBE_FILTER_MMAP: uprobe_filter_ctx = 2;
pub type uprobe_filter_ctx = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uprobe_consumer {
    pub handler: ::core::option::Option<
        unsafe extern "C" fn(self_: *mut uprobe_consumer, regs: *mut pt_regs) -> core::ffi::c_int,
    >,
    pub ret_handler: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut uprobe_consumer,
            func: core::ffi::c_ulong,
            regs: *mut pt_regs,
        ) -> core::ffi::c_int,
    >,
    pub filter: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut uprobe_consumer,
            ctx: uprobe_filter_ctx,
            mm: *mut mm_struct,
        ) -> bool_,
    >,
    pub next: *mut uprobe_consumer,
}
impl Default for uprobe_consumer {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct uprobes_state {}
extern "C" {
    pub fn register_refined_jiffies(clock_tick_rate: core::ffi::c_long) -> core::ffi::c_int;
}
extern "C" {
    pub static mut jiffies_64: u64_;
}
extern "C" {
    pub static mut jiffies: core::ffi::c_ulong;
}
extern "C" {
    pub static mut preset_lpj: core::ffi::c_ulong;
}
extern "C" {
    pub fn jiffies_to_msecs(j: core::ffi::c_ulong) -> core::ffi::c_uint;
}
extern "C" {
    pub fn jiffies_to_usecs(j: core::ffi::c_ulong) -> core::ffi::c_uint;
}
extern "C" {
    pub fn jiffies64_to_nsecs(j: u64_) -> u64_;
}
extern "C" {
    pub fn jiffies64_to_msecs(j: u64_) -> u64_;
}
extern "C" {
    pub fn __msecs_to_jiffies(m: core::ffi::c_uint) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __usecs_to_jiffies(u: core::ffi::c_uint) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn timespec64_to_jiffies(value: *const timespec64) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn jiffies_to_timespec64(jiffies: core::ffi::c_ulong, value: *mut timespec64);
}
extern "C" {
    pub fn jiffies_to_clock_t(x: core::ffi::c_ulong) -> clock_t;
}
extern "C" {
    pub fn clock_t_to_jiffies(x: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn jiffies_64_to_clock_t(x: u64_) -> u64_;
}
extern "C" {
    pub fn nsec_to_clock_t(x: u64_) -> u64_;
}
extern "C" {
    pub fn nsecs_to_jiffies64(n: u64_) -> u64_;
}
extern "C" {
    pub fn nsecs_to_jiffies(n: u64_) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn ktime_add_safe(lhs: ktime_t, rhs: ktime_t) -> ktime_t;
}
pub const clocksource_ids_CSID_GENERIC: clocksource_ids = 0;
pub const clocksource_ids_CSID_ARM_ARCH_COUNTER: clocksource_ids = 1;
pub const clocksource_ids_CSID_X86_TSC_EARLY: clocksource_ids = 2;
pub const clocksource_ids_CSID_X86_TSC: clocksource_ids = 3;
pub const clocksource_ids_CSID_X86_KVM_CLK: clocksource_ids = 4;
pub const clocksource_ids_CSID_MAX: clocksource_ids = 5;
pub type clocksource_ids = core::ffi::c_uint;
extern "C" {
    pub fn timekeeping_init();
}
extern "C" {
    pub static mut timekeeping_suspended: core::ffi::c_int;
}
extern "C" {
    pub fn legacy_timer_tick(ticks: core::ffi::c_ulong);
}
extern "C" {
    pub fn do_settimeofday64(ts: *const timespec64) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_sys_settimeofday64(tv: *const timespec64, tz: *const timezone) -> core::ffi::c_int;
}
extern "C" {
    pub fn ktime_get_raw_ts64(ts: *mut timespec64);
}
extern "C" {
    pub fn ktime_get_ts64(ts: *mut timespec64);
}
extern "C" {
    pub fn ktime_get_real_ts64(tv: *mut timespec64);
}
extern "C" {
    pub fn ktime_get_coarse_ts64(ts: *mut timespec64);
}
extern "C" {
    pub fn ktime_get_coarse_real_ts64(ts: *mut timespec64);
}
extern "C" {
    pub fn getboottime64(ts: *mut timespec64);
}
extern "C" {
    pub fn ktime_get_seconds() -> time64_t;
}
extern "C" {
    pub fn __ktime_get_real_seconds() -> time64_t;
}
extern "C" {
    pub fn ktime_get_real_seconds() -> time64_t;
}
pub const tk_offsets_TK_OFFS_REAL: tk_offsets = 0;
pub const tk_offsets_TK_OFFS_BOOT: tk_offsets = 1;
pub const tk_offsets_TK_OFFS_TAI: tk_offsets = 2;
pub const tk_offsets_TK_OFFS_MAX: tk_offsets = 3;
pub type tk_offsets = core::ffi::c_uint;
extern "C" {
    pub fn ktime_get() -> ktime_t;
}
extern "C" {
    pub fn ktime_get_with_offset(offs: tk_offsets) -> ktime_t;
}
extern "C" {
    pub fn ktime_get_coarse_with_offset(offs: tk_offsets) -> ktime_t;
}
extern "C" {
    pub fn ktime_mono_to_any(tmono: ktime_t, offs: tk_offsets) -> ktime_t;
}
extern "C" {
    pub fn ktime_get_raw() -> ktime_t;
}
extern "C" {
    pub fn ktime_get_resolution_ns() -> u32_;
}
extern "C" {
    pub fn ktime_get_mono_fast_ns() -> u64_;
}
extern "C" {
    pub fn ktime_get_raw_fast_ns() -> u64_;
}
extern "C" {
    pub fn ktime_get_boot_fast_ns() -> u64_;
}
extern "C" {
    pub fn ktime_get_tai_fast_ns() -> u64_;
}
extern "C" {
    pub fn ktime_get_real_fast_ns() -> u64_;
}
extern "C" {
    pub fn timekeeping_rtc_skipsuspend() -> bool_;
}
extern "C" {
    pub fn timekeeping_rtc_skipresume() -> bool_;
}
extern "C" {
    pub fn timekeeping_inject_sleeptime64(delta: *const timespec64);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ktime_timestamps {
    pub mono: u64_,
    pub boot: u64_,
    pub real: u64_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct system_time_snapshot {
    pub cycles: u64_,
    pub real: ktime_t,
    pub raw: ktime_t,
    pub cs_id: clocksource_ids,
    pub clock_was_set_seq: core::ffi::c_uint,
    pub cs_was_changed_seq: u8_,
}
impl Default for system_time_snapshot {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct system_device_crosststamp {
    pub device: ktime_t,
    pub sys_realtime: ktime_t,
    pub sys_monoraw: ktime_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct system_counterval_t {
    pub cycles: u64_,
    pub cs_id: clocksource_ids,
}
impl Default for system_counterval_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn get_device_system_crosststamp(
        get_time_fn: ::core::option::Option<
            unsafe extern "C" fn(
                device_time: *mut ktime_t,
                system_counterval: *mut system_counterval_t,
                ctx: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        ctx: *mut core::ffi::c_void,
        history: *mut system_time_snapshot,
        xtstamp: *mut system_device_crosststamp,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn ktime_get_snapshot(systime_snapshot: *mut system_time_snapshot);
}
extern "C" {
    pub fn ktime_get_fast_timestamps(snap: *mut ktime_timestamps);
}
extern "C" {
    pub static mut persistent_clock_is_local: core::ffi::c_int;
}
extern "C" {
    pub fn read_persistent_clock64(ts: *mut timespec64);
}
extern "C" {
    pub fn read_persistent_wall_and_boot_offset(
        wall_clock: *mut timespec64,
        boot_offset: *mut timespec64,
    );
}
extern "C" {
    pub fn update_persistent_clock64(now: timespec64) -> core::ffi::c_int;
}
pub const debug_obj_state_ODEBUG_STATE_NONE: debug_obj_state = 0;
pub const debug_obj_state_ODEBUG_STATE_INIT: debug_obj_state = 1;
pub const debug_obj_state_ODEBUG_STATE_INACTIVE: debug_obj_state = 2;
pub const debug_obj_state_ODEBUG_STATE_ACTIVE: debug_obj_state = 3;
pub const debug_obj_state_ODEBUG_STATE_DESTROYED: debug_obj_state = 4;
pub const debug_obj_state_ODEBUG_STATE_NOTAVAILABLE: debug_obj_state = 5;
pub const debug_obj_state_ODEBUG_STATE_MAX: debug_obj_state = 6;
pub type debug_obj_state = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct debug_obj {
    pub node: hlist_node,
    pub state: debug_obj_state,
    pub astate: core::ffi::c_uint,
    pub object: *mut core::ffi::c_void,
    pub descr: *const debug_obj_descr,
}
impl Default for debug_obj {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct debug_obj_descr {
    pub name: *const core::ffi::c_char,
    pub debug_hint: ::core::option::Option<
        unsafe extern "C" fn(addr: *mut core::ffi::c_void) -> *mut core::ffi::c_void,
    >,
    pub is_static_object:
        ::core::option::Option<unsafe extern "C" fn(addr: *mut core::ffi::c_void) -> bool_>,
    pub fixup_init: ::core::option::Option<
        unsafe extern "C" fn(addr: *mut core::ffi::c_void, state: debug_obj_state) -> bool_,
    >,
    pub fixup_activate: ::core::option::Option<
        unsafe extern "C" fn(addr: *mut core::ffi::c_void, state: debug_obj_state) -> bool_,
    >,
    pub fixup_destroy: ::core::option::Option<
        unsafe extern "C" fn(addr: *mut core::ffi::c_void, state: debug_obj_state) -> bool_,
    >,
    pub fixup_free: ::core::option::Option<
        unsafe extern "C" fn(addr: *mut core::ffi::c_void, state: debug_obj_state) -> bool_,
    >,
    pub fixup_assert_init: ::core::option::Option<
        unsafe extern "C" fn(addr: *mut core::ffi::c_void, state: debug_obj_state) -> bool_,
    >,
}
impl Default for debug_obj_descr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn init_timer_key(
        timer: *mut timer_list,
        func: ::core::option::Option<unsafe extern "C" fn(arg1: *mut timer_list)>,
        flags: core::ffi::c_uint,
        name: *const core::ffi::c_char,
        key: *mut lock_class_key,
    );
}
extern "C" {
    pub fn add_timer_on(timer: *mut timer_list, cpu: core::ffi::c_int);
}
extern "C" {
    pub fn mod_timer(timer: *mut timer_list, expires: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn mod_timer_pending(
        timer: *mut timer_list,
        expires: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn timer_reduce(timer: *mut timer_list, expires: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn add_timer(timer: *mut timer_list);
}
extern "C" {
    pub fn add_timer_local(timer: *mut timer_list);
}
extern "C" {
    pub fn add_timer_global(timer: *mut timer_list);
}
extern "C" {
    pub fn try_to_del_timer_sync(timer: *mut timer_list) -> core::ffi::c_int;
}
extern "C" {
    pub fn timer_delete_sync(timer: *mut timer_list) -> core::ffi::c_int;
}
extern "C" {
    pub fn timer_delete(timer: *mut timer_list) -> core::ffi::c_int;
}
extern "C" {
    pub fn timer_shutdown_sync(timer: *mut timer_list) -> core::ffi::c_int;
}
extern "C" {
    pub fn timer_shutdown(timer: *mut timer_list) -> core::ffi::c_int;
}
extern "C" {
    pub fn init_timers();
}
extern "C" {
    pub fn it_real_fn(arg1: *mut hrtimer) -> hrtimer_restart;
}
extern "C" {
    pub fn __round_jiffies(j: core::ffi::c_ulong, cpu: core::ffi::c_int) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __round_jiffies_relative(
        j: core::ffi::c_ulong,
        cpu: core::ffi::c_int,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn round_jiffies(j: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn round_jiffies_relative(j: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __round_jiffies_up(j: core::ffi::c_ulong, cpu: core::ffi::c_int) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __round_jiffies_up_relative(
        j: core::ffi::c_ulong,
        cpu: core::ffi::c_int,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn round_jiffies_up(j: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn round_jiffies_up_relative(j: core::ffi::c_ulong) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn timers_prepare_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn timers_dead_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct workqueue_struct {
    _unused: [u8; 0],
}
pub type work_func_t = ::core::option::Option<unsafe extern "C" fn(work: *mut work_struct)>;
extern "C" {
    pub fn delayed_work_timer_fn(t: *mut timer_list);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct work_struct {
    pub data: atomic_long_t,
    pub entry: list_head,
    pub func: work_func_t,
}
impl Default for work_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const work_bits_WORK_STRUCT_PENDING_BIT: work_bits = 0;
pub const work_bits_WORK_STRUCT_INACTIVE_BIT: work_bits = 1;
pub const work_bits_WORK_STRUCT_PWQ_BIT: work_bits = 2;
pub const work_bits_WORK_STRUCT_LINKED_BIT: work_bits = 3;
pub const work_bits_WORK_STRUCT_FLAG_BITS: work_bits = 4;
pub const work_bits_WORK_STRUCT_COLOR_SHIFT: work_bits = 4;
pub const work_bits_WORK_STRUCT_COLOR_BITS: work_bits = 4;
pub const work_bits_WORK_STRUCT_PWQ_SHIFT: work_bits = 8;
pub const work_bits_WORK_OFFQ_FLAG_SHIFT: work_bits = 4;
pub const work_bits_WORK_OFFQ_BH_BIT: work_bits = 4;
pub const work_bits_WORK_OFFQ_FLAG_END: work_bits = 5;
pub const work_bits_WORK_OFFQ_FLAG_BITS: work_bits = 1;
pub const work_bits_WORK_OFFQ_DISABLE_SHIFT: work_bits = 5;
pub const work_bits_WORK_OFFQ_DISABLE_BITS: work_bits = 16;
pub const work_bits_WORK_OFFQ_POOL_SHIFT: work_bits = 21;
pub const work_bits_WORK_OFFQ_LEFT: work_bits = 43;
pub const work_bits_WORK_OFFQ_POOL_BITS: work_bits = 31;
pub type work_bits = core::ffi::c_uint;
pub const work_flags_WORK_STRUCT_PENDING: work_flags = 1;
pub const work_flags_WORK_STRUCT_INACTIVE: work_flags = 2;
pub const work_flags_WORK_STRUCT_PWQ: work_flags = 4;
pub const work_flags_WORK_STRUCT_LINKED: work_flags = 8;
pub const work_flags_WORK_STRUCT_STATIC: work_flags = 0;
pub type work_flags = core::ffi::c_uint;
pub const wq_misc_consts_WORK_NR_COLORS: wq_misc_consts = 16;
pub const wq_misc_consts_WORK_CPU_UNBOUND: wq_misc_consts = 2;
pub const wq_misc_consts_WORK_BUSY_PENDING: wq_misc_consts = 1;
pub const wq_misc_consts_WORK_BUSY_RUNNING: wq_misc_consts = 2;
pub const wq_misc_consts_WORKER_DESC_LEN: wq_misc_consts = 32;
pub type wq_misc_consts = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct delayed_work {
    pub work: work_struct,
    pub timer: timer_list,
    pub wq: *mut workqueue_struct,
    pub cpu: core::ffi::c_int,
}
impl Default for delayed_work {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rcu_work {
    pub work: work_struct,
    pub rcu: callback_head,
    pub wq: *mut workqueue_struct,
}
impl Default for rcu_work {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const wq_affn_scope_WQ_AFFN_DFL: wq_affn_scope = 0;
pub const wq_affn_scope_WQ_AFFN_CPU: wq_affn_scope = 1;
pub const wq_affn_scope_WQ_AFFN_SMT: wq_affn_scope = 2;
pub const wq_affn_scope_WQ_AFFN_CACHE: wq_affn_scope = 3;
pub const wq_affn_scope_WQ_AFFN_NUMA: wq_affn_scope = 4;
pub const wq_affn_scope_WQ_AFFN_SYSTEM: wq_affn_scope = 5;
pub const wq_affn_scope_WQ_AFFN_NR_TYPES: wq_affn_scope = 6;
pub type wq_affn_scope = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct workqueue_attrs {
    pub nice: core::ffi::c_int,
    pub cpumask: cpumask_var_t,
    pub __pod_cpumask: cpumask_var_t,
    pub affn_strict: bool_,
    pub affn_scope: wq_affn_scope,
    pub ordered: bool_,
}
impl Default for workqueue_attrs {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct execute_work {
    pub work: work_struct,
}
impl Default for execute_work {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const wq_flags_WQ_BH: wq_flags = 1;
pub const wq_flags_WQ_UNBOUND: wq_flags = 2;
pub const wq_flags_WQ_FREEZABLE: wq_flags = 4;
pub const wq_flags_WQ_MEM_RECLAIM: wq_flags = 8;
pub const wq_flags_WQ_HIGHPRI: wq_flags = 16;
pub const wq_flags_WQ_CPU_INTENSIVE: wq_flags = 32;
pub const wq_flags_WQ_SYSFS: wq_flags = 64;
pub const wq_flags_WQ_POWER_EFFICIENT: wq_flags = 128;
pub const wq_flags___WQ_DESTROYING: wq_flags = 32768;
pub const wq_flags___WQ_DRAINING: wq_flags = 65536;
pub const wq_flags___WQ_ORDERED: wq_flags = 131072;
pub const wq_flags___WQ_LEGACY: wq_flags = 262144;
pub const wq_flags___WQ_BH_ALLOWS: wq_flags = 17;
pub type wq_flags = core::ffi::c_uint;
pub const wq_consts_WQ_MAX_ACTIVE: wq_consts = 512;
pub const wq_consts_WQ_UNBOUND_MAX_ACTIVE: wq_consts = 512;
pub const wq_consts_WQ_DFL_ACTIVE: wq_consts = 256;
pub const wq_consts_WQ_DFL_MIN_ACTIVE: wq_consts = 8;
pub type wq_consts = core::ffi::c_uint;
extern "C" {
    pub static mut system_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_highpri_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_long_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_unbound_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_freezable_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_power_efficient_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_freezable_power_efficient_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_bh_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut system_bh_highpri_wq: *mut workqueue_struct;
}
extern "C" {
    pub fn workqueue_softirq_action(highpri: bool_);
}
extern "C" {
    pub fn workqueue_softirq_dead(cpu: core::ffi::c_uint);
}
extern "C" {
    pub fn alloc_workqueue(
        fmt: *const core::ffi::c_char,
        flags: core::ffi::c_uint,
        max_active: core::ffi::c_int,
        ...
    ) -> *mut workqueue_struct;
}
extern "C" {
    pub fn destroy_workqueue(wq: *mut workqueue_struct);
}
extern "C" {
    pub fn alloc_workqueue_attrs() -> *mut workqueue_attrs;
}
extern "C" {
    pub fn free_workqueue_attrs(attrs: *mut workqueue_attrs);
}
extern "C" {
    pub fn apply_workqueue_attrs(
        wq: *mut workqueue_struct,
        attrs: *const workqueue_attrs,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn workqueue_unbound_exclude_cpumask(cpumask: *mut cpumask) -> core::ffi::c_int;
}
extern "C" {
    pub fn queue_work_on(
        cpu: core::ffi::c_int,
        wq: *mut workqueue_struct,
        work: *mut work_struct,
    ) -> bool_;
}
extern "C" {
    pub fn queue_work_node(
        node: core::ffi::c_int,
        wq: *mut workqueue_struct,
        work: *mut work_struct,
    ) -> bool_;
}
extern "C" {
    pub fn queue_delayed_work_on(
        cpu: core::ffi::c_int,
        wq: *mut workqueue_struct,
        work: *mut delayed_work,
        delay: core::ffi::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn mod_delayed_work_on(
        cpu: core::ffi::c_int,
        wq: *mut workqueue_struct,
        dwork: *mut delayed_work,
        delay: core::ffi::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn queue_rcu_work(wq: *mut workqueue_struct, rwork: *mut rcu_work) -> bool_;
}
extern "C" {
    pub fn __flush_workqueue(wq: *mut workqueue_struct);
}
extern "C" {
    pub fn drain_workqueue(wq: *mut workqueue_struct);
}
extern "C" {
    pub fn schedule_on_each_cpu(func: work_func_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn execute_in_process_context(
        fn_: work_func_t,
        arg1: *mut execute_work,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn flush_work(work: *mut work_struct) -> bool_;
}
extern "C" {
    pub fn cancel_work(work: *mut work_struct) -> bool_;
}
extern "C" {
    pub fn cancel_work_sync(work: *mut work_struct) -> bool_;
}
extern "C" {
    pub fn flush_delayed_work(dwork: *mut delayed_work) -> bool_;
}
extern "C" {
    pub fn cancel_delayed_work(dwork: *mut delayed_work) -> bool_;
}
extern "C" {
    pub fn cancel_delayed_work_sync(dwork: *mut delayed_work) -> bool_;
}
extern "C" {
    pub fn disable_work(work: *mut work_struct) -> bool_;
}
extern "C" {
    pub fn disable_work_sync(work: *mut work_struct) -> bool_;
}
extern "C" {
    pub fn enable_work(work: *mut work_struct) -> bool_;
}
extern "C" {
    pub fn disable_delayed_work(dwork: *mut delayed_work) -> bool_;
}
extern "C" {
    pub fn disable_delayed_work_sync(dwork: *mut delayed_work) -> bool_;
}
extern "C" {
    pub fn enable_delayed_work(dwork: *mut delayed_work) -> bool_;
}
extern "C" {
    pub fn flush_rcu_work(rwork: *mut rcu_work) -> bool_;
}
extern "C" {
    pub fn workqueue_set_max_active(wq: *mut workqueue_struct, max_active: core::ffi::c_int);
}
extern "C" {
    pub fn workqueue_set_min_active(wq: *mut workqueue_struct, min_active: core::ffi::c_int);
}
extern "C" {
    pub fn current_work() -> *mut work_struct;
}
extern "C" {
    pub fn current_is_workqueue_rescuer() -> bool_;
}
extern "C" {
    pub fn workqueue_congested(cpu: core::ffi::c_int, wq: *mut workqueue_struct) -> bool_;
}
extern "C" {
    pub fn work_busy(work: *mut work_struct) -> core::ffi::c_uint;
}
extern "C" {
    pub fn set_worker_desc(fmt: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn print_worker_info(log_lvl: *const core::ffi::c_char, task: *mut task_struct);
}
extern "C" {
    pub fn show_all_workqueues();
}
extern "C" {
    pub fn show_freezable_workqueues();
}
extern "C" {
    pub fn show_one_workqueue(wq: *mut workqueue_struct);
}
extern "C" {
    pub fn wq_worker_comm(buf: *mut core::ffi::c_char, size: usize, task: *mut task_struct);
}
extern "C" {
    pub fn __warn_flushing_systemwide_wq();
}
extern "C" {
    pub fn work_on_cpu_key(
        cpu: core::ffi::c_int,
        fn_: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut core::ffi::c_void) -> core::ffi::c_long,
        >,
        arg: *mut core::ffi::c_void,
        key: *mut lock_class_key,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn work_on_cpu_safe_key(
        cpu: core::ffi::c_int,
        fn_: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut core::ffi::c_void) -> core::ffi::c_long,
        >,
        arg: *mut core::ffi::c_void,
        key: *mut lock_class_key,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn workqueue_sysfs_register(wq: *mut workqueue_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn workqueue_prepare_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn workqueue_online_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn workqueue_offline_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn workqueue_init_early();
}
extern "C" {
    pub fn workqueue_init();
}
extern "C" {
    pub fn workqueue_init_topology();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct percpu_counter {
    pub lock: raw_spinlock_t,
    pub count: s64,
    pub list: list_head,
    pub counters: *mut s32,
}
impl Default for percpu_counter {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut percpu_counter_batch: core::ffi::c_int;
}
extern "C" {
    pub fn __percpu_counter_init_many(
        fbc: *mut percpu_counter,
        amount: s64,
        gfp: gfp_t,
        nr_counters: u32_,
        key: *mut lock_class_key,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn percpu_counter_destroy_many(fbc: *mut percpu_counter, nr_counters: u32_);
}
extern "C" {
    pub fn percpu_counter_set(fbc: *mut percpu_counter, amount: s64);
}
extern "C" {
    pub fn percpu_counter_add_batch(fbc: *mut percpu_counter, amount: s64, batch: s32);
}
extern "C" {
    pub fn __percpu_counter_sum(fbc: *mut percpu_counter) -> s64;
}
extern "C" {
    pub fn __percpu_counter_compare(
        fbc: *mut percpu_counter,
        rhs: s64,
        batch: s32,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __percpu_counter_limited_add(
        fbc: *mut percpu_counter,
        limit: s64,
        amount: s64,
        batch: s32,
    ) -> bool_;
}
extern "C" {
    pub fn percpu_counter_sync(fbc: *mut percpu_counter);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mm_context_t {
    pub ctx_id: u64_,
    pub tlb_gen: atomic64_t,
    pub ldt_usr_sem: rw_semaphore,
    pub ldt: *mut ldt_struct,
    pub flags: core::ffi::c_ulong,
    pub lock: mutex,
    pub vdso: *mut core::ffi::c_void,
    pub vdso_image: *const vdso_image,
    pub perf_rdpmc_allowed: atomic_t,
    pub pkey_allocation_map: u16_,
    pub execute_only_pkey: s16,
}
impl Default for mm_context_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn leave_mm();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mem_cgroup {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct page {
    pub flags: core::ffi::c_ulong,
    pub __bindgen_anon_1: page__bindgen_ty_1,
    pub __bindgen_anon_2: page__bindgen_ty_2,
    pub _refcount: atomic_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union page__bindgen_ty_1 {
    pub __bindgen_anon_1: page__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: page__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: page__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: page__bindgen_ty_1__bindgen_ty_4,
    pub callback_head: callback_head,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_1 {
    pub __bindgen_anon_1: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub mapping: *mut address_space,
    pub __bindgen_anon_2: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
    pub private: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub lru: list_head,
    pub __bindgen_anon_1: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub buddy_list: list_head,
    pub pcp_list: list_head,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub __filler: *mut core::ffi::c_void,
    pub mlock_count: core::ffi::c_uint,
}
impl Default for page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
    pub index: core::ffi::c_ulong,
    pub share: core::ffi::c_ulong,
}
impl Default for page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for page__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_2 {
    pub pp_magic: core::ffi::c_ulong,
    pub pp: *mut page_pool,
    pub _pp_mapping_pad: core::ffi::c_ulong,
    pub dma_addr: core::ffi::c_ulong,
    pub pp_ref_count: atomic_long_t,
}
impl Default for page__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_3 {
    pub compound_head: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_4 {
    pub pgmap: *mut dev_pagemap,
    pub zone_device_data: *mut core::ffi::c_void,
}
impl Default for page__bindgen_ty_1__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for page__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union page__bindgen_ty_2 {
    pub _mapcount: atomic_t,
    pub page_type: core::ffi::c_uint,
}
impl Default for page__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for page {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct encoded_page {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct swp_entry_t {
    pub val: core::ffi::c_ulong,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct folio {
    pub __bindgen_anon_1: folio__bindgen_ty_1,
    pub __bindgen_anon_2: folio__bindgen_ty_2,
    pub __bindgen_anon_3: folio__bindgen_ty_3,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union folio__bindgen_ty_1 {
    pub __bindgen_anon_1: folio__bindgen_ty_1__bindgen_ty_1,
    pub page: page,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct folio__bindgen_ty_1__bindgen_ty_1 {
    pub flags: core::ffi::c_ulong,
    pub __bindgen_anon_1: folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub mapping: *mut address_space,
    pub index: core::ffi::c_ulong,
    pub __bindgen_anon_2: folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
    pub _mapcount: atomic_t,
    pub _refcount: atomic_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub lru: list_head,
    pub __bindgen_anon_1: folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub __filler: *mut core::ffi::c_void,
    pub mlock_count: core::ffi::c_uint,
}
impl Default for folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
    pub private: *mut core::ffi::c_void,
    pub swap: swp_entry_t,
}
impl Default for folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for folio__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for folio__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union folio__bindgen_ty_2 {
    pub __bindgen_anon_1: folio__bindgen_ty_2__bindgen_ty_1,
    pub __page_1: page,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct folio__bindgen_ty_2__bindgen_ty_1 {
    pub _flags_1: core::ffi::c_ulong,
    pub _head_1: core::ffi::c_ulong,
    pub _large_mapcount: atomic_t,
    pub _entire_mapcount: atomic_t,
    pub _nr_pages_mapped: atomic_t,
    pub _pincount: atomic_t,
    pub _folio_nr_pages: core::ffi::c_uint,
}
impl Default for folio__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union folio__bindgen_ty_3 {
    pub __bindgen_anon_1: folio__bindgen_ty_3__bindgen_ty_1,
    pub __bindgen_anon_2: folio__bindgen_ty_3__bindgen_ty_2,
    pub __page_2: page,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct folio__bindgen_ty_3__bindgen_ty_1 {
    pub _flags_2: core::ffi::c_ulong,
    pub _head_2: core::ffi::c_ulong,
    pub _hugetlb_subpool: *mut core::ffi::c_void,
    pub _hugetlb_cgroup: *mut core::ffi::c_void,
    pub _hugetlb_cgroup_rsvd: *mut core::ffi::c_void,
    pub _hugetlb_hwpoison: *mut core::ffi::c_void,
}
impl Default for folio__bindgen_ty_3__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct folio__bindgen_ty_3__bindgen_ty_2 {
    pub _flags_2a: core::ffi::c_ulong,
    pub _head_2a: core::ffi::c_ulong,
    pub _deferred_list: list_head,
}
impl Default for folio__bindgen_ty_3__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for folio__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for folio {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ptdesc {
    pub __page_flags: core::ffi::c_ulong,
    pub __bindgen_anon_1: ptdesc__bindgen_ty_1,
    pub __page_mapping: core::ffi::c_ulong,
    pub __bindgen_anon_2: ptdesc__bindgen_ty_2,
    pub __bindgen_anon_3: ptdesc__bindgen_ty_3,
    pub __page_type: core::ffi::c_uint,
    pub __page_refcount: atomic_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ptdesc__bindgen_ty_1 {
    pub pt_rcu_head: callback_head,
    pub pt_list: list_head,
    pub __bindgen_anon_1: ptdesc__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ptdesc__bindgen_ty_1__bindgen_ty_1 {
    pub _pt_pad_1: core::ffi::c_ulong,
    pub pmd_huge_pte: pgtable_t,
}
impl Default for ptdesc__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ptdesc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ptdesc__bindgen_ty_2 {
    pub pt_index: core::ffi::c_ulong,
    pub pt_mm: *mut mm_struct,
    pub pt_frag_refcount: atomic_t,
}
impl Default for ptdesc__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ptdesc__bindgen_ty_3 {
    pub _pt_pad_2: core::ffi::c_ulong,
    pub ptl: spinlock_t,
}
impl Default for ptdesc__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ptdesc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page_frag_cache {
    pub va: *mut core::ffi::c_void,
    pub offset: __u16,
    pub size: __u16,
    pub pagecnt_bias: core::ffi::c_uint,
    pub pfmemalloc: bool_,
}
impl Default for page_frag_cache {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type vm_flags_t = core::ffi::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm_region {
    pub vm_rb: rb_node,
    pub vm_flags: vm_flags_t,
    pub vm_start: core::ffi::c_ulong,
    pub vm_end: core::ffi::c_ulong,
    pub vm_top: core::ffi::c_ulong,
    pub vm_pgoff: core::ffi::c_ulong,
    pub vm_file: *mut file,
    pub vm_usage: core::ffi::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl Default for vm_region {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl vm_region {
    #[inline]
    pub fn vm_icache_flushed(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_vm_icache_flushed(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(vm_icache_flushed: bool_) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let vm_icache_flushed: u8 = unsafe { ::core::mem::transmute(vm_icache_flushed) };
            vm_icache_flushed as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vm_userfaultfd_ctx {}
#[repr(C)]
#[derive(Default)]
pub struct anon_vma_name {
    pub kref: kref,
    pub name: __IncompleteArrayField<core::ffi::c_char>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vma_lock {
    pub lock: rw_semaphore,
}
impl Default for vma_lock {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vma_numab_state {
    pub next_scan: core::ffi::c_ulong,
    pub pids_active_reset: core::ffi::c_ulong,
    pub pids_active: [core::ffi::c_ulong; 2usize],
    pub start_scan_seq: core::ffi::c_int,
    pub prev_scan_seq: core::ffi::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm_area_struct {
    pub __bindgen_anon_1: vm_area_struct__bindgen_ty_1,
    pub vm_mm: *mut mm_struct,
    pub vm_page_prot: pgprot_t,
    pub __bindgen_anon_2: vm_area_struct__bindgen_ty_2,
    pub detached: bool_,
    pub vm_lock_seq: core::ffi::c_int,
    pub vm_lock: *mut vma_lock,
    pub shared: vm_area_struct__bindgen_ty_3,
    pub anon_vma_chain: list_head,
    pub anon_vma: *mut anon_vma,
    pub vm_ops: *const vm_operations_struct,
    pub vm_pgoff: core::ffi::c_ulong,
    pub vm_file: *mut file,
    pub vm_private_data: *mut core::ffi::c_void,
    pub vm_userfaultfd_ctx: vm_userfaultfd_ctx,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vm_area_struct__bindgen_ty_1 {
    pub __bindgen_anon_1: vm_area_struct__bindgen_ty_1__bindgen_ty_1,
    pub vm_rcu: callback_head,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vm_area_struct__bindgen_ty_1__bindgen_ty_1 {
    pub vm_start: core::ffi::c_ulong,
    pub vm_end: core::ffi::c_ulong,
}
impl Default for vm_area_struct__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vm_area_struct__bindgen_ty_2 {
    pub vm_flags: vm_flags_t,
    pub __vm_flags: vm_flags_t,
}
impl Default for vm_area_struct__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm_area_struct__bindgen_ty_3 {
    pub rb: rb_node,
    pub rb_subtree_last: core::ffi::c_ulong,
}
impl Default for vm_area_struct__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for vm_area_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kioctx_table {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iommu_mm_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(64))]
pub struct mm_struct {
    pub __bindgen_anon_1: mm_struct__bindgen_ty_1,
    pub cpu_bitmap: __IncompleteArrayField<core::ffi::c_ulong>,
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct mm_struct__bindgen_ty_1 {
    pub __bindgen_anon_1: mm_struct__bindgen_ty_1__bindgen_ty_1,
    pub mm_mt: maple_tree,
    pub mmap_base: core::ffi::c_ulong,
    pub mmap_legacy_base: core::ffi::c_ulong,
    pub task_size: core::ffi::c_ulong,
    pub pgd: *mut pgd_t,
    pub membarrier_state: atomic_t,
    pub mm_users: atomic_t,
    pub pgtables_bytes: atomic_long_t,
    pub map_count: core::ffi::c_int,
    pub page_table_lock: spinlock_t,
    pub mmap_lock: rw_semaphore,
    pub mmlist: list_head,
    pub mm_lock_seq: core::ffi::c_int,
    pub hiwater_rss: core::ffi::c_ulong,
    pub hiwater_vm: core::ffi::c_ulong,
    pub total_vm: core::ffi::c_ulong,
    pub locked_vm: core::ffi::c_ulong,
    pub pinned_vm: atomic64_t,
    pub data_vm: core::ffi::c_ulong,
    pub exec_vm: core::ffi::c_ulong,
    pub stack_vm: core::ffi::c_ulong,
    pub def_flags: core::ffi::c_ulong,
    pub write_protect_seq: seqcount_t,
    pub arg_lock: spinlock_t,
    pub start_code: core::ffi::c_ulong,
    pub end_code: core::ffi::c_ulong,
    pub start_data: core::ffi::c_ulong,
    pub end_data: core::ffi::c_ulong,
    pub start_brk: core::ffi::c_ulong,
    pub brk: core::ffi::c_ulong,
    pub start_stack: core::ffi::c_ulong,
    pub arg_start: core::ffi::c_ulong,
    pub arg_end: core::ffi::c_ulong,
    pub env_start: core::ffi::c_ulong,
    pub env_end: core::ffi::c_ulong,
    pub saved_auxv: [core::ffi::c_ulong; 50usize],
    pub rss_stat: [percpu_counter; 4usize],
    pub binfmt: *mut linux_binfmt,
    pub context: mm_context_t,
    pub flags: core::ffi::c_ulong,
    pub ioctx_lock: spinlock_t,
    pub ioctx_table: *mut kioctx_table,
    pub user_ns: *mut user_namespace,
    pub exe_file: *mut file,
    pub tlb_flush_pending: atomic_t,
    pub tlb_flush_batched: atomic_t,
    pub uprobes_state: uprobes_state,
    pub async_put_work: work_struct,
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct mm_struct__bindgen_ty_1__bindgen_ty_1 {
    pub mm_count: atomic_t,
}
impl Default for mm_struct__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for mm_struct__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for mm_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut init_mm: mm_struct;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vma_iterator {
    pub mas: ma_state,
}
impl Default for vma_iterator {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmu_gather {
    _unused: [u8; 0],
}
extern "C" {
    pub fn tlb_gather_mmu(tlb: *mut mmu_gather, mm: *mut mm_struct);
}
extern "C" {
    pub fn tlb_gather_mmu_fullmm(tlb: *mut mmu_gather, mm: *mut mm_struct);
}
extern "C" {
    pub fn tlb_finish_mmu(tlb: *mut mmu_gather);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm_fault {
    _unused: [u8; 0],
}
pub type vm_fault_t = core::ffi::c_uint;
pub const vm_fault_reason_VM_FAULT_OOM: vm_fault_reason = 1;
pub const vm_fault_reason_VM_FAULT_SIGBUS: vm_fault_reason = 2;
pub const vm_fault_reason_VM_FAULT_MAJOR: vm_fault_reason = 4;
pub const vm_fault_reason_VM_FAULT_HWPOISON: vm_fault_reason = 16;
pub const vm_fault_reason_VM_FAULT_HWPOISON_LARGE: vm_fault_reason = 32;
pub const vm_fault_reason_VM_FAULT_SIGSEGV: vm_fault_reason = 64;
pub const vm_fault_reason_VM_FAULT_NOPAGE: vm_fault_reason = 256;
pub const vm_fault_reason_VM_FAULT_LOCKED: vm_fault_reason = 512;
pub const vm_fault_reason_VM_FAULT_RETRY: vm_fault_reason = 1024;
pub const vm_fault_reason_VM_FAULT_FALLBACK: vm_fault_reason = 2048;
pub const vm_fault_reason_VM_FAULT_DONE_COW: vm_fault_reason = 4096;
pub const vm_fault_reason_VM_FAULT_NEEDDSYNC: vm_fault_reason = 8192;
pub const vm_fault_reason_VM_FAULT_COMPLETED: vm_fault_reason = 16384;
pub const vm_fault_reason_VM_FAULT_HINDEX_MASK: vm_fault_reason = 983040;
pub type vm_fault_reason = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm_special_mapping {
    pub name: *const core::ffi::c_char,
    pub pages: *mut *mut page,
    pub fault: ::core::option::Option<
        unsafe extern "C" fn(
            sm: *const vm_special_mapping,
            vma: *mut vm_area_struct,
            vmf: *mut vm_fault,
        ) -> vm_fault_t,
    >,
    pub mremap: ::core::option::Option<
        unsafe extern "C" fn(
            sm: *const vm_special_mapping,
            new_vma: *mut vm_area_struct,
        ) -> core::ffi::c_int,
    >,
}
impl Default for vm_special_mapping {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const tlb_flush_reason_TLB_FLUSH_ON_TASK_SWITCH: tlb_flush_reason = 0;
pub const tlb_flush_reason_TLB_REMOTE_SHOOTDOWN: tlb_flush_reason = 1;
pub const tlb_flush_reason_TLB_LOCAL_SHOOTDOWN: tlb_flush_reason = 2;
pub const tlb_flush_reason_TLB_LOCAL_MM_SHOOTDOWN: tlb_flush_reason = 3;
pub const tlb_flush_reason_TLB_REMOTE_SEND_IPI: tlb_flush_reason = 4;
pub const tlb_flush_reason_NR_TLB_FLUSH_REASONS: tlb_flush_reason = 5;
pub type tlb_flush_reason = core::ffi::c_uint;
pub const fault_flag_FAULT_FLAG_WRITE: fault_flag = 1;
pub const fault_flag_FAULT_FLAG_MKWRITE: fault_flag = 2;
pub const fault_flag_FAULT_FLAG_ALLOW_RETRY: fault_flag = 4;
pub const fault_flag_FAULT_FLAG_RETRY_NOWAIT: fault_flag = 8;
pub const fault_flag_FAULT_FLAG_KILLABLE: fault_flag = 16;
pub const fault_flag_FAULT_FLAG_TRIED: fault_flag = 32;
pub const fault_flag_FAULT_FLAG_USER: fault_flag = 64;
pub const fault_flag_FAULT_FLAG_REMOTE: fault_flag = 128;
pub const fault_flag_FAULT_FLAG_INSTRUCTION: fault_flag = 256;
pub const fault_flag_FAULT_FLAG_INTERRUPTIBLE: fault_flag = 512;
pub const fault_flag_FAULT_FLAG_UNSHARE: fault_flag = 1024;
pub const fault_flag_FAULT_FLAG_ORIG_PTE_VALID: fault_flag = 2048;
pub const fault_flag_FAULT_FLAG_VMA_LOCK: fault_flag = 4096;
pub type fault_flag = core::ffi::c_uint;
pub type zap_flags_t = core::ffi::c_uint;
pub type cydp_t = core::ffi::c_int;
pub const FOLL_WRITE: _bindgen_ty_12 = 1;
pub const FOLL_GET: _bindgen_ty_12 = 2;
pub const FOLL_DUMP: _bindgen_ty_12 = 4;
pub const FOLL_FORCE: _bindgen_ty_12 = 8;
pub const FOLL_NOWAIT: _bindgen_ty_12 = 16;
pub const FOLL_NOFAULT: _bindgen_ty_12 = 32;
pub const FOLL_HWPOISON: _bindgen_ty_12 = 64;
pub const FOLL_ANON: _bindgen_ty_12 = 128;
pub const FOLL_LONGTERM: _bindgen_ty_12 = 256;
pub const FOLL_SPLIT_PMD: _bindgen_ty_12 = 512;
pub const FOLL_PCI_P2PDMA: _bindgen_ty_12 = 1024;
pub const FOLL_INTERRUPTIBLE: _bindgen_ty_12 = 2048;
pub const FOLL_HONOR_NUMA_FAULT: _bindgen_ty_12 = 4096;
pub type _bindgen_ty_12 = core::ffi::c_uint;
pub const pageflags_PG_locked: pageflags = 0;
pub const pageflags_PG_writeback: pageflags = 1;
pub const pageflags_PG_referenced: pageflags = 2;
pub const pageflags_PG_uptodate: pageflags = 3;
pub const pageflags_PG_dirty: pageflags = 4;
pub const pageflags_PG_lru: pageflags = 5;
pub const pageflags_PG_head: pageflags = 6;
pub const pageflags_PG_waiters: pageflags = 7;
pub const pageflags_PG_active: pageflags = 8;
pub const pageflags_PG_workingset: pageflags = 9;
pub const pageflags_PG_error: pageflags = 10;
pub const pageflags_PG_owner_priv_1: pageflags = 11;
pub const pageflags_PG_arch_1: pageflags = 12;
pub const pageflags_PG_reserved: pageflags = 13;
pub const pageflags_PG_private: pageflags = 14;
pub const pageflags_PG_private_2: pageflags = 15;
pub const pageflags_PG_mappedtodisk: pageflags = 16;
pub const pageflags_PG_reclaim: pageflags = 17;
pub const pageflags_PG_swapbacked: pageflags = 18;
pub const pageflags_PG_unevictable: pageflags = 19;
pub const pageflags_PG_mlocked: pageflags = 20;
pub const pageflags_PG_uncached: pageflags = 21;
pub const pageflags___NR_PAGEFLAGS: pageflags = 22;
pub const pageflags_PG_readahead: pageflags = 17;
pub const pageflags_PG_anon_exclusive: pageflags = 16;
pub const pageflags_PG_checked: pageflags = 11;
pub const pageflags_PG_swapcache: pageflags = 11;
pub const pageflags_PG_fscache: pageflags = 15;
pub const pageflags_PG_pinned: pageflags = 11;
pub const pageflags_PG_savepinned: pageflags = 4;
pub const pageflags_PG_foreign: pageflags = 11;
pub const pageflags_PG_xen_remapped: pageflags = 11;
pub const pageflags_PG_isolated: pageflags = 17;
pub const pageflags_PG_reported: pageflags = 3;
pub const pageflags_PG_has_hwpoisoned: pageflags = 10;
pub const pageflags_PG_large_rmappable: pageflags = 9;
pub type pageflags = core::ffi::c_uint;
extern "C" {
    pub fn stable_page_flags(page: *const page) -> u64_;
}
extern "C" {
    pub fn __folio_start_writeback(folio: *mut folio, keep_write: bool_);
}
extern "C" {
    pub fn set_page_writeback(page: *mut page);
}
pub const pagetype_PG_buddy: pagetype = 128;
pub const pagetype_PG_offline: pagetype = 256;
pub const pagetype_PG_table: pagetype = 512;
pub const pagetype_PG_guard: pagetype = 1024;
pub const pagetype_PG_hugetlb: pagetype = 2048;
pub const pagetype_PG_slab: pagetype = 4096;
pub const pagetype_PAGE_TYPE_BASE: pagetype = 4026531840;
pub const pagetype_PAGE_MAPCOUNT_RESERVE: pagetype = -128;
pub type pagetype = core::ffi::c_long;
extern "C" {
    pub fn page_offline_freeze();
}
extern "C" {
    pub fn page_offline_thaw();
}
extern "C" {
    pub fn page_offline_begin();
}
extern "C" {
    pub fn page_offline_end();
}
extern "C" {
    pub fn is_free_buddy_page(page: *const page) -> bool_;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct local_lock_t {}
extern "C" {
    pub static mut zswap_stored_pages: atomic_t;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct zswap_lruvec_state {}
pub const migratetype_MIGRATE_UNMOVABLE: migratetype = 0;
pub const migratetype_MIGRATE_MOVABLE: migratetype = 1;
pub const migratetype_MIGRATE_RECLAIMABLE: migratetype = 2;
pub const migratetype_MIGRATE_PCPTYPES: migratetype = 3;
pub const migratetype_MIGRATE_HIGHATOMIC: migratetype = 3;
pub const migratetype_MIGRATE_TYPES: migratetype = 4;
pub type migratetype = core::ffi::c_uint;
extern "C" {
    pub static migratetype_names: [*const core::ffi::c_char; 4usize];
}
extern "C" {
    pub static mut page_group_by_mobility_disabled: core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct free_area {
    pub free_list: [list_head; 4usize],
    pub nr_free: core::ffi::c_ulong,
}
impl Default for free_area {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const zone_stat_item_NR_FREE_PAGES: zone_stat_item = 0;
pub const zone_stat_item_NR_ZONE_LRU_BASE: zone_stat_item = 1;
pub const zone_stat_item_NR_ZONE_INACTIVE_ANON: zone_stat_item = 1;
pub const zone_stat_item_NR_ZONE_ACTIVE_ANON: zone_stat_item = 2;
pub const zone_stat_item_NR_ZONE_INACTIVE_FILE: zone_stat_item = 3;
pub const zone_stat_item_NR_ZONE_ACTIVE_FILE: zone_stat_item = 4;
pub const zone_stat_item_NR_ZONE_UNEVICTABLE: zone_stat_item = 5;
pub const zone_stat_item_NR_ZONE_WRITE_PENDING: zone_stat_item = 6;
pub const zone_stat_item_NR_MLOCK: zone_stat_item = 7;
pub const zone_stat_item_NR_BOUNCE: zone_stat_item = 8;
pub const zone_stat_item_NR_FREE_CMA_PAGES: zone_stat_item = 9;
pub const zone_stat_item_NR_VM_ZONE_STAT_ITEMS: zone_stat_item = 10;
pub type zone_stat_item = core::ffi::c_uint;
pub const node_stat_item_NR_LRU_BASE: node_stat_item = 0;
pub const node_stat_item_NR_INACTIVE_ANON: node_stat_item = 0;
pub const node_stat_item_NR_ACTIVE_ANON: node_stat_item = 1;
pub const node_stat_item_NR_INACTIVE_FILE: node_stat_item = 2;
pub const node_stat_item_NR_ACTIVE_FILE: node_stat_item = 3;
pub const node_stat_item_NR_UNEVICTABLE: node_stat_item = 4;
pub const node_stat_item_NR_SLAB_RECLAIMABLE_B: node_stat_item = 5;
pub const node_stat_item_NR_SLAB_UNRECLAIMABLE_B: node_stat_item = 6;
pub const node_stat_item_NR_ISOLATED_ANON: node_stat_item = 7;
pub const node_stat_item_NR_ISOLATED_FILE: node_stat_item = 8;
pub const node_stat_item_WORKINGSET_NODES: node_stat_item = 9;
pub const node_stat_item_WORKINGSET_REFAULT_BASE: node_stat_item = 10;
pub const node_stat_item_WORKINGSET_REFAULT_ANON: node_stat_item = 10;
pub const node_stat_item_WORKINGSET_REFAULT_FILE: node_stat_item = 11;
pub const node_stat_item_WORKINGSET_ACTIVATE_BASE: node_stat_item = 12;
pub const node_stat_item_WORKINGSET_ACTIVATE_ANON: node_stat_item = 12;
pub const node_stat_item_WORKINGSET_ACTIVATE_FILE: node_stat_item = 13;
pub const node_stat_item_WORKINGSET_RESTORE_BASE: node_stat_item = 14;
pub const node_stat_item_WORKINGSET_RESTORE_ANON: node_stat_item = 14;
pub const node_stat_item_WORKINGSET_RESTORE_FILE: node_stat_item = 15;
pub const node_stat_item_WORKINGSET_NODERECLAIM: node_stat_item = 16;
pub const node_stat_item_NR_ANON_MAPPED: node_stat_item = 17;
pub const node_stat_item_NR_FILE_MAPPED: node_stat_item = 18;
pub const node_stat_item_NR_FILE_PAGES: node_stat_item = 19;
pub const node_stat_item_NR_FILE_DIRTY: node_stat_item = 20;
pub const node_stat_item_NR_WRITEBACK: node_stat_item = 21;
pub const node_stat_item_NR_WRITEBACK_TEMP: node_stat_item = 22;
pub const node_stat_item_NR_SHMEM: node_stat_item = 23;
pub const node_stat_item_NR_SHMEM_THPS: node_stat_item = 24;
pub const node_stat_item_NR_SHMEM_PMDMAPPED: node_stat_item = 25;
pub const node_stat_item_NR_FILE_THPS: node_stat_item = 26;
pub const node_stat_item_NR_FILE_PMDMAPPED: node_stat_item = 27;
pub const node_stat_item_NR_ANON_THPS: node_stat_item = 28;
pub const node_stat_item_NR_VMSCAN_WRITE: node_stat_item = 29;
pub const node_stat_item_NR_VMSCAN_IMMEDIATE: node_stat_item = 30;
pub const node_stat_item_NR_DIRTIED: node_stat_item = 31;
pub const node_stat_item_NR_WRITTEN: node_stat_item = 32;
pub const node_stat_item_NR_THROTTLED_WRITTEN: node_stat_item = 33;
pub const node_stat_item_NR_KERNEL_MISC_RECLAIMABLE: node_stat_item = 34;
pub const node_stat_item_NR_FOLL_PIN_ACQUIRED: node_stat_item = 35;
pub const node_stat_item_NR_FOLL_PIN_RELEASED: node_stat_item = 36;
pub const node_stat_item_NR_KERNEL_STACK_KB: node_stat_item = 37;
pub const node_stat_item_NR_PAGETABLE: node_stat_item = 38;
pub const node_stat_item_NR_SECONDARY_PAGETABLE: node_stat_item = 39;
pub const node_stat_item_PGDEMOTE_KSWAPD: node_stat_item = 40;
pub const node_stat_item_PGDEMOTE_DIRECT: node_stat_item = 41;
pub const node_stat_item_PGDEMOTE_KHUGEPAGED: node_stat_item = 42;
pub const node_stat_item_NR_VM_NODE_STAT_ITEMS: node_stat_item = 43;
pub type node_stat_item = core::ffi::c_uint;
pub const lru_list_LRU_INACTIVE_ANON: lru_list = 0;
pub const lru_list_LRU_ACTIVE_ANON: lru_list = 1;
pub const lru_list_LRU_INACTIVE_FILE: lru_list = 2;
pub const lru_list_LRU_ACTIVE_FILE: lru_list = 3;
pub const lru_list_LRU_UNEVICTABLE: lru_list = 4;
pub const lru_list_NR_LRU_LISTS: lru_list = 5;
pub type lru_list = core::ffi::c_uint;
pub const vmscan_throttle_state_VMSCAN_THROTTLE_WRITEBACK: vmscan_throttle_state = 0;
pub const vmscan_throttle_state_VMSCAN_THROTTLE_ISOLATED: vmscan_throttle_state = 1;
pub const vmscan_throttle_state_VMSCAN_THROTTLE_NOPROGRESS: vmscan_throttle_state = 2;
pub const vmscan_throttle_state_VMSCAN_THROTTLE_CONGESTED: vmscan_throttle_state = 3;
pub const vmscan_throttle_state_NR_VMSCAN_THROTTLE: vmscan_throttle_state = 4;
pub type vmscan_throttle_state = core::ffi::c_uint;
pub const lruvec_flags_LRUVEC_CGROUP_CONGESTED: lruvec_flags = 0;
pub const lruvec_flags_LRUVEC_NODE_CONGESTED: lruvec_flags = 1;
pub type lruvec_flags = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page_vma_mapped_walk {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lruvec {
    pub lists: [list_head; 5usize],
    pub lru_lock: spinlock_t,
    pub anon_cost: core::ffi::c_ulong,
    pub file_cost: core::ffi::c_ulong,
    pub nonresident_age: atomic_long_t,
    pub refaults: [core::ffi::c_ulong; 2usize],
    pub flags: core::ffi::c_ulong,
    pub zswap_lruvec_state: zswap_lruvec_state,
}
impl Default for lruvec {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type isolate_mode_t = core::ffi::c_uint;
pub const zone_watermarks_WMARK_MIN: zone_watermarks = 0;
pub const zone_watermarks_WMARK_LOW: zone_watermarks = 1;
pub const zone_watermarks_WMARK_HIGH: zone_watermarks = 2;
pub const zone_watermarks_WMARK_PROMO: zone_watermarks = 3;
pub const zone_watermarks_NR_WMARK: zone_watermarks = 4;
pub type zone_watermarks = core::ffi::c_uint;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct per_cpu_pages {
    pub lock: spinlock_t,
    pub count: core::ffi::c_int,
    pub high: core::ffi::c_int,
    pub high_min: core::ffi::c_int,
    pub high_max: core::ffi::c_int,
    pub batch: core::ffi::c_int,
    pub flags: u8_,
    pub alloc_factor: u8_,
    pub free_count: core::ffi::c_short,
    pub lists: [list_head; 12usize],
}
impl Default for per_cpu_pages {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct per_cpu_zonestat {
    pub vm_stat_diff: [s8; 10usize],
    pub stat_threshold: s8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct per_cpu_nodestat {
    pub stat_threshold: s8,
    pub vm_node_stat_diff: [s8; 43usize],
}
impl Default for per_cpu_nodestat {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const zone_type_ZONE_DMA: zone_type = 0;
pub const zone_type_ZONE_DMA32: zone_type = 1;
pub const zone_type_ZONE_NORMAL: zone_type = 2;
pub const zone_type_ZONE_MOVABLE: zone_type = 3;
pub const zone_type___MAX_NR_ZONES: zone_type = 4;
pub type zone_type = core::ffi::c_uint;
#[repr(C)]
#[repr(align(64))]
pub struct zone {
    pub _watermark: [core::ffi::c_ulong; 4usize],
    pub watermark_boost: core::ffi::c_ulong,
    pub nr_reserved_highatomic: core::ffi::c_ulong,
    pub lowmem_reserve: [core::ffi::c_long; 4usize],
    pub zone_pgdat: *mut pglist_data,
    pub per_cpu_pageset: *mut per_cpu_pages,
    pub per_cpu_zonestats: *mut per_cpu_zonestat,
    pub pageset_high_min: core::ffi::c_int,
    pub pageset_high_max: core::ffi::c_int,
    pub pageset_batch: core::ffi::c_int,
    pub zone_start_pfn: core::ffi::c_ulong,
    pub managed_pages: atomic_long_t,
    pub spanned_pages: core::ffi::c_ulong,
    pub present_pages: core::ffi::c_ulong,
    pub name: *const core::ffi::c_char,
    pub initialized: core::ffi::c_int,
    pub __bindgen_padding_0: [u64; 3usize],
    pub _pad1_: cacheline_padding,
    pub free_area: [free_area; 11usize],
    pub flags: core::ffi::c_ulong,
    pub lock: spinlock_t,
    pub __bindgen_padding_1: [u64; 3usize],
    pub _pad2_: cacheline_padding,
    pub percpu_drift_mark: core::ffi::c_ulong,
    pub contiguous: bool_,
    pub __bindgen_padding_2: [u64; 6usize],
    pub _pad3_: cacheline_padding,
    pub vm_stat: [atomic_long_t; 10usize],
    pub vm_numa_event: __IncompleteArrayField<atomic_long_t>,
}
impl Default for zone {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const pgdat_flags_PGDAT_DIRTY: pgdat_flags = 0;
pub const pgdat_flags_PGDAT_WRITEBACK: pgdat_flags = 1;
pub const pgdat_flags_PGDAT_RECLAIM_LOCKED: pgdat_flags = 2;
pub type pgdat_flags = core::ffi::c_uint;
pub const zone_flags_ZONE_BOOSTED_WATERMARK: zone_flags = 0;
pub const zone_flags_ZONE_RECLAIM_ACTIVE: zone_flags = 1;
pub const zone_flags_ZONE_BELOW_HIGH: zone_flags = 2;
pub type zone_flags = core::ffi::c_uint;
pub const ZONELIST_FALLBACK: _bindgen_ty_13 = 0;
pub const MAX_ZONELISTS: _bindgen_ty_13 = 1;
pub type _bindgen_ty_13 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct zoneref {
    pub zone: *mut zone,
    pub zone_idx: core::ffi::c_int,
}
impl Default for zoneref {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct zonelist {
    pub _zonerefs: [zoneref; 5usize],
}
impl Default for zonelist {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut mem_map: *mut page;
}
#[repr(C)]
#[repr(align(64))]
pub struct pglist_data {
    pub node_zones: [zone; 4usize],
    pub node_zonelists: [zonelist; 1usize],
    pub nr_zones: core::ffi::c_int,
    pub node_start_pfn: core::ffi::c_ulong,
    pub node_present_pages: core::ffi::c_ulong,
    pub node_spanned_pages: core::ffi::c_ulong,
    pub node_id: core::ffi::c_int,
    pub kswapd_wait: wait_queue_head_t,
    pub pfmemalloc_wait: wait_queue_head_t,
    pub reclaim_wait: [wait_queue_head_t; 4usize],
    pub nr_writeback_throttled: atomic_t,
    pub nr_reclaim_start: core::ffi::c_ulong,
    pub kswapd: *mut task_struct,
    pub kswapd_order: core::ffi::c_int,
    pub kswapd_highest_zoneidx: zone_type,
    pub kswapd_failures: core::ffi::c_int,
    pub totalreserve_pages: core::ffi::c_ulong,
    pub __bindgen_padding_0: u64,
    pub _pad1_: cacheline_padding,
    pub __lruvec: lruvec,
    pub flags: core::ffi::c_ulong,
    pub __bindgen_padding_1: [u64; 6usize],
    pub _pad2_: cacheline_padding,
    pub per_cpu_nodestats: *mut per_cpu_nodestat,
    pub vm_stat: [atomic_long_t; 43usize],
}
impl Default for pglist_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type pg_data_t = pglist_data;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rcu_cblist {
    pub head: *mut callback_head,
    pub tail: *mut *mut callback_head,
    pub len: core::ffi::c_long,
}
impl Default for rcu_cblist {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rcu_segcblist {
    pub head: *mut callback_head,
    pub tails: [*mut *mut callback_head; 4usize],
    pub gp_seq: [core::ffi::c_ulong; 4usize],
    pub len: core::ffi::c_long,
    pub seglen: [core::ffi::c_long; 4usize],
    pub flags: u8_,
}
impl Default for rcu_segcblist {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn init_srcu_struct(ssp: *mut srcu_struct) -> core::ffi::c_int;
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct srcu_data {
    pub srcu_lock_count: [atomic_long_t; 2usize],
    pub srcu_unlock_count: [atomic_long_t; 2usize],
    pub srcu_nmi_safety: core::ffi::c_int,
    pub __bindgen_padding_0: [u32; 7usize],
    pub lock: spinlock_t,
    pub srcu_cblist: rcu_segcblist,
    pub srcu_gp_seq_needed: core::ffi::c_ulong,
    pub srcu_gp_seq_needed_exp: core::ffi::c_ulong,
    pub srcu_cblist_invoking: bool_,
    pub delay_work: timer_list,
    pub work: work_struct,
    pub srcu_barrier_head: callback_head,
    pub mynode: *mut srcu_node,
    pub grpmask: core::ffi::c_ulong,
    pub cpu: core::ffi::c_int,
    pub ssp: *mut srcu_struct,
}
impl Default for srcu_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct srcu_node {
    pub lock: spinlock_t,
    pub srcu_have_cbs: [core::ffi::c_ulong; 4usize],
    pub srcu_data_have_cbs: [core::ffi::c_ulong; 4usize],
    pub srcu_gp_seq_needed_exp: core::ffi::c_ulong,
    pub srcu_parent: *mut srcu_node,
    pub grplo: core::ffi::c_int,
    pub grphi: core::ffi::c_int,
}
impl Default for srcu_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct srcu_usage {
    pub node: *mut srcu_node,
    pub level: [*mut srcu_node; 2usize],
    pub srcu_size_state: core::ffi::c_int,
    pub srcu_cb_mutex: mutex,
    pub lock: spinlock_t,
    pub srcu_gp_mutex: mutex,
    pub srcu_gp_seq: core::ffi::c_ulong,
    pub srcu_gp_seq_needed: core::ffi::c_ulong,
    pub srcu_gp_seq_needed_exp: core::ffi::c_ulong,
    pub srcu_gp_start: core::ffi::c_ulong,
    pub srcu_last_gp_end: core::ffi::c_ulong,
    pub srcu_size_jiffies: core::ffi::c_ulong,
    pub srcu_n_lock_retries: core::ffi::c_ulong,
    pub srcu_n_exp_nodelay: core::ffi::c_ulong,
    pub sda_is_static: bool_,
    pub srcu_barrier_seq: core::ffi::c_ulong,
    pub srcu_barrier_mutex: mutex,
    pub srcu_barrier_completion: completion,
    pub srcu_barrier_cpu_cnt: atomic_t,
    pub reschedule_jiffies: core::ffi::c_ulong,
    pub reschedule_count: core::ffi::c_ulong,
    pub work: delayed_work,
    pub srcu_ssp: *mut srcu_struct,
}
impl Default for srcu_usage {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct srcu_struct {
    pub srcu_idx: core::ffi::c_uint,
    pub sda: *mut srcu_data,
    pub dep_map: lockdep_map,
    pub srcu_sup: *mut srcu_usage,
}
impl Default for srcu_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn synchronize_srcu_expedited(ssp: *mut srcu_struct);
}
extern "C" {
    pub fn srcu_barrier(ssp: *mut srcu_struct);
}
extern "C" {
    pub fn srcu_torture_stats_print(
        ssp: *mut srcu_struct,
        tt: *mut core::ffi::c_char,
        tf: *mut core::ffi::c_char,
    );
}
extern "C" {
    pub fn call_srcu(
        ssp: *mut srcu_struct,
        head: *mut callback_head,
        func: ::core::option::Option<unsafe extern "C" fn(head: *mut callback_head)>,
    );
}
extern "C" {
    pub fn cleanup_srcu_struct(ssp: *mut srcu_struct);
}
extern "C" {
    pub fn __srcu_read_lock(ssp: *mut srcu_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn __srcu_read_unlock(ssp: *mut srcu_struct, idx: core::ffi::c_int);
}
extern "C" {
    pub fn synchronize_srcu(ssp: *mut srcu_struct);
}
extern "C" {
    pub fn get_state_synchronize_srcu(ssp: *mut srcu_struct) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn start_poll_synchronize_srcu(ssp: *mut srcu_struct) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn poll_state_synchronize_srcu(ssp: *mut srcu_struct, cookie: core::ffi::c_ulong) -> bool_;
}
extern "C" {
    pub fn srcu_init();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct class_srcu_t {
    pub lock: *mut srcu_struct,
    pub idx: core::ffi::c_int,
}
impl Default for class_srcu_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type notifier_fn_t = ::core::option::Option<
    unsafe extern "C" fn(
        nb: *mut notifier_block,
        action: core::ffi::c_ulong,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct notifier_block {
    pub notifier_call: notifier_fn_t,
    pub next: *mut notifier_block,
    pub priority: core::ffi::c_int,
}
impl Default for notifier_block {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct atomic_notifier_head {
    pub lock: spinlock_t,
    pub head: *mut notifier_block,
}
impl Default for atomic_notifier_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct blocking_notifier_head {
    pub rwsem: rw_semaphore,
    pub head: *mut notifier_block,
}
impl Default for blocking_notifier_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct raw_notifier_head {
    pub head: *mut notifier_block,
}
impl Default for raw_notifier_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct srcu_notifier_head {
    pub mutex: mutex,
    pub srcuu: srcu_usage,
    pub srcu: srcu_struct,
    pub head: *mut notifier_block,
}
impl Default for srcu_notifier_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn srcu_init_notifier_head(nh: *mut srcu_notifier_head);
}
extern "C" {
    pub fn atomic_notifier_chain_register(
        nh: *mut atomic_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn blocking_notifier_chain_register(
        nh: *mut blocking_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn raw_notifier_chain_register(
        nh: *mut raw_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn srcu_notifier_chain_register(
        nh: *mut srcu_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn atomic_notifier_chain_register_unique_prio(
        nh: *mut atomic_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn blocking_notifier_chain_register_unique_prio(
        nh: *mut blocking_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn atomic_notifier_chain_unregister(
        nh: *mut atomic_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn blocking_notifier_chain_unregister(
        nh: *mut blocking_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn raw_notifier_chain_unregister(
        nh: *mut raw_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn srcu_notifier_chain_unregister(
        nh: *mut srcu_notifier_head,
        nb: *mut notifier_block,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn atomic_notifier_call_chain(
        nh: *mut atomic_notifier_head,
        val: core::ffi::c_ulong,
        v: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn blocking_notifier_call_chain(
        nh: *mut blocking_notifier_head,
        val: core::ffi::c_ulong,
        v: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn raw_notifier_call_chain(
        nh: *mut raw_notifier_head,
        val: core::ffi::c_ulong,
        v: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn srcu_notifier_call_chain(
        nh: *mut srcu_notifier_head,
        val: core::ffi::c_ulong,
        v: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn blocking_notifier_call_chain_robust(
        nh: *mut blocking_notifier_head,
        val_up: core::ffi::c_ulong,
        val_down: core::ffi::c_ulong,
        v: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn raw_notifier_call_chain_robust(
        nh: *mut raw_notifier_head,
        val_up: core::ffi::c_ulong,
        val_down: core::ffi::c_ulong,
        v: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn atomic_notifier_call_chain_is_empty(nh: *mut atomic_notifier_head) -> bool_;
}
extern "C" {
    pub static mut reboot_notifier_list: blocking_notifier_head;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct memory_group {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct resource {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vmem_altmap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dev_pagemap {
    _unused: [u8; 0],
}
extern "C" {
    pub fn arch_get_mappable_range() -> range;
}
extern "C" {
    pub fn build_all_zonelists(pgdat: *mut pg_data_t);
}
extern "C" {
    pub fn wakeup_kswapd(
        zone: *mut zone,
        gfp_mask: gfp_t,
        order: core::ffi::c_int,
        highest_zoneidx: zone_type,
    );
}
extern "C" {
    pub fn __zone_watermark_ok(
        z: *mut zone,
        order: core::ffi::c_uint,
        mark: core::ffi::c_ulong,
        highest_zoneidx: core::ffi::c_int,
        alloc_flags: core::ffi::c_uint,
        free_pages: core::ffi::c_long,
    ) -> bool_;
}
extern "C" {
    pub fn zone_watermark_ok(
        z: *mut zone,
        order: core::ffi::c_uint,
        mark: core::ffi::c_ulong,
        highest_zoneidx: core::ffi::c_int,
        alloc_flags: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn zone_watermark_ok_safe(
        z: *mut zone,
        order: core::ffi::c_uint,
        mark: core::ffi::c_ulong,
        highest_zoneidx: core::ffi::c_int,
    ) -> bool_;
}
pub const meminit_context_MEMINIT_EARLY: meminit_context = 0;
pub const meminit_context_MEMINIT_HOTPLUG: meminit_context = 1;
pub type meminit_context = core::ffi::c_uint;
extern "C" {
    pub fn init_currently_empty_zone(
        zone: *mut zone,
        start_pfn: core::ffi::c_ulong,
        size: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn lruvec_init(lruvec: *mut lruvec);
}
extern "C" {
    pub static mut movable_zone: core::ffi::c_int;
}
extern "C" {
    pub fn has_managed_dma() -> bool_;
}
extern "C" {
    pub static mut contig_page_data: pglist_data;
}
extern "C" {
    pub fn first_online_pgdat() -> *mut pglist_data;
}
extern "C" {
    pub fn next_online_pgdat(pgdat: *mut pglist_data) -> *mut pglist_data;
}
extern "C" {
    pub fn next_zone(zone: *mut zone) -> *mut zone;
}
extern "C" {
    pub fn __next_zones_zonelist(
        z: *mut zoneref,
        highest_zoneidx: zone_type,
        nodes: *mut nodemask_t,
    ) -> *mut zoneref;
}
#[repr(C)]
pub struct mem_section_usage {
    pub rcu: callback_head,
    pub subsection_map: [core::ffi::c_ulong; 1usize],
    pub pageblock_flags: __IncompleteArrayField<core::ffi::c_ulong>,
}
impl Default for mem_section_usage {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn subsection_map_init(pfn: core::ffi::c_ulong, nr_pages: core::ffi::c_ulong);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page_ext {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mem_section {
    pub section_mem_map: core::ffi::c_ulong,
    pub usage: *mut mem_section_usage,
}
impl Default for mem_section {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut mem_section: *mut *mut mem_section;
}
extern "C" {
    pub fn mem_section_usage_size() -> usize;
}
pub const SECTION_MARKED_PRESENT_BIT: _bindgen_ty_14 = 0;
pub const SECTION_HAS_MEM_MAP_BIT: _bindgen_ty_14 = 1;
pub const SECTION_IS_ONLINE_BIT: _bindgen_ty_14 = 2;
pub const SECTION_IS_EARLY_BIT: _bindgen_ty_14 = 3;
pub const SECTION_MAP_LAST_BIT: _bindgen_ty_14 = 4;
pub type _bindgen_ty_14 = core::ffi::c_uint;
extern "C" {
    pub static mut __highest_present_section_nr: core::ffi::c_ulong;
}
extern "C" {
    pub fn sparse_init();
}
extern "C" {
    pub fn topology_normalize_cpu_scale();
}
extern "C" {
    pub fn topology_update_cpu_topology() -> core::ffi::c_int;
}
extern "C" {
    pub fn topology_init_cpu_capacity_cppc();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct device_node {
    _unused: [u8; 0],
}
extern "C" {
    pub fn topology_parse_cpu_capacity(cpu_node: *mut device_node, cpu: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub static mut cpu_scale: core::ffi::c_ulong;
}
extern "C" {
    pub fn topology_set_cpu_scale(cpu: core::ffi::c_uint, capacity: core::ffi::c_ulong);
}
extern "C" {
    pub static mut capacity_freq_ref: core::ffi::c_ulong;
}
extern "C" {
    pub static mut arch_freq_scale: core::ffi::c_ulong;
}
extern "C" {
    pub fn topology_set_freq_scale(
        cpus: *const cpumask,
        cur_freq: core::ffi::c_ulong,
        max_freq: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn topology_scale_freq_invariant() -> bool_;
}
pub const scale_freq_source_SCALE_FREQ_SOURCE_CPUFREQ: scale_freq_source = 0;
pub const scale_freq_source_SCALE_FREQ_SOURCE_ARCH: scale_freq_source = 1;
pub const scale_freq_source_SCALE_FREQ_SOURCE_CPPC: scale_freq_source = 2;
pub type scale_freq_source = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct scale_freq_data {
    pub source: scale_freq_source,
    pub set_freq_scale: ::core::option::Option<unsafe extern "C" fn()>,
}
impl Default for scale_freq_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn topology_scale_freq_tick();
}
extern "C" {
    pub fn topology_set_scale_freq_source(data: *mut scale_freq_data, cpus: *const cpumask);
}
extern "C" {
    pub fn topology_clear_scale_freq_source(source: scale_freq_source, cpus: *const cpumask);
}
extern "C" {
    pub static mut hw_pressure: core::ffi::c_ulong;
}
extern "C" {
    pub fn topology_update_hw_pressure(cpus: *const cpumask, capped_freq: core::ffi::c_ulong);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cpu_topology {
    pub thread_id: core::ffi::c_int,
    pub core_id: core::ffi::c_int,
    pub cluster_id: core::ffi::c_int,
    pub package_id: core::ffi::c_int,
    pub thread_sibling: cpumask_t,
    pub core_sibling: cpumask_t,
    pub cluster_sibling: cpumask_t,
    pub llc_sibling: cpumask_t,
}
pub const x86_topology_domains_TOPO_SMT_DOMAIN: x86_topology_domains = 0;
pub const x86_topology_domains_TOPO_CORE_DOMAIN: x86_topology_domains = 1;
pub const x86_topology_domains_TOPO_MODULE_DOMAIN: x86_topology_domains = 2;
pub const x86_topology_domains_TOPO_TILE_DOMAIN: x86_topology_domains = 3;
pub const x86_topology_domains_TOPO_DIE_DOMAIN: x86_topology_domains = 4;
pub const x86_topology_domains_TOPO_DIEGRP_DOMAIN: x86_topology_domains = 5;
pub const x86_topology_domains_TOPO_PKG_DOMAIN: x86_topology_domains = 6;
pub const x86_topology_domains_TOPO_MAX_DOMAIN: x86_topology_domains = 7;
pub type x86_topology_domains = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_topology_system {
    pub dom_shifts: [core::ffi::c_uint; 7usize],
    pub dom_size: [core::ffi::c_uint; 7usize],
}
extern "C" {
    pub static mut x86_topo_system: x86_topology_system;
}
extern "C" {
    pub fn cpu_coregroup_mask(cpu: core::ffi::c_int) -> *const cpumask;
}
extern "C" {
    pub fn cpu_clustergroup_mask(cpu: core::ffi::c_int) -> *const cpumask;
}
extern "C" {
    pub static mut __max_dies_per_package: core::ffi::c_uint;
}
extern "C" {
    pub static mut __max_logical_packages: core::ffi::c_uint;
}
extern "C" {
    pub static mut __max_threads_per_core: core::ffi::c_uint;
}
extern "C" {
    pub static mut __num_threads_per_package: core::ffi::c_uint;
}
extern "C" {
    pub static mut __num_cores_per_package: core::ffi::c_uint;
}
extern "C" {
    pub fn topology_get_logical_id(
        apicid: u32_,
        at_level: x86_topology_domains,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static mut __max_smt_threads: core::ffi::c_int;
}
pub const cpuhp_smt_control_CPU_SMT_ENABLED: cpuhp_smt_control = 0;
pub const cpuhp_smt_control_CPU_SMT_DISABLED: cpuhp_smt_control = 1;
pub const cpuhp_smt_control_CPU_SMT_FORCE_DISABLED: cpuhp_smt_control = 2;
pub const cpuhp_smt_control_CPU_SMT_NOT_SUPPORTED: cpuhp_smt_control = 3;
pub const cpuhp_smt_control_CPU_SMT_NOT_IMPLEMENTED: cpuhp_smt_control = 4;
pub type cpuhp_smt_control = core::ffi::c_uint;
extern "C" {
    pub static mut cpu_smt_control: cpuhp_smt_control;
}
extern "C" {
    pub static mut cpu_smt_num_threads: core::ffi::c_uint;
}
extern "C" {
    pub fn cpu_smt_disable(force: bool_);
}
extern "C" {
    pub fn cpu_smt_set_num_threads(num_threads: core::ffi::c_uint, max_threads: core::ffi::c_uint);
}
extern "C" {
    pub fn cpu_smt_possible() -> bool_;
}
extern "C" {
    pub fn cpuhp_smt_enable() -> core::ffi::c_int;
}
extern "C" {
    pub fn cpuhp_smt_disable(ctrlval: cpuhp_smt_control) -> core::ffi::c_int;
}
extern "C" {
    pub static mut __amd_nodes_per_pkg: core::ffi::c_uint;
}
extern "C" {
    pub static mut __cpu_primary_thread_mask: cpumask;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pci_bus {
    _unused: [u8; 0],
}
extern "C" {
    pub fn x86_pci_root_bus_node(bus: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn x86_pci_root_bus_resources(bus: core::ffi::c_int, resources: *mut list_head);
}
extern "C" {
    pub static mut x86_topology_update: bool_;
}
extern "C" {
    pub static mut sched_core_priority: core::ffi::c_int;
}
extern "C" {
    pub static mut sysctl_sched_itmt_enabled: core::ffi::c_uint;
}
extern "C" {
    pub fn sched_set_itmt_core_prio(prio: core::ffi::c_int, core_cpu: core::ffi::c_int);
}
extern "C" {
    pub fn sched_set_itmt_support() -> core::ffi::c_int;
}
extern "C" {
    pub fn sched_clear_itmt_support();
}
extern "C" {
    pub static mut arch_scale_freq_key: static_key_false;
}
extern "C" {
    pub fn arch_set_max_freq_ratio(turbo_disabled: bool_);
}
extern "C" {
    pub fn freq_invariance_set_perf_ratio(ratio: u64_, turbo_disabled: bool_);
}
extern "C" {
    pub fn arch_scale_freq_tick();
}
extern "C" {
    pub fn init_freq_invariance_cppc();
}
extern "C" {
    pub fn arch_update_cpu_topology() -> core::ffi::c_int;
}
extern "C" {
    pub static mut node_reclaim_distance: core::ffi::c_int;
}
extern "C" {
    pub fn __alloc_pages_noprof(
        gfp: gfp_t,
        order: core::ffi::c_uint,
        preferred_nid: core::ffi::c_int,
        nodemask: *mut nodemask_t,
    ) -> *mut page;
}
extern "C" {
    pub fn __folio_alloc_noprof(
        gfp: gfp_t,
        order: core::ffi::c_uint,
        preferred_nid: core::ffi::c_int,
        nodemask: *mut nodemask_t,
    ) -> *mut folio;
}
extern "C" {
    pub fn alloc_pages_bulk_noprof(
        gfp: gfp_t,
        preferred_nid: core::ffi::c_int,
        nodemask: *mut nodemask_t,
        nr_pages: core::ffi::c_int,
        page_list: *mut list_head,
        page_array: *mut *mut page,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn alloc_pages_bulk_array_mempolicy_noprof(
        gfp: gfp_t,
        nr_pages: core::ffi::c_ulong,
        page_array: *mut *mut page,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn get_free_pages_noprof(gfp_mask: gfp_t, order: core::ffi::c_uint) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn get_zeroed_page_noprof(gfp_mask: gfp_t) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn alloc_pages_exact_noprof(size: usize, gfp_mask: gfp_t) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn free_pages_exact(virt: *mut core::ffi::c_void, size: usize);
}
extern "C" {
    pub fn alloc_pages_exact_nid_noprof(
        nid: core::ffi::c_int,
        size: usize,
        gfp_mask: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __free_pages(page: *mut page, order: core::ffi::c_uint);
}
extern "C" {
    pub fn free_pages(addr: core::ffi::c_ulong, order: core::ffi::c_uint);
}
extern "C" {
    pub fn page_frag_cache_drain(nc: *mut page_frag_cache);
}
extern "C" {
    pub fn __page_frag_cache_drain(page: *mut page, count: core::ffi::c_uint);
}
extern "C" {
    pub fn __page_frag_alloc_align(
        nc: *mut page_frag_cache,
        fragsz: core::ffi::c_uint,
        gfp_mask: gfp_t,
        align_mask: core::ffi::c_uint,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn page_frag_free(addr: *mut core::ffi::c_void);
}
extern "C" {
    pub fn page_alloc_init_cpuhp();
}
extern "C" {
    pub fn decay_pcp_high(zone: *mut zone, pcp: *mut per_cpu_pages) -> core::ffi::c_int;
}
extern "C" {
    pub fn drain_zone_pages(zone: *mut zone, pcp: *mut per_cpu_pages);
}
extern "C" {
    pub fn drain_all_pages(zone: *mut zone);
}
extern "C" {
    pub fn drain_local_pages(zone: *mut zone);
}
extern "C" {
    pub fn page_alloc_init_late();
}
extern "C" {
    pub fn setup_pcp_cacheinfo(cpu: core::ffi::c_uint);
}
extern "C" {
    pub static mut gfp_allowed_mask: gfp_t;
}
extern "C" {
    pub fn gfp_pfmemalloc_allowed(gfp_mask: gfp_t) -> bool_;
}
extern "C" {
    pub fn vma_thp_gfp_mask(vma: *mut vm_area_struct) -> gfp_t;
}
extern "C" {
    pub fn free_contig_range(pfn: core::ffi::c_ulong, nr_pages: core::ffi::c_ulong);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sysctl_args {
    pub name: *mut core::ffi::c_int,
    pub nlen: core::ffi::c_int,
    pub oldval: *mut core::ffi::c_void,
    pub oldlenp: *mut usize,
    pub newval: *mut core::ffi::c_void,
    pub newlen: usize,
    pub __unused: [core::ffi::c_ulong; 4usize],
}
impl Default for __sysctl_args {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const CTL_KERN: _bindgen_ty_15 = 1;
pub const CTL_VM: _bindgen_ty_15 = 2;
pub const CTL_NET: _bindgen_ty_15 = 3;
pub const CTL_PROC: _bindgen_ty_15 = 4;
pub const CTL_FS: _bindgen_ty_15 = 5;
pub const CTL_DEBUG: _bindgen_ty_15 = 6;
pub const CTL_DEV: _bindgen_ty_15 = 7;
pub const CTL_BUS: _bindgen_ty_15 = 8;
pub const CTL_ABI: _bindgen_ty_15 = 9;
pub const CTL_CPU: _bindgen_ty_15 = 10;
pub const CTL_ARLAN: _bindgen_ty_15 = 254;
pub const CTL_S390DBF: _bindgen_ty_15 = 5677;
pub const CTL_SUNRPC: _bindgen_ty_15 = 7249;
pub const CTL_PM: _bindgen_ty_15 = 9899;
pub const CTL_FRV: _bindgen_ty_15 = 9898;
pub type _bindgen_ty_15 = core::ffi::c_uint;
pub const CTL_BUS_ISA: _bindgen_ty_16 = 1;
pub type _bindgen_ty_16 = core::ffi::c_uint;
pub const INOTIFY_MAX_USER_INSTANCES: _bindgen_ty_17 = 1;
pub const INOTIFY_MAX_USER_WATCHES: _bindgen_ty_17 = 2;
pub const INOTIFY_MAX_QUEUED_EVENTS: _bindgen_ty_17 = 3;
pub type _bindgen_ty_17 = core::ffi::c_uint;
pub const KERN_OSTYPE: _bindgen_ty_18 = 1;
pub const KERN_OSRELEASE: _bindgen_ty_18 = 2;
pub const KERN_OSREV: _bindgen_ty_18 = 3;
pub const KERN_VERSION: _bindgen_ty_18 = 4;
pub const KERN_SECUREMASK: _bindgen_ty_18 = 5;
pub const KERN_PROF: _bindgen_ty_18 = 6;
pub const KERN_NODENAME: _bindgen_ty_18 = 7;
pub const KERN_DOMAINNAME: _bindgen_ty_18 = 8;
pub const KERN_PANIC: _bindgen_ty_18 = 15;
pub const KERN_REALROOTDEV: _bindgen_ty_18 = 16;
pub const KERN_SPARC_REBOOT: _bindgen_ty_18 = 21;
pub const KERN_CTLALTDEL: _bindgen_ty_18 = 22;
pub const KERN_PRINTK: _bindgen_ty_18 = 23;
pub const KERN_NAMETRANS: _bindgen_ty_18 = 24;
pub const KERN_PPC_HTABRECLAIM: _bindgen_ty_18 = 25;
pub const KERN_PPC_ZEROPAGED: _bindgen_ty_18 = 26;
pub const KERN_PPC_POWERSAVE_NAP: _bindgen_ty_18 = 27;
pub const KERN_MODPROBE: _bindgen_ty_18 = 28;
pub const KERN_SG_BIG_BUFF: _bindgen_ty_18 = 29;
pub const KERN_ACCT: _bindgen_ty_18 = 30;
pub const KERN_PPC_L2CR: _bindgen_ty_18 = 31;
pub const KERN_RTSIGNR: _bindgen_ty_18 = 32;
pub const KERN_RTSIGMAX: _bindgen_ty_18 = 33;
pub const KERN_SHMMAX: _bindgen_ty_18 = 34;
pub const KERN_MSGMAX: _bindgen_ty_18 = 35;
pub const KERN_MSGMNB: _bindgen_ty_18 = 36;
pub const KERN_MSGPOOL: _bindgen_ty_18 = 37;
pub const KERN_SYSRQ: _bindgen_ty_18 = 38;
pub const KERN_MAX_THREADS: _bindgen_ty_18 = 39;
pub const KERN_RANDOM: _bindgen_ty_18 = 40;
pub const KERN_SHMALL: _bindgen_ty_18 = 41;
pub const KERN_MSGMNI: _bindgen_ty_18 = 42;
pub const KERN_SEM: _bindgen_ty_18 = 43;
pub const KERN_SPARC_STOP_A: _bindgen_ty_18 = 44;
pub const KERN_SHMMNI: _bindgen_ty_18 = 45;
pub const KERN_OVERFLOWUID: _bindgen_ty_18 = 46;
pub const KERN_OVERFLOWGID: _bindgen_ty_18 = 47;
pub const KERN_SHMPATH: _bindgen_ty_18 = 48;
pub const KERN_HOTPLUG: _bindgen_ty_18 = 49;
pub const KERN_IEEE_EMULATION_WARNINGS: _bindgen_ty_18 = 50;
pub const KERN_S390_USER_DEBUG_LOGGING: _bindgen_ty_18 = 51;
pub const KERN_CORE_USES_PID: _bindgen_ty_18 = 52;
pub const KERN_TAINTED: _bindgen_ty_18 = 53;
pub const KERN_CADPID: _bindgen_ty_18 = 54;
pub const KERN_PIDMAX: _bindgen_ty_18 = 55;
pub const KERN_CORE_PATTERN: _bindgen_ty_18 = 56;
pub const KERN_PANIC_ON_OOPS: _bindgen_ty_18 = 57;
pub const KERN_HPPA_PWRSW: _bindgen_ty_18 = 58;
pub const KERN_HPPA_UNALIGNED: _bindgen_ty_18 = 59;
pub const KERN_PRINTK_RATELIMIT: _bindgen_ty_18 = 60;
pub const KERN_PRINTK_RATELIMIT_BURST: _bindgen_ty_18 = 61;
pub const KERN_PTY: _bindgen_ty_18 = 62;
pub const KERN_NGROUPS_MAX: _bindgen_ty_18 = 63;
pub const KERN_SPARC_SCONS_PWROFF: _bindgen_ty_18 = 64;
pub const KERN_HZ_TIMER: _bindgen_ty_18 = 65;
pub const KERN_UNKNOWN_NMI_PANIC: _bindgen_ty_18 = 66;
pub const KERN_BOOTLOADER_TYPE: _bindgen_ty_18 = 67;
pub const KERN_RANDOMIZE: _bindgen_ty_18 = 68;
pub const KERN_SETUID_DUMPABLE: _bindgen_ty_18 = 69;
pub const KERN_SPIN_RETRY: _bindgen_ty_18 = 70;
pub const KERN_ACPI_VIDEO_FLAGS: _bindgen_ty_18 = 71;
pub const KERN_IA64_UNALIGNED: _bindgen_ty_18 = 72;
pub const KERN_COMPAT_LOG: _bindgen_ty_18 = 73;
pub const KERN_MAX_LOCK_DEPTH: _bindgen_ty_18 = 74;
pub const KERN_NMI_WATCHDOG: _bindgen_ty_18 = 75;
pub const KERN_PANIC_ON_NMI: _bindgen_ty_18 = 76;
pub const KERN_PANIC_ON_WARN: _bindgen_ty_18 = 77;
pub const KERN_PANIC_PRINT: _bindgen_ty_18 = 78;
pub type _bindgen_ty_18 = core::ffi::c_uint;
pub const VM_UNUSED1: _bindgen_ty_19 = 1;
pub const VM_UNUSED2: _bindgen_ty_19 = 2;
pub const VM_UNUSED3: _bindgen_ty_19 = 3;
pub const VM_UNUSED4: _bindgen_ty_19 = 4;
pub const VM_OVERCOMMIT_MEMORY: _bindgen_ty_19 = 5;
pub const VM_UNUSED5: _bindgen_ty_19 = 6;
pub const VM_UNUSED7: _bindgen_ty_19 = 7;
pub const VM_UNUSED8: _bindgen_ty_19 = 8;
pub const VM_UNUSED9: _bindgen_ty_19 = 9;
pub const VM_PAGE_CLUSTER: _bindgen_ty_19 = 10;
pub const VM_DIRTY_BACKGROUND: _bindgen_ty_19 = 11;
pub const VM_DIRTY_RATIO: _bindgen_ty_19 = 12;
pub const VM_DIRTY_WB_CS: _bindgen_ty_19 = 13;
pub const VM_DIRTY_EXPIRE_CS: _bindgen_ty_19 = 14;
pub const VM_NR_PDFLUSH_THREADS: _bindgen_ty_19 = 15;
pub const VM_OVERCOMMIT_RATIO: _bindgen_ty_19 = 16;
pub const VM_PAGEBUF: _bindgen_ty_19 = 17;
pub const VM_HUGETLB_PAGES: _bindgen_ty_19 = 18;
pub const VM_SWAPPINESS: _bindgen_ty_19 = 19;
pub const VM_LOWMEM_RESERVE_RATIO: _bindgen_ty_19 = 20;
pub const VM_MIN_FREE_KBYTES: _bindgen_ty_19 = 21;
pub const VM_MAX_MAP_COUNT: _bindgen_ty_19 = 22;
pub const VM_LAPTOP_MODE: _bindgen_ty_19 = 23;
pub const VM_BLOCK_DUMP: _bindgen_ty_19 = 24;
pub const VM_HUGETLB_GROUP: _bindgen_ty_19 = 25;
pub const VM_VFS_CACHE_PRESSURE: _bindgen_ty_19 = 26;
pub const VM_LEGACY_VA_LAYOUT: _bindgen_ty_19 = 27;
pub const VM_SWAP_TOKEN_TIMEOUT: _bindgen_ty_19 = 28;
pub const VM_DROP_PAGECACHE: _bindgen_ty_19 = 29;
pub const VM_PERCPU_PAGELIST_FRACTION: _bindgen_ty_19 = 30;
pub const VM_ZONE_RECLAIM_MODE: _bindgen_ty_19 = 31;
pub const VM_MIN_UNMAPPED: _bindgen_ty_19 = 32;
pub const VM_PANIC_ON_OOM: _bindgen_ty_19 = 33;
pub const VM_VDSO_ENABLED: _bindgen_ty_19 = 34;
pub const VM_MIN_SLAB: _bindgen_ty_19 = 35;
pub type _bindgen_ty_19 = core::ffi::c_uint;
pub const NET_CORE: _bindgen_ty_20 = 1;
pub const NET_ETHER: _bindgen_ty_20 = 2;
pub const NET_802: _bindgen_ty_20 = 3;
pub const NET_UNIX: _bindgen_ty_20 = 4;
pub const NET_IPV4: _bindgen_ty_20 = 5;
pub const NET_IPX: _bindgen_ty_20 = 6;
pub const NET_ATALK: _bindgen_ty_20 = 7;
pub const NET_NETROM: _bindgen_ty_20 = 8;
pub const NET_AX25: _bindgen_ty_20 = 9;
pub const NET_BRIDGE: _bindgen_ty_20 = 10;
pub const NET_ROSE: _bindgen_ty_20 = 11;
pub const NET_IPV6: _bindgen_ty_20 = 12;
pub const NET_X25: _bindgen_ty_20 = 13;
pub const NET_TR: _bindgen_ty_20 = 14;
pub const NET_DECNET: _bindgen_ty_20 = 15;
pub const NET_ECONET: _bindgen_ty_20 = 16;
pub const NET_SCTP: _bindgen_ty_20 = 17;
pub const NET_LLC: _bindgen_ty_20 = 18;
pub const NET_NETFILTER: _bindgen_ty_20 = 19;
pub const NET_DCCP: _bindgen_ty_20 = 20;
pub const NET_IRDA: _bindgen_ty_20 = 412;
pub type _bindgen_ty_20 = core::ffi::c_uint;
pub const RANDOM_POOLSIZE: _bindgen_ty_21 = 1;
pub const RANDOM_ENTROPY_COUNT: _bindgen_ty_21 = 2;
pub const RANDOM_READ_THRESH: _bindgen_ty_21 = 3;
pub const RANDOM_WRITE_THRESH: _bindgen_ty_21 = 4;
pub const RANDOM_BOOT_ID: _bindgen_ty_21 = 5;
pub const RANDOM_UUID: _bindgen_ty_21 = 6;
pub type _bindgen_ty_21 = core::ffi::c_uint;
pub const PTY_MAX: _bindgen_ty_22 = 1;
pub const PTY_NR: _bindgen_ty_22 = 2;
pub type _bindgen_ty_22 = core::ffi::c_uint;
pub const BUS_ISA_MEM_BASE: _bindgen_ty_23 = 1;
pub const BUS_ISA_PORT_BASE: _bindgen_ty_23 = 2;
pub const BUS_ISA_PORT_SHIFT: _bindgen_ty_23 = 3;
pub type _bindgen_ty_23 = core::ffi::c_uint;
pub const NET_CORE_WMEM_MAX: _bindgen_ty_24 = 1;
pub const NET_CORE_RMEM_MAX: _bindgen_ty_24 = 2;
pub const NET_CORE_WMEM_DEFAULT: _bindgen_ty_24 = 3;
pub const NET_CORE_RMEM_DEFAULT: _bindgen_ty_24 = 4;
pub const NET_CORE_MAX_BACKLOG: _bindgen_ty_24 = 6;
pub const NET_CORE_FASTROUTE: _bindgen_ty_24 = 7;
pub const NET_CORE_MSG_COST: _bindgen_ty_24 = 8;
pub const NET_CORE_MSG_BURST: _bindgen_ty_24 = 9;
pub const NET_CORE_OPTMEM_MAX: _bindgen_ty_24 = 10;
pub const NET_CORE_HOT_LIST_LENGTH: _bindgen_ty_24 = 11;
pub const NET_CORE_DIVERT_VERSION: _bindgen_ty_24 = 12;
pub const NET_CORE_NO_CONG_THRESH: _bindgen_ty_24 = 13;
pub const NET_CORE_NO_CONG: _bindgen_ty_24 = 14;
pub const NET_CORE_LO_CONG: _bindgen_ty_24 = 15;
pub const NET_CORE_MOD_CONG: _bindgen_ty_24 = 16;
pub const NET_CORE_DEV_WEIGHT: _bindgen_ty_24 = 17;
pub const NET_CORE_SOMAXCONN: _bindgen_ty_24 = 18;
pub const NET_CORE_BUDGET: _bindgen_ty_24 = 19;
pub const NET_CORE_AEVENT_ETIME: _bindgen_ty_24 = 20;
pub const NET_CORE_AEVENT_RSEQTH: _bindgen_ty_24 = 21;
pub const NET_CORE_WARNINGS: _bindgen_ty_24 = 22;
pub type _bindgen_ty_24 = core::ffi::c_uint;
pub const NET_UNIX_DESTROY_DELAY: _bindgen_ty_25 = 1;
pub const NET_UNIX_DELETE_DELAY: _bindgen_ty_25 = 2;
pub const NET_UNIX_MAX_DGRAM_QLEN: _bindgen_ty_25 = 3;
pub type _bindgen_ty_25 = core::ffi::c_uint;
pub const NET_NF_CONNTRACK_MAX: _bindgen_ty_26 = 1;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT: _bindgen_ty_26 = 2;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV: _bindgen_ty_26 = 3;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED: _bindgen_ty_26 = 4;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT: _bindgen_ty_26 = 5;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT: _bindgen_ty_26 = 6;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK: _bindgen_ty_26 = 7;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT: _bindgen_ty_26 = 8;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE: _bindgen_ty_26 = 9;
pub const NET_NF_CONNTRACK_UDP_TIMEOUT: _bindgen_ty_26 = 10;
pub const NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM: _bindgen_ty_26 = 11;
pub const NET_NF_CONNTRACK_ICMP_TIMEOUT: _bindgen_ty_26 = 12;
pub const NET_NF_CONNTRACK_GENERIC_TIMEOUT: _bindgen_ty_26 = 13;
pub const NET_NF_CONNTRACK_BUCKETS: _bindgen_ty_26 = 14;
pub const NET_NF_CONNTRACK_LOG_INVALID: _bindgen_ty_26 = 15;
pub const NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS: _bindgen_ty_26 = 16;
pub const NET_NF_CONNTRACK_TCP_LOOSE: _bindgen_ty_26 = 17;
pub const NET_NF_CONNTRACK_TCP_BE_LIBERAL: _bindgen_ty_26 = 18;
pub const NET_NF_CONNTRACK_TCP_MAX_RETRANS: _bindgen_ty_26 = 19;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED: _bindgen_ty_26 = 20;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT: _bindgen_ty_26 = 21;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED: _bindgen_ty_26 = 22;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED: _bindgen_ty_26 = 23;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT: _bindgen_ty_26 = 24;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD: _bindgen_ty_26 = 25;
pub const NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT: _bindgen_ty_26 = 26;
pub const NET_NF_CONNTRACK_COUNT: _bindgen_ty_26 = 27;
pub const NET_NF_CONNTRACK_ICMPV6_TIMEOUT: _bindgen_ty_26 = 28;
pub const NET_NF_CONNTRACK_FRAG6_TIMEOUT: _bindgen_ty_26 = 29;
pub const NET_NF_CONNTRACK_FRAG6_LOW_THRESH: _bindgen_ty_26 = 30;
pub const NET_NF_CONNTRACK_FRAG6_HIGH_THRESH: _bindgen_ty_26 = 31;
pub const NET_NF_CONNTRACK_CHECKSUM: _bindgen_ty_26 = 32;
pub type _bindgen_ty_26 = core::ffi::c_uint;
pub const NET_IPV4_FORWARD: _bindgen_ty_27 = 8;
pub const NET_IPV4_DYNADDR: _bindgen_ty_27 = 9;
pub const NET_IPV4_CONF: _bindgen_ty_27 = 16;
pub const NET_IPV4_NEIGH: _bindgen_ty_27 = 17;
pub const NET_IPV4_ROUTE: _bindgen_ty_27 = 18;
pub const NET_IPV4_FIB_HASH: _bindgen_ty_27 = 19;
pub const NET_IPV4_NETFILTER: _bindgen_ty_27 = 20;
pub const NET_IPV4_TCP_TIMESTAMPS: _bindgen_ty_27 = 33;
pub const NET_IPV4_TCP_WINDOW_SCALING: _bindgen_ty_27 = 34;
pub const NET_IPV4_TCP_SACK: _bindgen_ty_27 = 35;
pub const NET_IPV4_TCP_RETRANS_COLLAPSE: _bindgen_ty_27 = 36;
pub const NET_IPV4_DEFAULT_TTL: _bindgen_ty_27 = 37;
pub const NET_IPV4_AUTOCONFIG: _bindgen_ty_27 = 38;
pub const NET_IPV4_NO_PMTU_DISC: _bindgen_ty_27 = 39;
pub const NET_IPV4_TCP_SYN_RETRIES: _bindgen_ty_27 = 40;
pub const NET_IPV4_IPFRAG_HIGH_THRESH: _bindgen_ty_27 = 41;
pub const NET_IPV4_IPFRAG_LOW_THRESH: _bindgen_ty_27 = 42;
pub const NET_IPV4_IPFRAG_TIME: _bindgen_ty_27 = 43;
pub const NET_IPV4_TCP_MAX_KA_PROBES: _bindgen_ty_27 = 44;
pub const NET_IPV4_TCP_KEEPALIVE_TIME: _bindgen_ty_27 = 45;
pub const NET_IPV4_TCP_KEEPALIVE_PROBES: _bindgen_ty_27 = 46;
pub const NET_IPV4_TCP_RETRIES1: _bindgen_ty_27 = 47;
pub const NET_IPV4_TCP_RETRIES2: _bindgen_ty_27 = 48;
pub const NET_IPV4_TCP_FIN_TIMEOUT: _bindgen_ty_27 = 49;
pub const NET_IPV4_IP_MASQ_DEBUG: _bindgen_ty_27 = 50;
pub const NET_TCP_SYNCOOKIES: _bindgen_ty_27 = 51;
pub const NET_TCP_STDURG: _bindgen_ty_27 = 52;
pub const NET_TCP_RFC1337: _bindgen_ty_27 = 53;
pub const NET_TCP_SYN_TAILDROP: _bindgen_ty_27 = 54;
pub const NET_TCP_MAX_SYN_BACKLOG: _bindgen_ty_27 = 55;
pub const NET_IPV4_LOCAL_PORT_RANGE: _bindgen_ty_27 = 56;
pub const NET_IPV4_ICMP_ECHO_IGNORE_ALL: _bindgen_ty_27 = 57;
pub const NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS: _bindgen_ty_27 = 58;
pub const NET_IPV4_ICMP_SOURCEQUENCH_RATE: _bindgen_ty_27 = 59;
pub const NET_IPV4_ICMP_DESTUNREACH_RATE: _bindgen_ty_27 = 60;
pub const NET_IPV4_ICMP_TIMEEXCEED_RATE: _bindgen_ty_27 = 61;
pub const NET_IPV4_ICMP_PARAMPROB_RATE: _bindgen_ty_27 = 62;
pub const NET_IPV4_ICMP_ECHOREPLY_RATE: _bindgen_ty_27 = 63;
pub const NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES: _bindgen_ty_27 = 64;
pub const NET_IPV4_IGMP_MAX_MEMBERSHIPS: _bindgen_ty_27 = 65;
pub const NET_TCP_TW_RECYCLE: _bindgen_ty_27 = 66;
pub const NET_IPV4_ALWAYS_DEFRAG: _bindgen_ty_27 = 67;
pub const NET_IPV4_TCP_KEEPALIVE_INTVL: _bindgen_ty_27 = 68;
pub const NET_IPV4_INET_PEER_THRESHOLD: _bindgen_ty_27 = 69;
pub const NET_IPV4_INET_PEER_MINTTL: _bindgen_ty_27 = 70;
pub const NET_IPV4_INET_PEER_MAXTTL: _bindgen_ty_27 = 71;
pub const NET_IPV4_INET_PEER_GC_MINTIME: _bindgen_ty_27 = 72;
pub const NET_IPV4_INET_PEER_GC_MAXTIME: _bindgen_ty_27 = 73;
pub const NET_TCP_ORPHAN_RETRIES: _bindgen_ty_27 = 74;
pub const NET_TCP_ABORT_ON_OVERFLOW: _bindgen_ty_27 = 75;
pub const NET_TCP_SYNACK_RETRIES: _bindgen_ty_27 = 76;
pub const NET_TCP_MAX_ORPHANS: _bindgen_ty_27 = 77;
pub const NET_TCP_MAX_TW_BUCKETS: _bindgen_ty_27 = 78;
pub const NET_TCP_FACK: _bindgen_ty_27 = 79;
pub const NET_TCP_REORDERING: _bindgen_ty_27 = 80;
pub const NET_TCP_ECN: _bindgen_ty_27 = 81;
pub const NET_TCP_DSACK: _bindgen_ty_27 = 82;
pub const NET_TCP_MEM: _bindgen_ty_27 = 83;
pub const NET_TCP_WMEM: _bindgen_ty_27 = 84;
pub const NET_TCP_RMEM: _bindgen_ty_27 = 85;
pub const NET_TCP_APP_WIN: _bindgen_ty_27 = 86;
pub const NET_TCP_ADV_WIN_SCALE: _bindgen_ty_27 = 87;
pub const NET_IPV4_NONLOCAL_BIND: _bindgen_ty_27 = 88;
pub const NET_IPV4_ICMP_RATELIMIT: _bindgen_ty_27 = 89;
pub const NET_IPV4_ICMP_RATEMASK: _bindgen_ty_27 = 90;
pub const NET_TCP_TW_REUSE: _bindgen_ty_27 = 91;
pub const NET_TCP_FRTO: _bindgen_ty_27 = 92;
pub const NET_TCP_LOW_LATENCY: _bindgen_ty_27 = 93;
pub const NET_IPV4_IPFRAG_SECRET_INTERVAL: _bindgen_ty_27 = 94;
pub const NET_IPV4_IGMP_MAX_MSF: _bindgen_ty_27 = 96;
pub const NET_TCP_NO_METRICS_SAVE: _bindgen_ty_27 = 97;
pub const NET_TCP_DEFAULT_WIN_SCALE: _bindgen_ty_27 = 105;
pub const NET_TCP_MODERATE_RCVBUF: _bindgen_ty_27 = 106;
pub const NET_TCP_TSO_WIN_DIVISOR: _bindgen_ty_27 = 107;
pub const NET_TCP_BIC_BETA: _bindgen_ty_27 = 108;
pub const NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR: _bindgen_ty_27 = 109;
pub const NET_TCP_CONG_CONTROL: _bindgen_ty_27 = 110;
pub const NET_TCP_ABC: _bindgen_ty_27 = 111;
pub const NET_IPV4_IPFRAG_MAX_DIST: _bindgen_ty_27 = 112;
pub const NET_TCP_MTU_PROBING: _bindgen_ty_27 = 113;
pub const NET_TCP_BASE_MSS: _bindgen_ty_27 = 114;
pub const NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS: _bindgen_ty_27 = 115;
pub const NET_TCP_DMA_COPYBREAK: _bindgen_ty_27 = 116;
pub const NET_TCP_SLOW_START_AFTER_IDLE: _bindgen_ty_27 = 117;
pub const NET_CIPSOV4_CACHE_ENABLE: _bindgen_ty_27 = 118;
pub const NET_CIPSOV4_CACHE_BUCKET_SIZE: _bindgen_ty_27 = 119;
pub const NET_CIPSOV4_RBM_OPTFMT: _bindgen_ty_27 = 120;
pub const NET_CIPSOV4_RBM_STRICTVALID: _bindgen_ty_27 = 121;
pub const NET_TCP_AVAIL_CONG_CONTROL: _bindgen_ty_27 = 122;
pub const NET_TCP_ALLOWED_CONG_CONTROL: _bindgen_ty_27 = 123;
pub const NET_TCP_MAX_SSTHRESH: _bindgen_ty_27 = 124;
pub const NET_TCP_FRTO_RESPONSE: _bindgen_ty_27 = 125;
pub type _bindgen_ty_27 = core::ffi::c_uint;
pub const NET_IPV4_ROUTE_FLUSH: _bindgen_ty_28 = 1;
pub const NET_IPV4_ROUTE_MIN_DELAY: _bindgen_ty_28 = 2;
pub const NET_IPV4_ROUTE_MAX_DELAY: _bindgen_ty_28 = 3;
pub const NET_IPV4_ROUTE_GC_THRESH: _bindgen_ty_28 = 4;
pub const NET_IPV4_ROUTE_MAX_SIZE: _bindgen_ty_28 = 5;
pub const NET_IPV4_ROUTE_GC_MIN_INTERVAL: _bindgen_ty_28 = 6;
pub const NET_IPV4_ROUTE_GC_TIMEOUT: _bindgen_ty_28 = 7;
pub const NET_IPV4_ROUTE_GC_INTERVAL: _bindgen_ty_28 = 8;
pub const NET_IPV4_ROUTE_REDIRECT_LOAD: _bindgen_ty_28 = 9;
pub const NET_IPV4_ROUTE_REDIRECT_NUMBER: _bindgen_ty_28 = 10;
pub const NET_IPV4_ROUTE_REDIRECT_SILENCE: _bindgen_ty_28 = 11;
pub const NET_IPV4_ROUTE_ERROR_COST: _bindgen_ty_28 = 12;
pub const NET_IPV4_ROUTE_ERROR_BURST: _bindgen_ty_28 = 13;
pub const NET_IPV4_ROUTE_GC_ELASTICITY: _bindgen_ty_28 = 14;
pub const NET_IPV4_ROUTE_MTU_EXPIRES: _bindgen_ty_28 = 15;
pub const NET_IPV4_ROUTE_MIN_PMTU: _bindgen_ty_28 = 16;
pub const NET_IPV4_ROUTE_MIN_ADVMSS: _bindgen_ty_28 = 17;
pub const NET_IPV4_ROUTE_SECRET_INTERVAL: _bindgen_ty_28 = 18;
pub const NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS: _bindgen_ty_28 = 19;
pub type _bindgen_ty_28 = core::ffi::c_uint;
pub const NET_PROTO_CONF_ALL: _bindgen_ty_29 = -2;
pub const NET_PROTO_CONF_DEFAULT: _bindgen_ty_29 = -3;
pub type _bindgen_ty_29 = core::ffi::c_int;
pub const NET_IPV4_CONF_FORWARDING: _bindgen_ty_30 = 1;
pub const NET_IPV4_CONF_MC_FORWARDING: _bindgen_ty_30 = 2;
pub const NET_IPV4_CONF_PROXY_ARP: _bindgen_ty_30 = 3;
pub const NET_IPV4_CONF_ACCEPT_REDIRECTS: _bindgen_ty_30 = 4;
pub const NET_IPV4_CONF_SECURE_REDIRECTS: _bindgen_ty_30 = 5;
pub const NET_IPV4_CONF_SEND_REDIRECTS: _bindgen_ty_30 = 6;
pub const NET_IPV4_CONF_SHARED_MEDIA: _bindgen_ty_30 = 7;
pub const NET_IPV4_CONF_RP_FILTER: _bindgen_ty_30 = 8;
pub const NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE: _bindgen_ty_30 = 9;
pub const NET_IPV4_CONF_BOOTP_RELAY: _bindgen_ty_30 = 10;
pub const NET_IPV4_CONF_LOG_MARTIANS: _bindgen_ty_30 = 11;
pub const NET_IPV4_CONF_TAG: _bindgen_ty_30 = 12;
pub const NET_IPV4_CONF_ARPFILTER: _bindgen_ty_30 = 13;
pub const NET_IPV4_CONF_MEDIUM_ID: _bindgen_ty_30 = 14;
pub const NET_IPV4_CONF_NOXFRM: _bindgen_ty_30 = 15;
pub const NET_IPV4_CONF_NOPOLICY: _bindgen_ty_30 = 16;
pub const NET_IPV4_CONF_FORCE_IGMP_VERSION: _bindgen_ty_30 = 17;
pub const NET_IPV4_CONF_ARP_ANNOUNCE: _bindgen_ty_30 = 18;
pub const NET_IPV4_CONF_ARP_IGNORE: _bindgen_ty_30 = 19;
pub const NET_IPV4_CONF_PROMOTE_SECONDARIES: _bindgen_ty_30 = 20;
pub const NET_IPV4_CONF_ARP_ACCEPT: _bindgen_ty_30 = 21;
pub const NET_IPV4_CONF_ARP_NOTIFY: _bindgen_ty_30 = 22;
pub const NET_IPV4_CONF_ARP_EVICT_NOCARRIER: _bindgen_ty_30 = 23;
pub type _bindgen_ty_30 = core::ffi::c_uint;
pub const NET_IPV4_NF_CONNTRACK_MAX: _bindgen_ty_31 = 1;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT: _bindgen_ty_31 = 2;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV: _bindgen_ty_31 = 3;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED: _bindgen_ty_31 = 4;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT: _bindgen_ty_31 = 5;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT: _bindgen_ty_31 = 6;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK: _bindgen_ty_31 = 7;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT: _bindgen_ty_31 = 8;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE: _bindgen_ty_31 = 9;
pub const NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT: _bindgen_ty_31 = 10;
pub const NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM: _bindgen_ty_31 = 11;
pub const NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT: _bindgen_ty_31 = 12;
pub const NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT: _bindgen_ty_31 = 13;
pub const NET_IPV4_NF_CONNTRACK_BUCKETS: _bindgen_ty_31 = 14;
pub const NET_IPV4_NF_CONNTRACK_LOG_INVALID: _bindgen_ty_31 = 15;
pub const NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS: _bindgen_ty_31 = 16;
pub const NET_IPV4_NF_CONNTRACK_TCP_LOOSE: _bindgen_ty_31 = 17;
pub const NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL: _bindgen_ty_31 = 18;
pub const NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS: _bindgen_ty_31 = 19;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED: _bindgen_ty_31 = 20;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT: _bindgen_ty_31 = 21;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED: _bindgen_ty_31 = 22;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED: _bindgen_ty_31 = 23;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT: _bindgen_ty_31 = 24;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD: _bindgen_ty_31 = 25;
pub const NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT: _bindgen_ty_31 = 26;
pub const NET_IPV4_NF_CONNTRACK_COUNT: _bindgen_ty_31 = 27;
pub const NET_IPV4_NF_CONNTRACK_CHECKSUM: _bindgen_ty_31 = 28;
pub type _bindgen_ty_31 = core::ffi::c_uint;
pub const NET_IPV6_CONF: _bindgen_ty_32 = 16;
pub const NET_IPV6_NEIGH: _bindgen_ty_32 = 17;
pub const NET_IPV6_ROUTE: _bindgen_ty_32 = 18;
pub const NET_IPV6_ICMP: _bindgen_ty_32 = 19;
pub const NET_IPV6_BINDV6ONLY: _bindgen_ty_32 = 20;
pub const NET_IPV6_IP6FRAG_HIGH_THRESH: _bindgen_ty_32 = 21;
pub const NET_IPV6_IP6FRAG_LOW_THRESH: _bindgen_ty_32 = 22;
pub const NET_IPV6_IP6FRAG_TIME: _bindgen_ty_32 = 23;
pub const NET_IPV6_IP6FRAG_SECRET_INTERVAL: _bindgen_ty_32 = 24;
pub const NET_IPV6_MLD_MAX_MSF: _bindgen_ty_32 = 25;
pub type _bindgen_ty_32 = core::ffi::c_uint;
pub const NET_IPV6_ROUTE_FLUSH: _bindgen_ty_33 = 1;
pub const NET_IPV6_ROUTE_GC_THRESH: _bindgen_ty_33 = 2;
pub const NET_IPV6_ROUTE_MAX_SIZE: _bindgen_ty_33 = 3;
pub const NET_IPV6_ROUTE_GC_MIN_INTERVAL: _bindgen_ty_33 = 4;
pub const NET_IPV6_ROUTE_GC_TIMEOUT: _bindgen_ty_33 = 5;
pub const NET_IPV6_ROUTE_GC_INTERVAL: _bindgen_ty_33 = 6;
pub const NET_IPV6_ROUTE_GC_ELASTICITY: _bindgen_ty_33 = 7;
pub const NET_IPV6_ROUTE_MTU_EXPIRES: _bindgen_ty_33 = 8;
pub const NET_IPV6_ROUTE_MIN_ADVMSS: _bindgen_ty_33 = 9;
pub const NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS: _bindgen_ty_33 = 10;
pub type _bindgen_ty_33 = core::ffi::c_uint;
pub const NET_IPV6_FORWARDING: _bindgen_ty_34 = 1;
pub const NET_IPV6_HOP_LIMIT: _bindgen_ty_34 = 2;
pub const NET_IPV6_MTU: _bindgen_ty_34 = 3;
pub const NET_IPV6_ACCEPT_RA: _bindgen_ty_34 = 4;
pub const NET_IPV6_ACCEPT_REDIRECTS: _bindgen_ty_34 = 5;
pub const NET_IPV6_AUTOCONF: _bindgen_ty_34 = 6;
pub const NET_IPV6_DAD_TRANSMITS: _bindgen_ty_34 = 7;
pub const NET_IPV6_RTR_SOLICITS: _bindgen_ty_34 = 8;
pub const NET_IPV6_RTR_SOLICIT_INTERVAL: _bindgen_ty_34 = 9;
pub const NET_IPV6_RTR_SOLICIT_DELAY: _bindgen_ty_34 = 10;
pub const NET_IPV6_USE_TEMPADDR: _bindgen_ty_34 = 11;
pub const NET_IPV6_TEMP_VALID_LFT: _bindgen_ty_34 = 12;
pub const NET_IPV6_TEMP_PREFERED_LFT: _bindgen_ty_34 = 13;
pub const NET_IPV6_REGEN_MAX_RETRY: _bindgen_ty_34 = 14;
pub const NET_IPV6_MAX_DESYNC_FACTOR: _bindgen_ty_34 = 15;
pub const NET_IPV6_MAX_ADDRESSES: _bindgen_ty_34 = 16;
pub const NET_IPV6_FORCE_MLD_VERSION: _bindgen_ty_34 = 17;
pub const NET_IPV6_ACCEPT_RA_DEFRTR: _bindgen_ty_34 = 18;
pub const NET_IPV6_ACCEPT_RA_PINFO: _bindgen_ty_34 = 19;
pub const NET_IPV6_ACCEPT_RA_RTR_PREF: _bindgen_ty_34 = 20;
pub const NET_IPV6_RTR_PROBE_INTERVAL: _bindgen_ty_34 = 21;
pub const NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN: _bindgen_ty_34 = 22;
pub const NET_IPV6_PROXY_NDP: _bindgen_ty_34 = 23;
pub const NET_IPV6_ACCEPT_SOURCE_ROUTE: _bindgen_ty_34 = 25;
pub const NET_IPV6_ACCEPT_RA_FROM_LOCAL: _bindgen_ty_34 = 26;
pub const NET_IPV6_ACCEPT_RA_RT_INFO_MIN_PLEN: _bindgen_ty_34 = 27;
pub const NET_IPV6_RA_DEFRTR_METRIC: _bindgen_ty_34 = 28;
pub const __NET_IPV6_MAX: _bindgen_ty_34 = 29;
pub type _bindgen_ty_34 = core::ffi::c_uint;
pub const NET_IPV6_ICMP_RATELIMIT: _bindgen_ty_35 = 1;
pub const NET_IPV6_ICMP_ECHO_IGNORE_ALL: _bindgen_ty_35 = 2;
pub type _bindgen_ty_35 = core::ffi::c_uint;
pub const NET_NEIGH_MCAST_SOLICIT: _bindgen_ty_36 = 1;
pub const NET_NEIGH_UCAST_SOLICIT: _bindgen_ty_36 = 2;
pub const NET_NEIGH_APP_SOLICIT: _bindgen_ty_36 = 3;
pub const NET_NEIGH_RETRANS_TIME: _bindgen_ty_36 = 4;
pub const NET_NEIGH_REACHABLE_TIME: _bindgen_ty_36 = 5;
pub const NET_NEIGH_DELAY_PROBE_TIME: _bindgen_ty_36 = 6;
pub const NET_NEIGH_GC_STALE_TIME: _bindgen_ty_36 = 7;
pub const NET_NEIGH_UNRES_QLEN: _bindgen_ty_36 = 8;
pub const NET_NEIGH_PROXY_QLEN: _bindgen_ty_36 = 9;
pub const NET_NEIGH_ANYCAST_DELAY: _bindgen_ty_36 = 10;
pub const NET_NEIGH_PROXY_DELAY: _bindgen_ty_36 = 11;
pub const NET_NEIGH_LOCKTIME: _bindgen_ty_36 = 12;
pub const NET_NEIGH_GC_INTERVAL: _bindgen_ty_36 = 13;
pub const NET_NEIGH_GC_THRESH1: _bindgen_ty_36 = 14;
pub const NET_NEIGH_GC_THRESH2: _bindgen_ty_36 = 15;
pub const NET_NEIGH_GC_THRESH3: _bindgen_ty_36 = 16;
pub const NET_NEIGH_RETRANS_TIME_MS: _bindgen_ty_36 = 17;
pub const NET_NEIGH_REACHABLE_TIME_MS: _bindgen_ty_36 = 18;
pub const NET_NEIGH_INTERVAL_PROBE_TIME_MS: _bindgen_ty_36 = 19;
pub type _bindgen_ty_36 = core::ffi::c_uint;
pub const NET_DCCP_DEFAULT: _bindgen_ty_37 = 1;
pub type _bindgen_ty_37 = core::ffi::c_uint;
pub const NET_IPX_PPROP_BROADCASTING: _bindgen_ty_38 = 1;
pub const NET_IPX_FORWARDING: _bindgen_ty_38 = 2;
pub type _bindgen_ty_38 = core::ffi::c_uint;
pub const NET_LLC2: _bindgen_ty_39 = 1;
pub const NET_LLC_STATION: _bindgen_ty_39 = 2;
pub type _bindgen_ty_39 = core::ffi::c_uint;
pub const NET_LLC2_TIMEOUT: _bindgen_ty_40 = 1;
pub type _bindgen_ty_40 = core::ffi::c_uint;
pub const NET_LLC_STATION_ACK_TIMEOUT: _bindgen_ty_41 = 1;
pub type _bindgen_ty_41 = core::ffi::c_uint;
pub const NET_LLC2_ACK_TIMEOUT: _bindgen_ty_42 = 1;
pub const NET_LLC2_P_TIMEOUT: _bindgen_ty_42 = 2;
pub const NET_LLC2_REJ_TIMEOUT: _bindgen_ty_42 = 3;
pub const NET_LLC2_BUSY_TIMEOUT: _bindgen_ty_42 = 4;
pub type _bindgen_ty_42 = core::ffi::c_uint;
pub const NET_ATALK_AARP_EXPIRY_TIME: _bindgen_ty_43 = 1;
pub const NET_ATALK_AARP_TICK_TIME: _bindgen_ty_43 = 2;
pub const NET_ATALK_AARP_RETRANSMIT_LIMIT: _bindgen_ty_43 = 3;
pub const NET_ATALK_AARP_RESOLVE_TIME: _bindgen_ty_43 = 4;
pub type _bindgen_ty_43 = core::ffi::c_uint;
pub const NET_NETROM_DEFAULT_PATH_QUALITY: _bindgen_ty_44 = 1;
pub const NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER: _bindgen_ty_44 = 2;
pub const NET_NETROM_NETWORK_TTL_INITIALISER: _bindgen_ty_44 = 3;
pub const NET_NETROM_TRANSPORT_TIMEOUT: _bindgen_ty_44 = 4;
pub const NET_NETROM_TRANSPORT_MAXIMUM_TRIES: _bindgen_ty_44 = 5;
pub const NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY: _bindgen_ty_44 = 6;
pub const NET_NETROM_TRANSPORT_BUSY_DELAY: _bindgen_ty_44 = 7;
pub const NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE: _bindgen_ty_44 = 8;
pub const NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT: _bindgen_ty_44 = 9;
pub const NET_NETROM_ROUTING_CONTROL: _bindgen_ty_44 = 10;
pub const NET_NETROM_LINK_FAILS_COUNT: _bindgen_ty_44 = 11;
pub const NET_NETROM_RESET: _bindgen_ty_44 = 12;
pub type _bindgen_ty_44 = core::ffi::c_uint;
pub const NET_AX25_IP_DEFAULT_MODE: _bindgen_ty_45 = 1;
pub const NET_AX25_DEFAULT_MODE: _bindgen_ty_45 = 2;
pub const NET_AX25_BACKOFF_TYPE: _bindgen_ty_45 = 3;
pub const NET_AX25_CONNECT_MODE: _bindgen_ty_45 = 4;
pub const NET_AX25_STANDARD_WINDOW: _bindgen_ty_45 = 5;
pub const NET_AX25_EXTENDED_WINDOW: _bindgen_ty_45 = 6;
pub const NET_AX25_T1_TIMEOUT: _bindgen_ty_45 = 7;
pub const NET_AX25_T2_TIMEOUT: _bindgen_ty_45 = 8;
pub const NET_AX25_T3_TIMEOUT: _bindgen_ty_45 = 9;
pub const NET_AX25_IDLE_TIMEOUT: _bindgen_ty_45 = 10;
pub const NET_AX25_N2: _bindgen_ty_45 = 11;
pub const NET_AX25_PACLEN: _bindgen_ty_45 = 12;
pub const NET_AX25_PROTOCOL: _bindgen_ty_45 = 13;
pub const NET_AX25_DAMA_SLAVE_TIMEOUT: _bindgen_ty_45 = 14;
pub type _bindgen_ty_45 = core::ffi::c_uint;
pub const NET_ROSE_RESTART_REQUEST_TIMEOUT: _bindgen_ty_46 = 1;
pub const NET_ROSE_CALL_REQUEST_TIMEOUT: _bindgen_ty_46 = 2;
pub const NET_ROSE_RESET_REQUEST_TIMEOUT: _bindgen_ty_46 = 3;
pub const NET_ROSE_CLEAR_REQUEST_TIMEOUT: _bindgen_ty_46 = 4;
pub const NET_ROSE_ACK_HOLD_BACK_TIMEOUT: _bindgen_ty_46 = 5;
pub const NET_ROSE_ROUTING_CONTROL: _bindgen_ty_46 = 6;
pub const NET_ROSE_LINK_FAIL_TIMEOUT: _bindgen_ty_46 = 7;
pub const NET_ROSE_MAX_VCS: _bindgen_ty_46 = 8;
pub const NET_ROSE_WINDOW_SIZE: _bindgen_ty_46 = 9;
pub const NET_ROSE_NO_ACTIVITY_TIMEOUT: _bindgen_ty_46 = 10;
pub type _bindgen_ty_46 = core::ffi::c_uint;
pub const NET_X25_RESTART_REQUEST_TIMEOUT: _bindgen_ty_47 = 1;
pub const NET_X25_CALL_REQUEST_TIMEOUT: _bindgen_ty_47 = 2;
pub const NET_X25_RESET_REQUEST_TIMEOUT: _bindgen_ty_47 = 3;
pub const NET_X25_CLEAR_REQUEST_TIMEOUT: _bindgen_ty_47 = 4;
pub const NET_X25_ACK_HOLD_BACK_TIMEOUT: _bindgen_ty_47 = 5;
pub const NET_X25_FORWARD: _bindgen_ty_47 = 6;
pub type _bindgen_ty_47 = core::ffi::c_uint;
pub const NET_TR_RIF_TIMEOUT: _bindgen_ty_48 = 1;
pub type _bindgen_ty_48 = core::ffi::c_uint;
pub const NET_DECNET_NODE_TYPE: _bindgen_ty_49 = 1;
pub const NET_DECNET_NODE_ADDRESS: _bindgen_ty_49 = 2;
pub const NET_DECNET_NODE_NAME: _bindgen_ty_49 = 3;
pub const NET_DECNET_DEFAULT_DEVICE: _bindgen_ty_49 = 4;
pub const NET_DECNET_TIME_WAIT: _bindgen_ty_49 = 5;
pub const NET_DECNET_DN_COUNT: _bindgen_ty_49 = 6;
pub const NET_DECNET_DI_COUNT: _bindgen_ty_49 = 7;
pub const NET_DECNET_DR_COUNT: _bindgen_ty_49 = 8;
pub const NET_DECNET_DST_GC_INTERVAL: _bindgen_ty_49 = 9;
pub const NET_DECNET_CONF: _bindgen_ty_49 = 10;
pub const NET_DECNET_NO_FC_MAX_CWND: _bindgen_ty_49 = 11;
pub const NET_DECNET_MEM: _bindgen_ty_49 = 12;
pub const NET_DECNET_RMEM: _bindgen_ty_49 = 13;
pub const NET_DECNET_WMEM: _bindgen_ty_49 = 14;
pub const NET_DECNET_DEBUG_LEVEL: _bindgen_ty_49 = 255;
pub type _bindgen_ty_49 = core::ffi::c_uint;
pub const NET_DECNET_CONF_LOOPBACK: _bindgen_ty_50 = -2;
pub const NET_DECNET_CONF_DDCMP: _bindgen_ty_50 = -3;
pub const NET_DECNET_CONF_PPP: _bindgen_ty_50 = -4;
pub const NET_DECNET_CONF_X25: _bindgen_ty_50 = -5;
pub const NET_DECNET_CONF_GRE: _bindgen_ty_50 = -6;
pub const NET_DECNET_CONF_ETHER: _bindgen_ty_50 = -7;
pub type _bindgen_ty_50 = core::ffi::c_int;
pub const NET_DECNET_CONF_DEV_PRIORITY: _bindgen_ty_51 = 1;
pub const NET_DECNET_CONF_DEV_T1: _bindgen_ty_51 = 2;
pub const NET_DECNET_CONF_DEV_T2: _bindgen_ty_51 = 3;
pub const NET_DECNET_CONF_DEV_T3: _bindgen_ty_51 = 4;
pub const NET_DECNET_CONF_DEV_FORWARDING: _bindgen_ty_51 = 5;
pub const NET_DECNET_CONF_DEV_BLKSIZE: _bindgen_ty_51 = 6;
pub const NET_DECNET_CONF_DEV_STATE: _bindgen_ty_51 = 7;
pub type _bindgen_ty_51 = core::ffi::c_uint;
pub const NET_SCTP_RTO_INITIAL: _bindgen_ty_52 = 1;
pub const NET_SCTP_RTO_MIN: _bindgen_ty_52 = 2;
pub const NET_SCTP_RTO_MAX: _bindgen_ty_52 = 3;
pub const NET_SCTP_RTO_ALPHA: _bindgen_ty_52 = 4;
pub const NET_SCTP_RTO_BETA: _bindgen_ty_52 = 5;
pub const NET_SCTP_VALID_COOKIE_LIFE: _bindgen_ty_52 = 6;
pub const NET_SCTP_ASSOCIATION_MAX_RETRANS: _bindgen_ty_52 = 7;
pub const NET_SCTP_PATH_MAX_RETRANS: _bindgen_ty_52 = 8;
pub const NET_SCTP_MAX_INIT_RETRANSMITS: _bindgen_ty_52 = 9;
pub const NET_SCTP_HB_INTERVAL: _bindgen_ty_52 = 10;
pub const NET_SCTP_PRESERVE_ENABLE: _bindgen_ty_52 = 11;
pub const NET_SCTP_MAX_BURST: _bindgen_ty_52 = 12;
pub const NET_SCTP_ADDIP_ENABLE: _bindgen_ty_52 = 13;
pub const NET_SCTP_PRSCTP_ENABLE: _bindgen_ty_52 = 14;
pub const NET_SCTP_SNDBUF_POLICY: _bindgen_ty_52 = 15;
pub const NET_SCTP_SACK_TIMEOUT: _bindgen_ty_52 = 16;
pub const NET_SCTP_RCVBUF_POLICY: _bindgen_ty_52 = 17;
pub type _bindgen_ty_52 = core::ffi::c_uint;
pub const NET_BRIDGE_NF_CALL_ARPTABLES: _bindgen_ty_53 = 1;
pub const NET_BRIDGE_NF_CALL_IPTABLES: _bindgen_ty_53 = 2;
pub const NET_BRIDGE_NF_CALL_IP6TABLES: _bindgen_ty_53 = 3;
pub const NET_BRIDGE_NF_FILTER_VLAN_TAGGED: _bindgen_ty_53 = 4;
pub const NET_BRIDGE_NF_FILTER_PPPOE_TAGGED: _bindgen_ty_53 = 5;
pub type _bindgen_ty_53 = core::ffi::c_uint;
pub const FS_NRINODE: _bindgen_ty_54 = 1;
pub const FS_STATINODE: _bindgen_ty_54 = 2;
pub const FS_MAXINODE: _bindgen_ty_54 = 3;
pub const FS_NRDQUOT: _bindgen_ty_54 = 4;
pub const FS_MAXDQUOT: _bindgen_ty_54 = 5;
pub const FS_NRFILE: _bindgen_ty_54 = 6;
pub const FS_MAXFILE: _bindgen_ty_54 = 7;
pub const FS_DENTRY: _bindgen_ty_54 = 8;
pub const FS_NRSUPER: _bindgen_ty_54 = 9;
pub const FS_MAXSUPER: _bindgen_ty_54 = 10;
pub const FS_OVERFLOWUID: _bindgen_ty_54 = 11;
pub const FS_OVERFLOWGID: _bindgen_ty_54 = 12;
pub const FS_LEASES: _bindgen_ty_54 = 13;
pub const FS_DIR_NOTIFY: _bindgen_ty_54 = 14;
pub const FS_LEASE_TIME: _bindgen_ty_54 = 15;
pub const FS_DQSTATS: _bindgen_ty_54 = 16;
pub const FS_XFS: _bindgen_ty_54 = 17;
pub const FS_AIO_NR: _bindgen_ty_54 = 18;
pub const FS_AIO_MAX_NR: _bindgen_ty_54 = 19;
pub const FS_INOTIFY: _bindgen_ty_54 = 20;
pub const FS_OCFS2: _bindgen_ty_54 = 988;
pub type _bindgen_ty_54 = core::ffi::c_uint;
pub const FS_DQ_LOOKUPS: _bindgen_ty_55 = 1;
pub const FS_DQ_DROPS: _bindgen_ty_55 = 2;
pub const FS_DQ_READS: _bindgen_ty_55 = 3;
pub const FS_DQ_WRITES: _bindgen_ty_55 = 4;
pub const FS_DQ_CACHE_HITS: _bindgen_ty_55 = 5;
pub const FS_DQ_ALLOCATED: _bindgen_ty_55 = 6;
pub const FS_DQ_FREE: _bindgen_ty_55 = 7;
pub const FS_DQ_SYNCS: _bindgen_ty_55 = 8;
pub const FS_DQ_WARNINGS: _bindgen_ty_55 = 9;
pub type _bindgen_ty_55 = core::ffi::c_uint;
pub const DEV_CDROM: _bindgen_ty_56 = 1;
pub const DEV_HWMON: _bindgen_ty_56 = 2;
pub const DEV_PARPORT: _bindgen_ty_56 = 3;
pub const DEV_RAID: _bindgen_ty_56 = 4;
pub const DEV_MAC_HID: _bindgen_ty_56 = 5;
pub const DEV_SCSI: _bindgen_ty_56 = 6;
pub const DEV_IPMI: _bindgen_ty_56 = 7;
pub type _bindgen_ty_56 = core::ffi::c_uint;
pub const DEV_CDROM_INFO: _bindgen_ty_57 = 1;
pub const DEV_CDROM_AUTOCLOSE: _bindgen_ty_57 = 2;
pub const DEV_CDROM_AUTOEJECT: _bindgen_ty_57 = 3;
pub const DEV_CDROM_DEBUG: _bindgen_ty_57 = 4;
pub const DEV_CDROM_LOCK: _bindgen_ty_57 = 5;
pub const DEV_CDROM_CHECK_MEDIA: _bindgen_ty_57 = 6;
pub type _bindgen_ty_57 = core::ffi::c_uint;
pub const DEV_PARPORT_DEFAULT: _bindgen_ty_58 = -3;
pub type _bindgen_ty_58 = core::ffi::c_int;
pub const DEV_RAID_SPEED_LIMIT_MIN: _bindgen_ty_59 = 1;
pub const DEV_RAID_SPEED_LIMIT_MAX: _bindgen_ty_59 = 2;
pub type _bindgen_ty_59 = core::ffi::c_uint;
pub const DEV_PARPORT_DEFAULT_TIMESLICE: _bindgen_ty_60 = 1;
pub const DEV_PARPORT_DEFAULT_SPINTIME: _bindgen_ty_60 = 2;
pub type _bindgen_ty_60 = core::ffi::c_uint;
pub const DEV_PARPORT_SPINTIME: _bindgen_ty_61 = 1;
pub const DEV_PARPORT_BASE_ADDR: _bindgen_ty_61 = 2;
pub const DEV_PARPORT_IRQ: _bindgen_ty_61 = 3;
pub const DEV_PARPORT_DMA: _bindgen_ty_61 = 4;
pub const DEV_PARPORT_MODES: _bindgen_ty_61 = 5;
pub const DEV_PARPORT_DEVICES: _bindgen_ty_61 = 6;
pub const DEV_PARPORT_AUTOPROBE: _bindgen_ty_61 = 16;
pub type _bindgen_ty_61 = core::ffi::c_uint;
pub const DEV_PARPORT_DEVICES_ACTIVE: _bindgen_ty_62 = -3;
pub type _bindgen_ty_62 = core::ffi::c_int;
pub const DEV_PARPORT_DEVICE_TIMESLICE: _bindgen_ty_63 = 1;
pub type _bindgen_ty_63 = core::ffi::c_uint;
pub const DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES: _bindgen_ty_64 = 1;
pub const DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES: _bindgen_ty_64 = 2;
pub const DEV_MAC_HID_MOUSE_BUTTON_EMULATION: _bindgen_ty_64 = 3;
pub const DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE: _bindgen_ty_64 = 4;
pub const DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE: _bindgen_ty_64 = 5;
pub const DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES: _bindgen_ty_64 = 6;
pub type _bindgen_ty_64 = core::ffi::c_uint;
pub const DEV_SCSI_LOGGING_LEVEL: _bindgen_ty_65 = 1;
pub type _bindgen_ty_65 = core::ffi::c_uint;
pub const DEV_IPMI_POWEROFF_POWERCYCLE: _bindgen_ty_66 = 1;
pub type _bindgen_ty_66 = core::ffi::c_uint;
pub const ABI_DEFHANDLER_COFF: _bindgen_ty_67 = 1;
pub const ABI_DEFHANDLER_ELF: _bindgen_ty_67 = 2;
pub const ABI_DEFHANDLER_LCALL7: _bindgen_ty_67 = 3;
pub const ABI_DEFHANDLER_LIBCSO: _bindgen_ty_67 = 4;
pub const ABI_TRACE: _bindgen_ty_67 = 5;
pub const ABI_FAKE_UTSNAME: _bindgen_ty_67 = 6;
pub type _bindgen_ty_67 = core::ffi::c_uint;
extern "C" {
    pub static sysctl_vals: [core::ffi::c_int; 0usize];
}
extern "C" {
    pub static sysctl_long_vals: [core::ffi::c_ulong; 0usize];
}
pub type proc_handler = ::core::option::Option<
    unsafe extern "C" fn(
        ctl: *mut ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> core::ffi::c_int,
>;
extern "C" {
    pub fn proc_dostring(
        arg1: *mut ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_dobool(
        table: *mut ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_dointvec(
        arg1: *mut ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_douintvec(
        arg1: *mut ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_dointvec_minmax(
        arg1: *mut ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_douintvec_minmax(
        table: *mut ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_dou8vec_minmax(
        table: *mut ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_dointvec_jiffies(
        arg1: *mut ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_dointvec_ms_jiffies_minmax(
        table: *mut ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_dointvec_userhz_jiffies(
        arg1: *mut ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_dointvec_ms_jiffies(
        arg1: *mut ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_doulongvec_minmax(
        arg1: *mut ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_doulongvec_ms_jiffies_minmax(
        table: *mut ctl_table,
        arg1: core::ffi::c_int,
        arg2: *mut core::ffi::c_void,
        arg3: *mut usize,
        arg4: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_do_large_bitmap(
        arg1: *mut ctl_table,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_void,
        arg4: *mut usize,
        arg5: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn proc_do_static_key(
        table: *mut ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table_poll {
    pub event: atomic_t,
    pub wait: wait_queue_head_t,
}
impl Default for ctl_table_poll {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table {
    pub procname: *const core::ffi::c_char,
    pub data: *mut core::ffi::c_void,
    pub maxlen: core::ffi::c_int,
    pub mode: umode_t,
    pub proc_handler: proc_handler,
    pub poll: *mut ctl_table_poll,
    pub extra1: *mut core::ffi::c_void,
    pub extra2: *mut core::ffi::c_void,
}
impl Default for ctl_table {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_node {
    pub node: rb_node,
    pub header: *mut ctl_table_header,
}
impl Default for ctl_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table_header {
    pub __bindgen_anon_1: ctl_table_header__bindgen_ty_1,
    pub unregistering: *mut completion,
    pub ctl_table_arg: *const ctl_table,
    pub root: *mut ctl_table_root,
    pub set: *mut ctl_table_set,
    pub parent: *mut ctl_dir,
    pub node: *mut ctl_node,
    pub inodes: hlist_head,
    pub type_: ctl_table_header__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ctl_table_header__bindgen_ty_1 {
    pub __bindgen_anon_1: ctl_table_header__bindgen_ty_1__bindgen_ty_1,
    pub rcu: callback_head,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table_header__bindgen_ty_1__bindgen_ty_1 {
    pub ctl_table: *mut ctl_table,
    pub ctl_table_size: core::ffi::c_int,
    pub used: core::ffi::c_int,
    pub count: core::ffi::c_int,
    pub nreg: core::ffi::c_int,
}
impl Default for ctl_table_header__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ctl_table_header__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ctl_table_header_SYSCTL_TABLE_TYPE_DEFAULT: ctl_table_header__bindgen_ty_2 = 0;
pub const ctl_table_header_SYSCTL_TABLE_TYPE_PERMANENTLY_EMPTY: ctl_table_header__bindgen_ty_2 = 1;
pub type ctl_table_header__bindgen_ty_2 = core::ffi::c_uint;
impl Default for ctl_table_header {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_dir {
    pub header: ctl_table_header,
    pub root: rb_root,
}
impl Default for ctl_dir {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table_set {
    pub is_seen:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut ctl_table_set) -> core::ffi::c_int>,
    pub dir: ctl_dir,
}
impl Default for ctl_table_set {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table_root {
    pub default_set: ctl_table_set,
    pub lookup: ::core::option::Option<
        unsafe extern "C" fn(root: *mut ctl_table_root) -> *mut ctl_table_set,
    >,
    pub set_ownership: ::core::option::Option<
        unsafe extern "C" fn(head: *mut ctl_table_header, uid: *mut kuid_t, gid: *mut kgid_t),
    >,
    pub permissions: ::core::option::Option<
        unsafe extern "C" fn(
            head: *mut ctl_table_header,
            table: *const ctl_table,
        ) -> core::ffi::c_int,
    >,
}
impl Default for ctl_table_root {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn proc_sys_poll_notify(poll: *mut ctl_table_poll);
}
extern "C" {
    pub fn setup_sysctl_set(
        p: *mut ctl_table_set,
        root: *mut ctl_table_root,
        is_seen: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut ctl_table_set) -> core::ffi::c_int,
        >,
    );
}
extern "C" {
    pub fn retire_sysctl_set(set: *mut ctl_table_set);
}
extern "C" {
    pub fn __register_sysctl_table(
        set: *mut ctl_table_set,
        path: *const core::ffi::c_char,
        table: *mut ctl_table,
        table_size: usize,
    ) -> *mut ctl_table_header;
}
extern "C" {
    pub fn register_sysctl_sz(
        path: *const core::ffi::c_char,
        table: *mut ctl_table,
        table_size: usize,
    ) -> *mut ctl_table_header;
}
extern "C" {
    pub fn unregister_sysctl_table(table: *mut ctl_table_header);
}
extern "C" {
    pub fn sysctl_init_bases() -> core::ffi::c_int;
}
extern "C" {
    pub fn __register_sysctl_init(
        path: *const core::ffi::c_char,
        table: *mut ctl_table,
        table_name: *const core::ffi::c_char,
        table_size: usize,
    );
}
extern "C" {
    pub fn register_sysctl_mount_point(path: *const core::ffi::c_char) -> *mut ctl_table_header;
}
extern "C" {
    pub fn do_sysctl_args();
}
extern "C" {
    pub fn sysctl_is_alias(param: *mut core::ffi::c_char) -> bool_;
}
extern "C" {
    pub fn do_proc_douintvec(
        table: *mut ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
        conv: ::core::option::Option<
            unsafe extern "C" fn(
                lvalp: *mut core::ffi::c_ulong,
                valp: *mut core::ffi::c_uint,
                write: core::ffi::c_int,
                data: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static mut pwrsw_enabled: core::ffi::c_int;
}
extern "C" {
    pub static mut unaligned_enabled: core::ffi::c_int;
}
extern "C" {
    pub static mut unaligned_dump_stack: core::ffi::c_int;
}
extern "C" {
    pub static mut no_unaligned_warning: core::ffi::c_int;
}
extern "C" {
    pub fn sysctl_max_threads(
        table: *mut ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct subprocess_info {
    pub work: work_struct,
    pub complete: *mut completion,
    pub path: *const core::ffi::c_char,
    pub argv: *mut *mut core::ffi::c_char,
    pub envp: *mut *mut core::ffi::c_char,
    pub wait: core::ffi::c_int,
    pub retval: core::ffi::c_int,
    pub init: ::core::option::Option<
        unsafe extern "C" fn(info: *mut subprocess_info, new: *mut cred) -> core::ffi::c_int,
    >,
    pub cleanup: ::core::option::Option<unsafe extern "C" fn(info: *mut subprocess_info)>,
    pub data: *mut core::ffi::c_void,
}
impl Default for subprocess_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn call_usermodehelper(
        path: *const core::ffi::c_char,
        argv: *mut *mut core::ffi::c_char,
        envp: *mut *mut core::ffi::c_char,
        wait: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn call_usermodehelper_setup(
        path: *const core::ffi::c_char,
        argv: *mut *mut core::ffi::c_char,
        envp: *mut *mut core::ffi::c_char,
        gfp_mask: gfp_t,
        init: ::core::option::Option<
            unsafe extern "C" fn(info: *mut subprocess_info, new: *mut cred) -> core::ffi::c_int,
        >,
        cleanup: ::core::option::Option<unsafe extern "C" fn(arg1: *mut subprocess_info)>,
        data: *mut core::ffi::c_void,
    ) -> *mut subprocess_info;
}
extern "C" {
    pub fn call_usermodehelper_exec(
        info: *mut subprocess_info,
        wait: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
pub const umh_disable_depth_UMH_ENABLED: umh_disable_depth = 0;
pub const umh_disable_depth_UMH_FREEZING: umh_disable_depth = 1;
pub const umh_disable_depth_UMH_DISABLED: umh_disable_depth = 2;
pub type umh_disable_depth = core::ffi::c_uint;
extern "C" {
    pub fn __usermodehelper_disable(depth: umh_disable_depth) -> core::ffi::c_int;
}
extern "C" {
    pub fn __usermodehelper_set_disable_depth(depth: umh_disable_depth);
}
extern "C" {
    pub fn usermodehelper_read_trylock() -> core::ffi::c_int;
}
extern "C" {
    pub fn usermodehelper_read_lock_wait(timeout: core::ffi::c_long) -> core::ffi::c_long;
}
extern "C" {
    pub fn usermodehelper_read_unlock();
}
extern "C" {
    pub static mut modprobe_path: [core::ffi::c_char; 0usize];
}
extern "C" {
    pub fn __request_module(wait: bool_, name: *const core::ffi::c_char, ...) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user_i387_struct {
    pub cwd: core::ffi::c_ushort,
    pub swd: core::ffi::c_ushort,
    pub twd: core::ffi::c_ushort,
    pub fop: core::ffi::c_ushort,
    pub rip: __u64,
    pub rdp: __u64,
    pub mxcsr: __u32,
    pub mxcsr_mask: __u32,
    pub st_space: [__u32; 32usize],
    pub xmm_space: [__u32; 64usize],
    pub padding: [__u32; 24usize],
}
impl Default for user_i387_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct user_regs_struct {
    pub r15: core::ffi::c_ulong,
    pub r14: core::ffi::c_ulong,
    pub r13: core::ffi::c_ulong,
    pub r12: core::ffi::c_ulong,
    pub bp: core::ffi::c_ulong,
    pub bx: core::ffi::c_ulong,
    pub r11: core::ffi::c_ulong,
    pub r10: core::ffi::c_ulong,
    pub r9: core::ffi::c_ulong,
    pub r8: core::ffi::c_ulong,
    pub ax: core::ffi::c_ulong,
    pub cx: core::ffi::c_ulong,
    pub dx: core::ffi::c_ulong,
    pub si: core::ffi::c_ulong,
    pub di: core::ffi::c_ulong,
    pub orig_ax: core::ffi::c_ulong,
    pub ip: core::ffi::c_ulong,
    pub cs: core::ffi::c_ulong,
    pub flags: core::ffi::c_ulong,
    pub sp: core::ffi::c_ulong,
    pub ss: core::ffi::c_ulong,
    pub fs_base: core::ffi::c_ulong,
    pub gs_base: core::ffi::c_ulong,
    pub ds: core::ffi::c_ulong,
    pub es: core::ffi::c_ulong,
    pub fs: core::ffi::c_ulong,
    pub gs: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user {
    pub regs: user_regs_struct,
    pub u_fpvalid: core::ffi::c_int,
    pub pad0: core::ffi::c_int,
    pub i387: user_i387_struct,
    pub u_tsize: core::ffi::c_ulong,
    pub u_dsize: core::ffi::c_ulong,
    pub u_ssize: core::ffi::c_ulong,
    pub start_code: core::ffi::c_ulong,
    pub start_stack: core::ffi::c_ulong,
    pub signal: core::ffi::c_long,
    pub reserved: core::ffi::c_int,
    pub pad1: core::ffi::c_int,
    pub u_ar0: core::ffi::c_ulong,
    pub u_fpstate: *mut user_i387_struct,
    pub magic: core::ffi::c_ulong,
    pub u_comm: [core::ffi::c_char; 32usize],
    pub u_debugreg: [core::ffi::c_ulong; 8usize],
    pub error_code: core::ffi::c_ulong,
    pub fault_address: core::ffi::c_ulong,
}
impl Default for user {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user_ymmh_regs {
    pub ymmh_space: [__u32; 64usize],
}
impl Default for user_ymmh_regs {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct user_xstate_header {
    pub xfeatures: __u64,
    pub reserved1: [__u64; 2usize],
    pub reserved2: [__u64; 5usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user_xstateregs {
    pub i387: user_xstateregs__bindgen_ty_1,
    pub header: user_xstate_header,
    pub ymmh: user_ymmh_regs,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user_xstateregs__bindgen_ty_1 {
    pub fpx_space: [__u64; 58usize],
    pub xstate_fx_sw: [__u64; 6usize],
}
impl Default for user_xstateregs__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for user_xstateregs {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn x86_fsbase_read_task(task: *mut task_struct) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn x86_gsbase_read_task(task: *mut task_struct) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn x86_fsbase_write_task(task: *mut task_struct, fsbase: core::ffi::c_ulong);
}
extern "C" {
    pub fn x86_gsbase_write_task(task: *mut task_struct, gsbase: core::ffi::c_ulong);
}
extern "C" {
    pub fn x86_gsbase_read_cpu_inactive() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn x86_gsbase_write_cpu_inactive(gsbase: core::ffi::c_ulong);
}
extern "C" {
    pub fn x86_fsgsbase_read_task(
        task: *mut task_struct,
        selector: core::ffi::c_ushort,
    ) -> core::ffi::c_ulong;
}
pub type elf_greg_t = core::ffi::c_ulong;
pub type elf_gregset_t = [elf_greg_t; 27usize];
pub type elf_fpregset_t = user_i387_struct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vdso_image {
    pub data: *mut core::ffi::c_void,
    pub size: core::ffi::c_ulong,
    pub alt: core::ffi::c_ulong,
    pub alt_len: core::ffi::c_ulong,
    pub extable_base: core::ffi::c_ulong,
    pub extable_len: core::ffi::c_ulong,
    pub extable: *const core::ffi::c_void,
    pub sym_vvar_start: core::ffi::c_long,
    pub sym_vvar_page: core::ffi::c_long,
    pub sym_pvclock_page: core::ffi::c_long,
    pub sym_hvclock_page: core::ffi::c_long,
    pub sym_timens_page: core::ffi::c_long,
    pub sym_VDSO32_NOTE_MASK: core::ffi::c_long,
    pub sym___kernel_sigreturn: core::ffi::c_long,
    pub sym___kernel_rt_sigreturn: core::ffi::c_long,
    pub sym___kernel_vsyscall: core::ffi::c_long,
    pub sym_int80_landing_pad: core::ffi::c_long,
    pub sym_vdso32_sigreturn_landing_pad: core::ffi::c_long,
    pub sym_vdso32_rt_sigreturn_landing_pad: core::ffi::c_long,
}
impl Default for vdso_image {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static vdso_image_64: vdso_image;
}
extern "C" {
    pub fn init_vdso_image(image: *const vdso_image) -> core::ffi::c_int;
}
extern "C" {
    pub fn map_vdso_once(image: *const vdso_image, addr: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn fixup_vdso_exception(
        regs: *mut pt_regs,
        trapnr: core::ffi::c_int,
        error_code: core::ffi::c_ulong,
        fault_addr: core::ffi::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub static mut vdso64_enabled: core::ffi::c_uint;
}
extern "C" {
    pub fn compat_start_thread(regs: *mut pt_regs, new_ip: u32_, new_sp: u32_, x32: bool_);
}
extern "C" {
    pub fn set_personality_ia32(arg1: bool_);
}
extern "C" {
    pub fn set_personality_64bit();
}
extern "C" {
    pub static mut force_personality32: core::ffi::c_int;
}
extern "C" {
    pub static mut elf_hwcap2: u32_;
}
extern "C" {
    pub fn task_size_32bit() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn task_size_64bit(full_addr_space: core::ffi::c_int) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn get_mmap_base(is_legacy: core::ffi::c_int) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn mmap_address_hint_valid(addr: core::ffi::c_ulong, len: core::ffi::c_ulong) -> bool_;
}
extern "C" {
    pub fn get_sigframe_size() -> core::ffi::c_ulong;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux_binprm {
    _unused: [u8; 0],
}
extern "C" {
    pub fn arch_setup_additional_pages(
        bprm: *mut linux_binprm,
        uses_interp: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn compat_arch_setup_additional_pages(
        bprm: *mut linux_binprm,
        uses_interp: core::ffi::c_int,
        x32: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn arch_syscall_is_vdso_sigreturn(regs: *mut pt_regs) -> bool_;
}
pub const align_flags_ALIGN_VA_32: align_flags = 1;
pub const align_flags_ALIGN_VA_64: align_flags = 2;
pub type align_flags = core::ffi::c_uint;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct va_alignment {
    pub flags: core::ffi::c_int,
    pub mask: core::ffi::c_ulong,
    pub bits: core::ffi::c_ulong,
}
impl Default for va_alignment {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut va_align: va_alignment;
}
pub type Elf32_Addr = __u32;
pub type Elf32_Half = __u16;
pub type Elf32_Off = __u32;
pub type Elf32_Sword = __s32;
pub type Elf32_Word = __u32;
pub type Elf64_Addr = __u64;
pub type Elf64_Half = __u16;
pub type Elf64_SHalf = __s16;
pub type Elf64_Off = __u64;
pub type Elf64_Sword = __s32;
pub type Elf64_Word = __u32;
pub type Elf64_Xword = __u64;
pub type Elf64_Sxword = __s64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Elf32_Dyn {
    pub d_tag: Elf32_Sword,
    pub d_un: Elf32_Dyn__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Elf32_Dyn__bindgen_ty_1 {
    pub d_val: Elf32_Sword,
    pub d_ptr: Elf32_Addr,
}
impl Default for Elf32_Dyn__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for Elf32_Dyn {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Elf64_Dyn {
    pub d_tag: Elf64_Sxword,
    pub d_un: Elf64_Dyn__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Elf64_Dyn__bindgen_ty_1 {
    pub d_val: Elf64_Xword,
    pub d_ptr: Elf64_Addr,
}
impl Default for Elf64_Dyn__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for Elf64_Dyn {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf32_rel {
    pub r_offset: Elf32_Addr,
    pub r_info: Elf32_Word,
}
pub type Elf32_Rel = elf32_rel;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf64_rel {
    pub r_offset: Elf64_Addr,
    pub r_info: Elf64_Xword,
}
pub type Elf64_Rel = elf64_rel;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf32_rela {
    pub r_offset: Elf32_Addr,
    pub r_info: Elf32_Word,
    pub r_addend: Elf32_Sword,
}
pub type Elf32_Rela = elf32_rela;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf64_rela {
    pub r_offset: Elf64_Addr,
    pub r_info: Elf64_Xword,
    pub r_addend: Elf64_Sxword,
}
pub type Elf64_Rela = elf64_rela;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf32_sym {
    pub st_name: Elf32_Word,
    pub st_value: Elf32_Addr,
    pub st_size: Elf32_Word,
    pub st_info: core::ffi::c_uchar,
    pub st_other: core::ffi::c_uchar,
    pub st_shndx: Elf32_Half,
}
pub type Elf32_Sym = elf32_sym;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf64_sym {
    pub st_name: Elf64_Word,
    pub st_info: core::ffi::c_uchar,
    pub st_other: core::ffi::c_uchar,
    pub st_shndx: Elf64_Half,
    pub st_value: Elf64_Addr,
    pub st_size: Elf64_Xword,
}
pub type Elf64_Sym = elf64_sym;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf32_hdr {
    pub e_ident: [core::ffi::c_uchar; 16usize],
    pub e_type: Elf32_Half,
    pub e_machine: Elf32_Half,
    pub e_version: Elf32_Word,
    pub e_entry: Elf32_Addr,
    pub e_phoff: Elf32_Off,
    pub e_shoff: Elf32_Off,
    pub e_flags: Elf32_Word,
    pub e_ehsize: Elf32_Half,
    pub e_phentsize: Elf32_Half,
    pub e_phnum: Elf32_Half,
    pub e_shentsize: Elf32_Half,
    pub e_shnum: Elf32_Half,
    pub e_shstrndx: Elf32_Half,
}
pub type Elf32_Ehdr = elf32_hdr;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf64_hdr {
    pub e_ident: [core::ffi::c_uchar; 16usize],
    pub e_type: Elf64_Half,
    pub e_machine: Elf64_Half,
    pub e_version: Elf64_Word,
    pub e_entry: Elf64_Addr,
    pub e_phoff: Elf64_Off,
    pub e_shoff: Elf64_Off,
    pub e_flags: Elf64_Word,
    pub e_ehsize: Elf64_Half,
    pub e_phentsize: Elf64_Half,
    pub e_phnum: Elf64_Half,
    pub e_shentsize: Elf64_Half,
    pub e_shnum: Elf64_Half,
    pub e_shstrndx: Elf64_Half,
}
pub type Elf64_Ehdr = elf64_hdr;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf32_phdr {
    pub p_type: Elf32_Word,
    pub p_offset: Elf32_Off,
    pub p_vaddr: Elf32_Addr,
    pub p_paddr: Elf32_Addr,
    pub p_filesz: Elf32_Word,
    pub p_memsz: Elf32_Word,
    pub p_flags: Elf32_Word,
    pub p_align: Elf32_Word,
}
pub type Elf32_Phdr = elf32_phdr;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf64_phdr {
    pub p_type: Elf64_Word,
    pub p_flags: Elf64_Word,
    pub p_offset: Elf64_Off,
    pub p_vaddr: Elf64_Addr,
    pub p_paddr: Elf64_Addr,
    pub p_filesz: Elf64_Xword,
    pub p_memsz: Elf64_Xword,
    pub p_align: Elf64_Xword,
}
pub type Elf64_Phdr = elf64_phdr;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf32_shdr {
    pub sh_name: Elf32_Word,
    pub sh_type: Elf32_Word,
    pub sh_flags: Elf32_Word,
    pub sh_addr: Elf32_Addr,
    pub sh_offset: Elf32_Off,
    pub sh_size: Elf32_Word,
    pub sh_link: Elf32_Word,
    pub sh_info: Elf32_Word,
    pub sh_addralign: Elf32_Word,
    pub sh_entsize: Elf32_Word,
}
pub type Elf32_Shdr = elf32_shdr;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf64_shdr {
    pub sh_name: Elf64_Word,
    pub sh_type: Elf64_Word,
    pub sh_flags: Elf64_Xword,
    pub sh_addr: Elf64_Addr,
    pub sh_offset: Elf64_Off,
    pub sh_size: Elf64_Xword,
    pub sh_link: Elf64_Word,
    pub sh_info: Elf64_Word,
    pub sh_addralign: Elf64_Xword,
    pub sh_entsize: Elf64_Xword,
}
pub type Elf64_Shdr = elf64_shdr;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf32_note {
    pub n_namesz: Elf32_Word,
    pub n_descsz: Elf32_Word,
    pub n_type: Elf32_Word,
}
pub type Elf32_Nhdr = elf32_note;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct elf64_note {
    pub n_namesz: Elf64_Word,
    pub n_descsz: Elf64_Word,
    pub n_type: Elf64_Word,
}
pub type Elf64_Nhdr = elf64_note;
extern "C" {
    pub static mut _DYNAMIC: [Elf64_Dyn; 0usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct coredump_params {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct gnu_property {
    pub pr_type: u32_,
    pub pr_datasz: u32_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct arch_elf_state {
    _unused: [u8; 0],
}
extern "C" {
    pub fn set_dumpable(mm: *mut mm_struct, value: core::ffi::c_int);
}
extern "C" {
    pub fn mm_alloc() -> *mut mm_struct;
}
extern "C" {
    pub fn __mmdrop(mm: *mut mm_struct);
}
extern "C" {
    pub fn mmput(arg1: *mut mm_struct);
}
extern "C" {
    pub fn mmput_async(arg1: *mut mm_struct);
}
extern "C" {
    pub fn get_task_mm(task: *mut task_struct) -> *mut mm_struct;
}
extern "C" {
    pub fn mm_access(task: *mut task_struct, mode: core::ffi::c_uint) -> *mut mm_struct;
}
extern "C" {
    pub fn exit_mm_release(arg1: *mut task_struct, arg2: *mut mm_struct);
}
extern "C" {
    pub fn exec_mm_release(arg1: *mut task_struct, arg2: *mut mm_struct);
}
extern "C" {
    pub fn arch_pick_mmap_layout(mm: *mut mm_struct, rlim_stack: *mut rlimit);
}
extern "C" {
    pub fn arch_get_unmapped_area(
        arg1: *mut file,
        arg2: core::ffi::c_ulong,
        arg3: core::ffi::c_ulong,
        arg4: core::ffi::c_ulong,
        arg5: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn arch_get_unmapped_area_topdown(
        filp: *mut file,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        pgoff: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn mm_get_unmapped_area(
        mm: *mut mm_struct,
        filp: *mut file,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        pgoff: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn arch_get_unmapped_area_vmflags(
        filp: *mut file,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        pgoff: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
        vm_flags: vm_flags_t,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn arch_get_unmapped_area_topdown_vmflags(
        filp: *mut file,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        pgoff: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
        arg1: vm_flags_t,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn mm_get_unmapped_area_vmflags(
        mm: *mut mm_struct,
        filp: *mut file,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        pgoff: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
        vm_flags: vm_flags_t,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn generic_get_unmapped_area(
        filp: *mut file,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        pgoff: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn generic_get_unmapped_area_topdown(
        filp: *mut file,
        addr: core::ffi::c_ulong,
        len: core::ffi::c_ulong,
        pgoff: core::ffi::c_ulong,
        flags: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
pub const MEMBARRIER_STATE_PRIVATE_EXPEDITED_READY: _bindgen_ty_68 = 1;
pub const MEMBARRIER_STATE_PRIVATE_EXPEDITED: _bindgen_ty_68 = 2;
pub const MEMBARRIER_STATE_GLOBAL_EXPEDITED_READY: _bindgen_ty_68 = 4;
pub const MEMBARRIER_STATE_GLOBAL_EXPEDITED: _bindgen_ty_68 = 8;
pub const MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE_READY: _bindgen_ty_68 = 16;
pub const MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE: _bindgen_ty_68 = 32;
pub const MEMBARRIER_STATE_PRIVATE_EXPEDITED_RSEQ_READY: _bindgen_ty_68 = 64;
pub const MEMBARRIER_STATE_PRIVATE_EXPEDITED_RSEQ: _bindgen_ty_68 = 128;
pub type _bindgen_ty_68 = core::ffi::c_uint;
pub const MEMBARRIER_FLAG_SYNC_CORE: _bindgen_ty_69 = 1;
pub const MEMBARRIER_FLAG_RSEQ: _bindgen_ty_69 = 2;
pub type _bindgen_ty_69 = core::ffi::c_uint;
extern "C" {
    pub fn membarrier_exec_mmap(mm: *mut mm_struct);
}
extern "C" {
    pub fn membarrier_update_current_mm(next_mm: *mut mm_struct);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct xa_limit {
    pub max: u32_,
    pub min: u32_,
}
pub type xa_mark_t = core::ffi::c_uint;
pub const xa_lock_type_XA_LOCK_IRQ: xa_lock_type = 1;
pub const xa_lock_type_XA_LOCK_BH: xa_lock_type = 2;
pub type xa_lock_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xarray {
    pub xa_lock: spinlock_t,
    pub xa_flags: gfp_t,
    pub xa_head: *mut core::ffi::c_void,
}
impl Default for xarray {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn xa_load(arg1: *mut xarray, index: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xa_store(
        arg1: *mut xarray,
        index: core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        arg2: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xa_erase(arg1: *mut xarray, index: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xa_store_range(
        arg1: *mut xarray,
        first: core::ffi::c_ulong,
        last: core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        arg2: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xa_get_mark(arg1: *mut xarray, index: core::ffi::c_ulong, arg2: xa_mark_t) -> bool_;
}
extern "C" {
    pub fn xa_set_mark(arg1: *mut xarray, index: core::ffi::c_ulong, arg2: xa_mark_t);
}
extern "C" {
    pub fn xa_clear_mark(arg1: *mut xarray, index: core::ffi::c_ulong, arg2: xa_mark_t);
}
extern "C" {
    pub fn xa_find(
        xa: *mut xarray,
        index: *mut core::ffi::c_ulong,
        max: core::ffi::c_ulong,
        arg1: xa_mark_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xa_find_after(
        xa: *mut xarray,
        index: *mut core::ffi::c_ulong,
        max: core::ffi::c_ulong,
        arg1: xa_mark_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xa_extract(
        arg1: *mut xarray,
        dst: *mut *mut core::ffi::c_void,
        start: core::ffi::c_ulong,
        max: core::ffi::c_ulong,
        n: core::ffi::c_uint,
        arg2: xa_mark_t,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn xa_destroy(arg1: *mut xarray);
}
extern "C" {
    pub fn __xa_erase(arg1: *mut xarray, index: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __xa_store(
        arg1: *mut xarray,
        index: core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        arg2: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __xa_cmpxchg(
        arg1: *mut xarray,
        index: core::ffi::c_ulong,
        old: *mut core::ffi::c_void,
        entry: *mut core::ffi::c_void,
        arg2: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __xa_insert(
        arg1: *mut xarray,
        index: core::ffi::c_ulong,
        entry: *mut core::ffi::c_void,
        arg2: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __xa_alloc(
        arg1: *mut xarray,
        id: *mut u32_,
        entry: *mut core::ffi::c_void,
        arg2: xa_limit,
        arg3: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __xa_alloc_cyclic(
        arg1: *mut xarray,
        id: *mut u32_,
        entry: *mut core::ffi::c_void,
        arg2: xa_limit,
        next: *mut u32_,
        arg3: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __xa_set_mark(arg1: *mut xarray, index: core::ffi::c_ulong, arg2: xa_mark_t);
}
extern "C" {
    pub fn __xa_clear_mark(arg1: *mut xarray, index: core::ffi::c_ulong, arg2: xa_mark_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xa_node {
    pub shift: core::ffi::c_uchar,
    pub offset: core::ffi::c_uchar,
    pub count: core::ffi::c_uchar,
    pub nr_values: core::ffi::c_uchar,
    pub parent: *mut xa_node,
    pub array: *mut xarray,
    pub __bindgen_anon_1: xa_node__bindgen_ty_1,
    pub slots: [*mut core::ffi::c_void; 64usize],
    pub __bindgen_anon_2: xa_node__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xa_node__bindgen_ty_1 {
    pub private_list: list_head,
    pub callback_head: callback_head,
}
impl Default for xa_node__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xa_node__bindgen_ty_2 {
    pub tags: [[core::ffi::c_ulong; 1usize]; 3usize],
    pub marks: [[core::ffi::c_ulong; 1usize]; 3usize],
}
impl Default for xa_node__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for xa_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn xa_dump(arg1: *const xarray);
}
extern "C" {
    pub fn xa_dump_node(arg1: *const xa_node);
}
pub type xa_update_node_t = ::core::option::Option<unsafe extern "C" fn(node: *mut xa_node)>;
extern "C" {
    pub fn xa_delete_node(arg1: *mut xa_node, arg2: xa_update_node_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xa_state {
    pub xa: *mut xarray,
    pub xa_index: core::ffi::c_ulong,
    pub xa_shift: core::ffi::c_uchar,
    pub xa_sibs: core::ffi::c_uchar,
    pub xa_offset: core::ffi::c_uchar,
    pub xa_pad: core::ffi::c_uchar,
    pub xa_node: *mut xa_node,
    pub xa_alloc: *mut xa_node,
    pub xa_update: xa_update_node_t,
    pub xa_lru: *mut list_lru,
}
impl Default for xa_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn xas_load(arg1: *mut xa_state) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xas_store(arg1: *mut xa_state, entry: *mut core::ffi::c_void) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xas_find(arg1: *mut xa_state, max: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xas_find_conflict(arg1: *mut xa_state) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xas_get_mark(arg1: *const xa_state, arg2: xa_mark_t) -> bool_;
}
extern "C" {
    pub fn xas_set_mark(arg1: *const xa_state, arg2: xa_mark_t);
}
extern "C" {
    pub fn xas_clear_mark(arg1: *const xa_state, arg2: xa_mark_t);
}
extern "C" {
    pub fn xas_find_marked(
        arg1: *mut xa_state,
        max: core::ffi::c_ulong,
        arg2: xa_mark_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn xas_init_marks(arg1: *const xa_state);
}
extern "C" {
    pub fn xas_nomem(arg1: *mut xa_state, arg2: gfp_t) -> bool_;
}
extern "C" {
    pub fn xas_destroy(arg1: *mut xa_state);
}
extern "C" {
    pub fn xas_pause(arg1: *mut xa_state);
}
extern "C" {
    pub fn xas_create_range(arg1: *mut xa_state);
}
pub const XA_CHECK_SCHED: _bindgen_ty_70 = 4096;
pub type _bindgen_ty_70 = core::ffi::c_uint;
extern "C" {
    pub fn __xas_next(arg1: *mut xa_state) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __xas_prev(arg1: *mut xa_state) -> *mut core::ffi::c_void;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct radix_tree_preload {
    pub lock: local_lock_t,
    pub nr: core::ffi::c_uint,
    pub nodes: *mut xa_node,
}
impl Default for radix_tree_preload {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut radix_tree_preloads: radix_tree_preload;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct radix_tree_iter {
    pub index: core::ffi::c_ulong,
    pub next_index: core::ffi::c_ulong,
    pub tags: core::ffi::c_ulong,
    pub node: *mut xa_node,
}
impl Default for radix_tree_iter {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn radix_tree_insert(
        arg1: *mut xarray,
        index: core::ffi::c_ulong,
        arg2: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __radix_tree_lookup(
        arg1: *const xarray,
        index: core::ffi::c_ulong,
        nodep: *mut *mut xa_node,
        slotp: *mut *mut *mut core::ffi::c_void,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn radix_tree_lookup(
        arg1: *const xarray,
        arg2: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn radix_tree_lookup_slot(
        arg1: *const xarray,
        index: core::ffi::c_ulong,
    ) -> *mut *mut core::ffi::c_void;
}
extern "C" {
    pub fn __radix_tree_replace(
        arg1: *mut xarray,
        arg2: *mut xa_node,
        slot: *mut *mut core::ffi::c_void,
        entry: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn radix_tree_iter_replace(
        arg1: *mut xarray,
        arg2: *const radix_tree_iter,
        slot: *mut *mut core::ffi::c_void,
        entry: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn radix_tree_replace_slot(
        arg1: *mut xarray,
        slot: *mut *mut core::ffi::c_void,
        entry: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn radix_tree_iter_delete(
        arg1: *mut xarray,
        iter: *mut radix_tree_iter,
        slot: *mut *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn radix_tree_delete_item(
        arg1: *mut xarray,
        arg2: core::ffi::c_ulong,
        arg3: *mut core::ffi::c_void,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn radix_tree_delete(arg1: *mut xarray, arg2: core::ffi::c_ulong)
        -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn radix_tree_gang_lookup(
        arg1: *const xarray,
        results: *mut *mut core::ffi::c_void,
        first_index: core::ffi::c_ulong,
        max_items: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn radix_tree_preload(gfp_mask: gfp_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn radix_tree_maybe_preload(gfp_mask: gfp_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn radix_tree_init();
}
extern "C" {
    pub fn radix_tree_tag_set(
        arg1: *mut xarray,
        index: core::ffi::c_ulong,
        tag: core::ffi::c_uint,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn radix_tree_tag_clear(
        arg1: *mut xarray,
        index: core::ffi::c_ulong,
        tag: core::ffi::c_uint,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn radix_tree_tag_get(
        arg1: *const xarray,
        index: core::ffi::c_ulong,
        tag: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn radix_tree_iter_tag_clear(
        arg1: *mut xarray,
        iter: *const radix_tree_iter,
        tag: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn radix_tree_gang_lookup_tag(
        arg1: *const xarray,
        results: *mut *mut core::ffi::c_void,
        first_index: core::ffi::c_ulong,
        max_items: core::ffi::c_uint,
        tag: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn radix_tree_gang_lookup_tag_slot(
        arg1: *const xarray,
        results: *mut *mut *mut core::ffi::c_void,
        first_index: core::ffi::c_ulong,
        max_items: core::ffi::c_uint,
        tag: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn radix_tree_tagged(arg1: *const xarray, tag: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn idr_get_free(
        root: *mut xarray,
        iter: *mut radix_tree_iter,
        gfp: gfp_t,
        max: core::ffi::c_ulong,
    ) -> *mut *mut core::ffi::c_void;
}
pub const RADIX_TREE_ITER_TAG_MASK: _bindgen_ty_71 = 15;
pub const RADIX_TREE_ITER_TAGGED: _bindgen_ty_71 = 16;
pub const RADIX_TREE_ITER_CONTIG: _bindgen_ty_71 = 32;
pub type _bindgen_ty_71 = core::ffi::c_uint;
extern "C" {
    pub fn radix_tree_next_chunk(
        arg1: *const xarray,
        iter: *mut radix_tree_iter,
        flags: core::ffi::c_uint,
    ) -> *mut *mut core::ffi::c_void;
}
extern "C" {
    pub fn radix_tree_iter_resume(
        slot: *mut *mut core::ffi::c_void,
        iter: *mut radix_tree_iter,
    ) -> *mut *mut core::ffi::c_void;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct idr {
    pub idr_rt: xarray,
    pub idr_base: core::ffi::c_uint,
    pub idr_next: core::ffi::c_uint,
}
impl Default for idr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn idr_preload(gfp_mask: gfp_t);
}
extern "C" {
    pub fn idr_alloc(
        arg1: *mut idr,
        ptr: *mut core::ffi::c_void,
        start: core::ffi::c_int,
        end: core::ffi::c_int,
        arg2: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn idr_alloc_u32(
        arg1: *mut idr,
        ptr: *mut core::ffi::c_void,
        id: *mut u32_,
        max: core::ffi::c_ulong,
        arg2: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn idr_alloc_cyclic(
        arg1: *mut idr,
        ptr: *mut core::ffi::c_void,
        start: core::ffi::c_int,
        end: core::ffi::c_int,
        arg2: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn idr_remove(arg1: *mut idr, id: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn idr_find(arg1: *const idr, id: core::ffi::c_ulong) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn idr_for_each(
        arg1: *const idr,
        fn_: ::core::option::Option<
            unsafe extern "C" fn(
                id: core::ffi::c_int,
                p: *mut core::ffi::c_void,
                data: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn idr_get_next(arg1: *mut idr, nextid: *mut core::ffi::c_int) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn idr_get_next_ul(
        arg1: *mut idr,
        nextid: *mut core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn idr_replace(
        arg1: *mut idr,
        arg2: *mut core::ffi::c_void,
        id: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn idr_destroy(arg1: *mut idr);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ida_bitmap {
    pub bitmap: [core::ffi::c_ulong; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ida {
    pub xa: xarray,
}
impl Default for ida {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn ida_alloc_range(
        arg1: *mut ida,
        min: core::ffi::c_uint,
        max: core::ffi::c_uint,
        arg2: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn ida_free(arg1: *mut ida, id: core::ffi::c_uint);
}
extern "C" {
    pub fn ida_destroy(ida: *mut ida);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm_operations_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct poll_table_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fs_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_open_node {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_iattrs {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_global_locks {
    pub open_file_mutex: [mutex; 4usize],
}
impl Default for kernfs_global_locks {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const kernfs_node_type_KERNFS_DIR: kernfs_node_type = 1;
pub const kernfs_node_type_KERNFS_FILE: kernfs_node_type = 2;
pub const kernfs_node_type_KERNFS_LINK: kernfs_node_type = 4;
pub type kernfs_node_type = core::ffi::c_uint;
pub const kernfs_node_flag_KERNFS_ACTIVATED: kernfs_node_flag = 16;
pub const kernfs_node_flag_KERNFS_NS: kernfs_node_flag = 32;
pub const kernfs_node_flag_KERNFS_HAS_SEQ_SHOW: kernfs_node_flag = 64;
pub const kernfs_node_flag_KERNFS_HAS_MMAP: kernfs_node_flag = 128;
pub const kernfs_node_flag_KERNFS_LOCKDEP: kernfs_node_flag = 256;
pub const kernfs_node_flag_KERNFS_HIDDEN: kernfs_node_flag = 512;
pub const kernfs_node_flag_KERNFS_SUICIDAL: kernfs_node_flag = 1024;
pub const kernfs_node_flag_KERNFS_SUICIDED: kernfs_node_flag = 2048;
pub const kernfs_node_flag_KERNFS_EMPTY_DIR: kernfs_node_flag = 4096;
pub const kernfs_node_flag_KERNFS_HAS_RELEASE: kernfs_node_flag = 8192;
pub const kernfs_node_flag_KERNFS_REMOVING: kernfs_node_flag = 16384;
pub type kernfs_node_flag = core::ffi::c_uint;
pub const kernfs_root_flag_KERNFS_ROOT_CREATE_DEACTIVATED: kernfs_root_flag = 1;
pub const kernfs_root_flag_KERNFS_ROOT_EXTRA_OPEN_PERM_CHECK: kernfs_root_flag = 2;
pub const kernfs_root_flag_KERNFS_ROOT_SUPPORT_EXPORTOP: kernfs_root_flag = 4;
pub const kernfs_root_flag_KERNFS_ROOT_SUPPORT_USER_XATTR: kernfs_root_flag = 8;
pub type kernfs_root_flag = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_elem_dir {
    pub subdirs: core::ffi::c_ulong,
    pub children: rb_root,
    pub root: *mut kernfs_root,
    pub rev: core::ffi::c_ulong,
}
impl Default for kernfs_elem_dir {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_elem_symlink {
    pub target_kn: *mut kernfs_node,
}
impl Default for kernfs_elem_symlink {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_elem_attr {
    pub ops: *const kernfs_ops,
    pub open: *mut kernfs_open_node,
    pub size: loff_t,
    pub notify_next: *mut kernfs_node,
}
impl Default for kernfs_elem_attr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_node {
    pub count: atomic_t,
    pub active: atomic_t,
    pub parent: *mut kernfs_node,
    pub name: *const core::ffi::c_char,
    pub rb: rb_node,
    pub ns: *const core::ffi::c_void,
    pub hash: core::ffi::c_uint,
    pub flags: core::ffi::c_ushort,
    pub mode: umode_t,
    pub __bindgen_anon_1: kernfs_node__bindgen_ty_1,
    pub id: u64_,
    pub priv_: *mut core::ffi::c_void,
    pub iattr: *mut kernfs_iattrs,
    pub rcu: callback_head,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union kernfs_node__bindgen_ty_1 {
    pub dir: kernfs_elem_dir,
    pub symlink: kernfs_elem_symlink,
    pub attr: kernfs_elem_attr,
}
impl Default for kernfs_node__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for kernfs_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kernfs_syscall_ops {
    pub show_options: ::core::option::Option<
        unsafe extern "C" fn(sf: *mut seq_file, root: *mut kernfs_root) -> core::ffi::c_int,
    >,
    pub mkdir: ::core::option::Option<
        unsafe extern "C" fn(
            parent: *mut kernfs_node,
            name: *const core::ffi::c_char,
            mode: umode_t,
        ) -> core::ffi::c_int,
    >,
    pub rmdir:
        ::core::option::Option<unsafe extern "C" fn(kn: *mut kernfs_node) -> core::ffi::c_int>,
    pub rename: ::core::option::Option<
        unsafe extern "C" fn(
            kn: *mut kernfs_node,
            new_parent: *mut kernfs_node,
            new_name: *const core::ffi::c_char,
        ) -> core::ffi::c_int,
    >,
    pub show_path: ::core::option::Option<
        unsafe extern "C" fn(
            sf: *mut seq_file,
            kn: *mut kernfs_node,
            root: *mut kernfs_root,
        ) -> core::ffi::c_int,
    >,
}
extern "C" {
    pub fn kernfs_root_to_node(root: *mut kernfs_root) -> *mut kernfs_node;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_open_file {
    pub kn: *mut kernfs_node,
    pub file: *mut file,
    pub seq_file: *mut seq_file,
    pub priv_: *mut core::ffi::c_void,
    pub mutex: mutex,
    pub prealloc_mutex: mutex,
    pub event: core::ffi::c_int,
    pub list: list_head,
    pub prealloc_buf: *mut core::ffi::c_char,
    pub atomic_write_len: usize,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub vm_ops: *const vm_operations_struct,
}
impl Default for kernfs_open_file {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl kernfs_open_file {
    #[inline]
    pub fn mmapped(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mmapped(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn released(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_released(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(mmapped: bool_, released: bool_) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let mmapped: u8 = unsafe { ::core::mem::transmute(mmapped) };
            mmapped as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let released: u8 = unsafe { ::core::mem::transmute(released) };
            released as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kernfs_ops {
    pub open:
        ::core::option::Option<unsafe extern "C" fn(of: *mut kernfs_open_file) -> core::ffi::c_int>,
    pub release: ::core::option::Option<unsafe extern "C" fn(of: *mut kernfs_open_file)>,
    pub seq_show: ::core::option::Option<
        unsafe extern "C" fn(sf: *mut seq_file, v: *mut core::ffi::c_void) -> core::ffi::c_int,
    >,
    pub seq_start: ::core::option::Option<
        unsafe extern "C" fn(sf: *mut seq_file, ppos: *mut loff_t) -> *mut core::ffi::c_void,
    >,
    pub seq_next: ::core::option::Option<
        unsafe extern "C" fn(
            sf: *mut seq_file,
            v: *mut core::ffi::c_void,
            ppos: *mut loff_t,
        ) -> *mut core::ffi::c_void,
    >,
    pub seq_stop:
        ::core::option::Option<unsafe extern "C" fn(sf: *mut seq_file, v: *mut core::ffi::c_void)>,
    pub read: ::core::option::Option<
        unsafe extern "C" fn(
            of: *mut kernfs_open_file,
            buf: *mut core::ffi::c_char,
            bytes: usize,
            off: loff_t,
        ) -> isize,
    >,
    pub atomic_write_len: usize,
    pub prealloc: bool_,
    pub write: ::core::option::Option<
        unsafe extern "C" fn(
            of: *mut kernfs_open_file,
            buf: *mut core::ffi::c_char,
            bytes: usize,
            off: loff_t,
        ) -> isize,
    >,
    pub poll: ::core::option::Option<
        unsafe extern "C" fn(of: *mut kernfs_open_file, pt: *mut poll_table_struct) -> __poll_t,
    >,
    pub mmap: ::core::option::Option<
        unsafe extern "C" fn(
            of: *mut kernfs_open_file,
            vma: *mut vm_area_struct,
        ) -> core::ffi::c_int,
    >,
    pub llseek: ::core::option::Option<
        unsafe extern "C" fn(
            of: *mut kernfs_open_file,
            offset: loff_t,
            whence: core::ffi::c_int,
        ) -> loff_t,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_fs_context {
    pub root: *mut kernfs_root,
    pub ns_tag: *mut core::ffi::c_void,
    pub magic: core::ffi::c_ulong,
    pub new_sb_created: bool_,
}
impl Default for kernfs_fs_context {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn kernfs_name(
        kn: *mut kernfs_node,
        buf: *mut core::ffi::c_char,
        buflen: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernfs_path_from_node(
        root_kn: *mut kernfs_node,
        kn: *mut kernfs_node,
        buf: *mut core::ffi::c_char,
        buflen: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn pr_cont_kernfs_name(kn: *mut kernfs_node);
}
extern "C" {
    pub fn pr_cont_kernfs_path(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_get_parent(kn: *mut kernfs_node) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_find_and_get_ns(
        parent: *mut kernfs_node,
        name: *const core::ffi::c_char,
        ns: *const core::ffi::c_void,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_walk_and_get_ns(
        parent: *mut kernfs_node,
        path: *const core::ffi::c_char,
        ns: *const core::ffi::c_void,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_get(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_put(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_node_from_dentry(dentry: *mut dentry) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_root_from_sb(sb: *mut super_block) -> *mut kernfs_root;
}
extern "C" {
    pub fn kernfs_get_inode(sb: *mut super_block, kn: *mut kernfs_node) -> *mut inode;
}
extern "C" {
    pub fn kernfs_node_dentry(kn: *mut kernfs_node, sb: *mut super_block) -> *mut dentry;
}
extern "C" {
    pub fn kernfs_create_root(
        scops: *mut kernfs_syscall_ops,
        flags: core::ffi::c_uint,
        priv_: *mut core::ffi::c_void,
    ) -> *mut kernfs_root;
}
extern "C" {
    pub fn kernfs_destroy_root(root: *mut kernfs_root);
}
extern "C" {
    pub fn kernfs_create_dir_ns(
        parent: *mut kernfs_node,
        name: *const core::ffi::c_char,
        mode: umode_t,
        uid: kuid_t,
        gid: kgid_t,
        priv_: *mut core::ffi::c_void,
        ns: *const core::ffi::c_void,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_create_empty_dir(
        parent: *mut kernfs_node,
        name: *const core::ffi::c_char,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn __kernfs_create_file(
        parent: *mut kernfs_node,
        name: *const core::ffi::c_char,
        mode: umode_t,
        uid: kuid_t,
        gid: kgid_t,
        size: loff_t,
        ops: *const kernfs_ops,
        priv_: *mut core::ffi::c_void,
        ns: *const core::ffi::c_void,
        key: *mut lock_class_key,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_create_link(
        parent: *mut kernfs_node,
        name: *const core::ffi::c_char,
        target: *mut kernfs_node,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn kernfs_activate(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_show(kn: *mut kernfs_node, show: bool_);
}
extern "C" {
    pub fn kernfs_remove(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_break_active_protection(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_unbreak_active_protection(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_remove_self(kn: *mut kernfs_node) -> bool_;
}
extern "C" {
    pub fn kernfs_remove_by_name_ns(
        parent: *mut kernfs_node,
        name: *const core::ffi::c_char,
        ns: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernfs_rename_ns(
        kn: *mut kernfs_node,
        new_parent: *mut kernfs_node,
        new_name: *const core::ffi::c_char,
        new_ns: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernfs_setattr(kn: *mut kernfs_node, iattr: *const iattr) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernfs_generic_poll(of: *mut kernfs_open_file, pt: *mut poll_table_struct) -> __poll_t;
}
extern "C" {
    pub fn kernfs_notify(kn: *mut kernfs_node);
}
extern "C" {
    pub fn kernfs_xattr_get(
        kn: *mut kernfs_node,
        name: *const core::ffi::c_char,
        value: *mut core::ffi::c_void,
        size: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernfs_xattr_set(
        kn: *mut kernfs_node,
        name: *const core::ffi::c_char,
        value: *const core::ffi::c_void,
        size: usize,
        flags: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernfs_super_ns(sb: *mut super_block) -> *const core::ffi::c_void;
}
extern "C" {
    pub fn kernfs_get_tree(fc: *mut fs_context) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernfs_free_fs_context(fc: *mut fs_context);
}
extern "C" {
    pub fn kernfs_kill_sb(sb: *mut super_block);
}
extern "C" {
    pub fn kernfs_init();
}
extern "C" {
    pub fn kernfs_find_and_get_node_by_id(root: *mut kernfs_root, id: u64_) -> *mut kernfs_node;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sock {
    _unused: [u8; 0],
}
pub const kobj_ns_type_KOBJ_NS_TYPE_NONE: kobj_ns_type = 0;
pub const kobj_ns_type_KOBJ_NS_TYPE_NET: kobj_ns_type = 1;
pub const kobj_ns_type_KOBJ_NS_TYPES: kobj_ns_type = 2;
pub type kobj_ns_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kobj_ns_type_operations {
    pub type_: kobj_ns_type,
    pub current_may_mount: ::core::option::Option<unsafe extern "C" fn() -> bool_>,
    pub grab_current_ns: ::core::option::Option<unsafe extern "C" fn() -> *mut core::ffi::c_void>,
    pub netlink_ns:
        ::core::option::Option<unsafe extern "C" fn(sk: *mut sock) -> *const core::ffi::c_void>,
    pub initial_ns: ::core::option::Option<unsafe extern "C" fn() -> *const core::ffi::c_void>,
    pub drop_ns: ::core::option::Option<unsafe extern "C" fn(arg1: *mut core::ffi::c_void)>,
}
impl Default for kobj_ns_type_operations {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn kobj_ns_type_register(ops: *const kobj_ns_type_operations) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobj_ns_type_registered(type_: kobj_ns_type) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobj_child_ns_ops(parent: *const kobject) -> *const kobj_ns_type_operations;
}
extern "C" {
    pub fn kobj_ns_ops(kobj: *const kobject) -> *const kobj_ns_type_operations;
}
extern "C" {
    pub fn kobj_ns_current_may_mount(type_: kobj_ns_type) -> bool_;
}
extern "C" {
    pub fn kobj_ns_grab_current(type_: kobj_ns_type) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kobj_ns_netlink(type_: kobj_ns_type, sk: *mut sock) -> *const core::ffi::c_void;
}
extern "C" {
    pub fn kobj_ns_initial(type_: kobj_ns_type) -> *const core::ffi::c_void;
}
extern "C" {
    pub fn kobj_ns_drop(type_: kobj_ns_type, ns: *mut core::ffi::c_void);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct attribute {
    pub name: *const core::ffi::c_char,
    pub mode: umode_t,
}
impl Default for attribute {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct attribute_group {
    pub name: *const core::ffi::c_char,
    pub is_visible: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut kobject,
            arg2: *mut attribute,
            arg3: core::ffi::c_int,
        ) -> umode_t,
    >,
    pub is_bin_visible: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut kobject,
            arg2: *mut bin_attribute,
            arg3: core::ffi::c_int,
        ) -> umode_t,
    >,
    pub attrs: *mut *mut attribute,
    pub bin_attrs: *mut *mut bin_attribute,
}
impl Default for attribute_group {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bin_attribute {
    pub attr: attribute,
    pub size: usize,
    pub private: *mut core::ffi::c_void,
    pub f_mapping: ::core::option::Option<unsafe extern "C" fn() -> *mut address_space>,
    pub read: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut kobject,
            arg3: *mut bin_attribute,
            arg4: *mut core::ffi::c_char,
            arg5: loff_t,
            arg6: usize,
        ) -> isize,
    >,
    pub write: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut kobject,
            arg3: *mut bin_attribute,
            arg4: *mut core::ffi::c_char,
            arg5: loff_t,
            arg6: usize,
        ) -> isize,
    >,
    pub llseek: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut kobject,
            arg3: *mut bin_attribute,
            arg4: loff_t,
            arg5: core::ffi::c_int,
        ) -> loff_t,
    >,
    pub mmap: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut kobject,
            attr: *mut bin_attribute,
            vma: *mut vm_area_struct,
        ) -> core::ffi::c_int,
    >,
}
impl Default for bin_attribute {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sysfs_ops {
    pub show: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut kobject,
            arg2: *mut attribute,
            arg3: *mut core::ffi::c_char,
        ) -> isize,
    >,
    pub store: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut kobject,
            arg2: *mut attribute,
            arg3: *const core::ffi::c_char,
            arg4: usize,
        ) -> isize,
    >,
}
extern "C" {
    pub fn sysfs_create_dir_ns(
        kobj: *mut kobject,
        ns: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_remove_dir(kobj: *mut kobject);
}
extern "C" {
    pub fn sysfs_rename_dir_ns(
        kobj: *mut kobject,
        new_name: *const core::ffi::c_char,
        new_ns: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_move_dir_ns(
        kobj: *mut kobject,
        new_parent_kobj: *mut kobject,
        new_ns: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_create_mount_point(
        parent_kobj: *mut kobject,
        name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_remove_mount_point(parent_kobj: *mut kobject, name: *const core::ffi::c_char);
}
extern "C" {
    pub fn sysfs_create_file_ns(
        kobj: *mut kobject,
        attr: *const attribute,
        ns: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_create_files(
        kobj: *mut kobject,
        attr: *const *const attribute,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_chmod_file(
        kobj: *mut kobject,
        attr: *const attribute,
        mode: umode_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_break_active_protection(
        kobj: *mut kobject,
        attr: *const attribute,
    ) -> *mut kernfs_node;
}
extern "C" {
    pub fn sysfs_unbreak_active_protection(kn: *mut kernfs_node);
}
extern "C" {
    pub fn sysfs_remove_file_ns(
        kobj: *mut kobject,
        attr: *const attribute,
        ns: *const core::ffi::c_void,
    );
}
extern "C" {
    pub fn sysfs_remove_file_self(kobj: *mut kobject, attr: *const attribute) -> bool_;
}
extern "C" {
    pub fn sysfs_remove_files(kobj: *mut kobject, attr: *const *const attribute);
}
extern "C" {
    pub fn sysfs_create_bin_file(
        kobj: *mut kobject,
        attr: *const bin_attribute,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_remove_bin_file(kobj: *mut kobject, attr: *const bin_attribute);
}
extern "C" {
    pub fn sysfs_create_link(
        kobj: *mut kobject,
        target: *mut kobject,
        name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_create_link_nowarn(
        kobj: *mut kobject,
        target: *mut kobject,
        name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_remove_link(kobj: *mut kobject, name: *const core::ffi::c_char);
}
extern "C" {
    pub fn sysfs_rename_link_ns(
        kobj: *mut kobject,
        target: *mut kobject,
        old_name: *const core::ffi::c_char,
        new_name: *const core::ffi::c_char,
        new_ns: *const core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_delete_link(dir: *mut kobject, targ: *mut kobject, name: *const core::ffi::c_char);
}
extern "C" {
    pub fn sysfs_create_group(kobj: *mut kobject, grp: *const attribute_group) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_create_groups(
        kobj: *mut kobject,
        groups: *mut *const attribute_group,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_update_groups(
        kobj: *mut kobject,
        groups: *mut *const attribute_group,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_update_group(kobj: *mut kobject, grp: *const attribute_group) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_remove_group(kobj: *mut kobject, grp: *const attribute_group);
}
extern "C" {
    pub fn sysfs_remove_groups(kobj: *mut kobject, groups: *mut *const attribute_group);
}
extern "C" {
    pub fn sysfs_add_file_to_group(
        kobj: *mut kobject,
        attr: *const attribute,
        group: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_remove_file_from_group(
        kobj: *mut kobject,
        attr: *const attribute,
        group: *const core::ffi::c_char,
    );
}
extern "C" {
    pub fn sysfs_merge_group(kobj: *mut kobject, grp: *const attribute_group) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_unmerge_group(kobj: *mut kobject, grp: *const attribute_group);
}
extern "C" {
    pub fn sysfs_add_link_to_group(
        kobj: *mut kobject,
        group_name: *const core::ffi::c_char,
        target: *mut kobject,
        link_name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_remove_link_from_group(
        kobj: *mut kobject,
        group_name: *const core::ffi::c_char,
        link_name: *const core::ffi::c_char,
    );
}
extern "C" {
    pub fn compat_only_sysfs_link_entry_to_kobj(
        kobj: *mut kobject,
        target_kobj: *mut kobject,
        target_name: *const core::ffi::c_char,
        symlink_name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_notify(
        kobj: *mut kobject,
        dir: *const core::ffi::c_char,
        attr: *const core::ffi::c_char,
    );
}
extern "C" {
    pub fn sysfs_init() -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_file_change_owner(
        kobj: *mut kobject,
        name: *const core::ffi::c_char,
        kuid: kuid_t,
        kgid: kgid_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_change_owner(kobj: *mut kobject, kuid: kuid_t, kgid: kgid_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_link_change_owner(
        kobj: *mut kobject,
        targ: *mut kobject,
        name: *const core::ffi::c_char,
        kuid: kuid_t,
        kgid: kgid_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_groups_change_owner(
        kobj: *mut kobject,
        groups: *mut *const attribute_group,
        kuid: kuid_t,
        kgid: kgid_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_group_change_owner(
        kobj: *mut kobject,
        groups: *const attribute_group,
        kuid: kuid_t,
        kgid: kgid_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_emit(
        buf: *mut core::ffi::c_char,
        fmt: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_emit_at(
        buf: *mut core::ffi::c_char,
        at: core::ffi::c_int,
        fmt: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sysfs_bin_attr_simple_read(
        file: *mut file,
        kobj: *mut kobject,
        attr: *mut bin_attribute,
        buf: *mut core::ffi::c_char,
        off: loff_t,
        count: usize,
    ) -> isize;
}
extern "C" {
    pub static mut uevent_seqnum: atomic64_t;
}
pub const kobject_action_KOBJ_ADD: kobject_action = 0;
pub const kobject_action_KOBJ_REMOVE: kobject_action = 1;
pub const kobject_action_KOBJ_CHANGE: kobject_action = 2;
pub const kobject_action_KOBJ_MOVE: kobject_action = 3;
pub const kobject_action_KOBJ_ONLINE: kobject_action = 4;
pub const kobject_action_KOBJ_OFFLINE: kobject_action = 5;
pub const kobject_action_KOBJ_BIND: kobject_action = 6;
pub const kobject_action_KOBJ_UNBIND: kobject_action = 7;
pub type kobject_action = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kobject {
    pub name: *const core::ffi::c_char,
    pub entry: list_head,
    pub parent: *mut kobject,
    pub kset: *mut kset,
    pub ktype: *const kobj_type,
    pub sd: *mut kernfs_node,
    pub kref: kref,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl Default for kobject {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl kobject {
    #[inline]
    pub fn state_initialized(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_initialized(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn state_in_sysfs(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_in_sysfs(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn state_add_uevent_sent(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_add_uevent_sent(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn state_remove_uevent_sent(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_remove_uevent_sent(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn uevent_suppress(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uevent_suppress(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        state_initialized: core::ffi::c_uint,
        state_in_sysfs: core::ffi::c_uint,
        state_add_uevent_sent: core::ffi::c_uint,
        state_remove_uevent_sent: core::ffi::c_uint,
        uevent_suppress: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let state_initialized: u32 = unsafe { ::core::mem::transmute(state_initialized) };
            state_initialized as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let state_in_sysfs: u32 = unsafe { ::core::mem::transmute(state_in_sysfs) };
            state_in_sysfs as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let state_add_uevent_sent: u32 =
                unsafe { ::core::mem::transmute(state_add_uevent_sent) };
            state_add_uevent_sent as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let state_remove_uevent_sent: u32 =
                unsafe { ::core::mem::transmute(state_remove_uevent_sent) };
            state_remove_uevent_sent as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let uevent_suppress: u32 = unsafe { ::core::mem::transmute(uevent_suppress) };
            uevent_suppress as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn kobject_set_name(
        kobj: *mut kobject,
        name: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobject_set_name_vargs(
        kobj: *mut kobject,
        fmt: *const core::ffi::c_char,
        vargs: *mut __va_list_tag,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobject_init(kobj: *mut kobject, ktype: *const kobj_type);
}
extern "C" {
    pub fn kobject_add(
        kobj: *mut kobject,
        parent: *mut kobject,
        fmt: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobject_init_and_add(
        kobj: *mut kobject,
        ktype: *const kobj_type,
        parent: *mut kobject,
        fmt: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobject_del(kobj: *mut kobject);
}
extern "C" {
    pub fn kobject_create_and_add(
        name: *const core::ffi::c_char,
        parent: *mut kobject,
    ) -> *mut kobject;
}
extern "C" {
    pub fn kobject_rename(
        arg1: *mut kobject,
        new_name: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobject_move(arg1: *mut kobject, arg2: *mut kobject) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobject_get(kobj: *mut kobject) -> *mut kobject;
}
extern "C" {
    pub fn kobject_get_unless_zero(kobj: *mut kobject) -> *mut kobject;
}
extern "C" {
    pub fn kobject_put(kobj: *mut kobject);
}
extern "C" {
    pub fn kobject_namespace(kobj: *const kobject) -> *const core::ffi::c_void;
}
extern "C" {
    pub fn kobject_get_ownership(kobj: *const kobject, uid: *mut kuid_t, gid: *mut kgid_t);
}
extern "C" {
    pub fn kobject_get_path(kobj: *const kobject, flag: gfp_t) -> *mut core::ffi::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kobj_type {
    pub release: ::core::option::Option<unsafe extern "C" fn(kobj: *mut kobject)>,
    pub sysfs_ops: *const sysfs_ops,
    pub default_groups: *mut *const attribute_group,
    pub child_ns_type: ::core::option::Option<
        unsafe extern "C" fn(kobj: *const kobject) -> *const kobj_ns_type_operations,
    >,
    pub namespace: ::core::option::Option<
        unsafe extern "C" fn(kobj: *const kobject) -> *const core::ffi::c_void,
    >,
    pub get_ownership: ::core::option::Option<
        unsafe extern "C" fn(kobj: *const kobject, uid: *mut kuid_t, gid: *mut kgid_t),
    >,
}
impl Default for kobj_type {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kobj_uevent_env {
    pub argv: [*mut core::ffi::c_char; 3usize],
    pub envp: [*mut core::ffi::c_char; 64usize],
    pub envp_idx: core::ffi::c_int,
    pub buf: [core::ffi::c_char; 2048usize],
    pub buflen: core::ffi::c_int,
}
impl Default for kobj_uevent_env {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kset_uevent_ops {
    pub filter:
        ::core::option::Option<unsafe extern "C" fn(kobj: *const kobject) -> core::ffi::c_int>,
    pub name: ::core::option::Option<
        unsafe extern "C" fn(kobj: *const kobject) -> *const core::ffi::c_char,
    >,
    pub uevent: ::core::option::Option<
        unsafe extern "C" fn(kobj: *const kobject, env: *mut kobj_uevent_env) -> core::ffi::c_int,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kobj_attribute {
    pub attr: attribute,
    pub show: ::core::option::Option<
        unsafe extern "C" fn(
            kobj: *mut kobject,
            attr: *mut kobj_attribute,
            buf: *mut core::ffi::c_char,
        ) -> isize,
    >,
    pub store: ::core::option::Option<
        unsafe extern "C" fn(
            kobj: *mut kobject,
            attr: *mut kobj_attribute,
            buf: *const core::ffi::c_char,
            count: usize,
        ) -> isize,
    >,
}
impl Default for kobj_attribute {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static kobj_sysfs_ops: sysfs_ops;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kset {
    pub list: list_head,
    pub list_lock: spinlock_t,
    pub kobj: kobject,
    pub uevent_ops: *const kset_uevent_ops,
}
impl Default for kset {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn kset_init(kset: *mut kset);
}
extern "C" {
    pub fn kset_register(kset: *mut kset) -> core::ffi::c_int;
}
extern "C" {
    pub fn kset_unregister(kset: *mut kset);
}
extern "C" {
    pub fn kset_create_and_add(
        name: *const core::ffi::c_char,
        u: *const kset_uevent_ops,
        parent_kobj: *mut kobject,
    ) -> *mut kset;
}
extern "C" {
    pub fn kset_find_obj(arg1: *mut kset, arg2: *const core::ffi::c_char) -> *mut kobject;
}
extern "C" {
    pub static mut kernel_kobj: *mut kobject;
}
extern "C" {
    pub static mut mm_kobj: *mut kobject;
}
extern "C" {
    pub static mut hypervisor_kobj: *mut kobject;
}
extern "C" {
    pub static mut power_kobj: *mut kobject;
}
extern "C" {
    pub static mut firmware_kobj: *mut kobject;
}
extern "C" {
    pub fn kobject_uevent(kobj: *mut kobject, action: kobject_action) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobject_uevent_env(
        kobj: *mut kobject,
        action: kobject_action,
        envp: *mut *mut core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kobject_synth_uevent(
        kobj: *mut kobject,
        buf: *const core::ffi::c_char,
        count: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn add_uevent_var(
        env: *mut kobj_uevent_env,
        format: *const core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
pub const KERNEL_PARAM_OPS_FL_NOARG: _bindgen_ty_72 = 1;
pub type _bindgen_ty_72 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kernel_param_ops {
    pub flags: core::ffi::c_uint,
    pub set: ::core::option::Option<
        unsafe extern "C" fn(
            val: *const core::ffi::c_char,
            kp: *const kernel_param,
        ) -> core::ffi::c_int,
    >,
    pub get: ::core::option::Option<
        unsafe extern "C" fn(
            buffer: *mut core::ffi::c_char,
            kp: *const kernel_param,
        ) -> core::ffi::c_int,
    >,
    pub free: ::core::option::Option<unsafe extern "C" fn(arg: *mut core::ffi::c_void)>,
}
pub const KERNEL_PARAM_FL_UNSAFE: _bindgen_ty_73 = 1;
pub const KERNEL_PARAM_FL_HWPARAM: _bindgen_ty_73 = 2;
pub type _bindgen_ty_73 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernel_param {
    pub name: *const core::ffi::c_char,
    pub mod_: *mut module,
    pub ops: *const kernel_param_ops,
    pub perm: u16_,
    pub level: s8,
    pub flags: u8_,
    pub __bindgen_anon_1: kernel_param__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union kernel_param__bindgen_ty_1 {
    pub arg: *mut core::ffi::c_void,
    pub str_: *const kparam_string,
    pub arr: *const kparam_array,
}
impl Default for kernel_param__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for kernel_param {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static __start___param: [kernel_param; 0usize];
}
extern "C" {
    pub static __stop___param: [kernel_param; 0usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kparam_string {
    pub maxlen: core::ffi::c_uint,
    pub string: *mut core::ffi::c_char,
}
impl Default for kparam_string {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kparam_array {
    pub max: core::ffi::c_uint,
    pub elemsize: core::ffi::c_uint,
    pub num: *mut core::ffi::c_uint,
    pub ops: *const kernel_param_ops,
    pub elem: *mut core::ffi::c_void,
}
impl Default for kparam_array {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn kernel_param_lock(mod_: *mut module);
}
extern "C" {
    pub fn kernel_param_unlock(mod_: *mut module);
}
extern "C" {
    pub fn parameq(name1: *const core::ffi::c_char, name2: *const core::ffi::c_char) -> bool_;
}
extern "C" {
    pub fn parameqn(
        name1: *const core::ffi::c_char,
        name2: *const core::ffi::c_char,
        n: usize,
    ) -> bool_;
}
pub type parse_unknown_fn = ::core::option::Option<
    unsafe extern "C" fn(
        param: *mut core::ffi::c_char,
        val: *mut core::ffi::c_char,
        doing: *const core::ffi::c_char,
        arg: *mut core::ffi::c_void,
    ) -> core::ffi::c_int,
>;
extern "C" {
    pub fn parse_args(
        name: *const core::ffi::c_char,
        args: *mut core::ffi::c_char,
        params: *const kernel_param,
        num: core::ffi::c_uint,
        level_min: s16,
        level_max: s16,
        arg: *mut core::ffi::c_void,
        unknown: parse_unknown_fn,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn destroy_params(params: *const kernel_param, num: core::ffi::c_uint);
}
extern "C" {
    pub static param_ops_byte: kernel_param_ops;
}
extern "C" {
    pub fn param_set_byte(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_byte(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_short: kernel_param_ops;
}
extern "C" {
    pub fn param_set_short(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_short(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_ushort: kernel_param_ops;
}
extern "C" {
    pub fn param_set_ushort(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_ushort(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_int: kernel_param_ops;
}
extern "C" {
    pub fn param_set_int(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_int(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_uint: kernel_param_ops;
}
extern "C" {
    pub fn param_set_uint(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_uint(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_set_uint_minmax(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
        min: core::ffi::c_uint,
        max: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_long: kernel_param_ops;
}
extern "C" {
    pub fn param_set_long(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_long(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_ulong: kernel_param_ops;
}
extern "C" {
    pub fn param_set_ulong(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_ulong(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_ullong: kernel_param_ops;
}
extern "C" {
    pub fn param_set_ullong(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_ullong(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_hexint: kernel_param_ops;
}
extern "C" {
    pub fn param_set_hexint(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_hexint(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_charp: kernel_param_ops;
}
extern "C" {
    pub fn param_set_charp(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_charp(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_free_charp(arg: *mut core::ffi::c_void);
}
extern "C" {
    pub static param_ops_bool: kernel_param_ops;
}
extern "C" {
    pub fn param_set_bool(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_bool(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_bool_enable_only: kernel_param_ops;
}
extern "C" {
    pub fn param_set_bool_enable_only(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_invbool: kernel_param_ops;
}
extern "C" {
    pub fn param_set_invbool(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_invbool(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static param_ops_bint: kernel_param_ops;
}
extern "C" {
    pub fn param_set_bint(
        val: *const core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
pub const hwparam_type_hwparam_ioport: hwparam_type = 0;
pub const hwparam_type_hwparam_iomem: hwparam_type = 1;
pub const hwparam_type_hwparam_ioport_or_iomem: hwparam_type = 2;
pub const hwparam_type_hwparam_irq: hwparam_type = 3;
pub const hwparam_type_hwparam_dma: hwparam_type = 4;
pub const hwparam_type_hwparam_dma_addr: hwparam_type = 5;
pub const hwparam_type_hwparam_other: hwparam_type = 6;
pub type hwparam_type = core::ffi::c_uint;
extern "C" {
    pub static param_array_ops: kernel_param_ops;
}
extern "C" {
    pub static param_ops_string: kernel_param_ops;
}
extern "C" {
    pub fn param_set_copystring(
        val: *const core::ffi::c_char,
        arg1: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn param_get_string(
        buffer: *mut core::ffi::c_char,
        kp: *const kernel_param,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn module_param_sysfs_setup(
        mod_: *mut module,
        kparam: *const kernel_param,
        num_params: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn module_param_sysfs_remove(mod_: *mut module);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct latch_tree_node {
    pub node: [rb_node; 2usize],
}
impl Default for latch_tree_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct latch_tree_root {
    pub seq: seqcount_latch_t,
    pub tree: [rb_root; 2usize],
}
impl Default for latch_tree_root {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct latch_tree_ops {
    pub less: ::core::option::Option<
        unsafe extern "C" fn(a: *mut latch_tree_node, b: *mut latch_tree_node) -> bool_,
    >,
    pub comp: ::core::option::Option<
        unsafe extern "C" fn(
            key: *mut core::ffi::c_void,
            b: *mut latch_tree_node,
        ) -> core::ffi::c_int,
    >,
}
pub const EI_ETYPE_NULL: _bindgen_ty_74 = 0;
pub const EI_ETYPE_ERRNO: _bindgen_ty_74 = 1;
pub const EI_ETYPE_ERRNO_NULL: _bindgen_ty_74 = 2;
pub const EI_ETYPE_TRUE: _bindgen_ty_74 = 3;
pub type _bindgen_ty_74 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct error_injection_entry {
    pub addr: core::ffi::c_ulong,
    pub etype: core::ffi::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ddebug {
    pub modname: *const core::ffi::c_char,
    pub function: *const core::ffi::c_char,
    pub filename: *const core::ffi::c_char,
    pub format: *const core::ffi::c_char,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
impl Default for _ddebug {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl _ddebug {
    #[inline]
    pub fn lineno(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_lineno(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn class_id(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_class_id(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lineno: core::ffi::c_uint,
        class_id: core::ffi::c_uint,
        flags: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 18u8, {
            let lineno: u32 = unsafe { ::core::mem::transmute(lineno) };
            lineno as u64
        });
        __bindgen_bitfield_unit.set(18usize, 6u8, {
            let class_id: u32 = unsafe { ::core::mem::transmute(class_id) };
            class_id as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let flags: u32 = unsafe { ::core::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const class_map_type_DD_CLASS_TYPE_DISJOINT_BITS: class_map_type = 0;
pub const class_map_type_DD_CLASS_TYPE_LEVEL_NUM: class_map_type = 1;
pub const class_map_type_DD_CLASS_TYPE_DISJOINT_NAMES: class_map_type = 2;
pub const class_map_type_DD_CLASS_TYPE_LEVEL_NAMES: class_map_type = 3;
pub type class_map_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ddebug_class_map {
    pub link: list_head,
    pub mod_: *mut module,
    pub mod_name: *const core::ffi::c_char,
    pub class_names: *mut *const core::ffi::c_char,
    pub length: core::ffi::c_int,
    pub base: core::ffi::c_int,
    pub map_type: class_map_type,
}
impl Default for ddebug_class_map {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ddebug_info {
    pub descs: *mut _ddebug,
    pub classes: *mut ddebug_class_map,
    pub num_descs: core::ffi::c_uint,
    pub num_classes: core::ffi::c_uint,
}
impl Default for _ddebug_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ddebug_class_param {
    pub __bindgen_anon_1: ddebug_class_param__bindgen_ty_1,
    pub flags: [core::ffi::c_char; 8usize],
    pub map: *const ddebug_class_map,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ddebug_class_param__bindgen_ty_1 {
    pub bits: *mut core::ffi::c_ulong,
    pub lvl: *mut core::ffi::c_uint,
}
impl Default for ddebug_class_param__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ddebug_class_param {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static param_ops_dyndbg_classes: kernel_param_ops;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mod_arch_specific {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct modversion_info {
    pub crc: core::ffi::c_ulong,
    pub name: [core::ffi::c_char; 56usize],
}
impl Default for modversion_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct module_kobject {
    pub kobj: kobject,
    pub mod_: *mut module,
    pub drivers_dir: *mut kobject,
    pub mp: *mut module_param_attrs,
    pub kobj_completion: *mut completion,
}
impl Default for module_kobject {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct module_attribute {
    pub attr: attribute,
    pub show: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut module_attribute,
            arg2: *mut module_kobject,
            arg3: *mut core::ffi::c_char,
        ) -> isize,
    >,
    pub store: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut module_attribute,
            arg2: *mut module_kobject,
            arg3: *const core::ffi::c_char,
            count: usize,
        ) -> isize,
    >,
    pub setup: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut module, arg2: *const core::ffi::c_char),
    >,
    pub test: ::core::option::Option<unsafe extern "C" fn(arg1: *mut module) -> core::ffi::c_int>,
    pub free: ::core::option::Option<unsafe extern "C" fn(arg1: *mut module)>,
}
impl Default for module_attribute {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct module_version_attribute {
    pub mattr: module_attribute,
    pub module_name: *const core::ffi::c_char,
    pub version: *const core::ffi::c_char,
}
impl Default for module_version_attribute {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __modver_version_show(
        arg1: *mut module_attribute,
        arg2: *mut module_kobject,
        arg3: *mut core::ffi::c_char,
    ) -> isize;
}
extern "C" {
    pub static mut module_uevent: module_attribute;
}
extern "C" {
    pub fn init_module() -> core::ffi::c_int;
}
extern "C" {
    pub fn cleanup_module();
}
extern "C" {
    pub static mut modules_disabled: core::ffi::c_int;
}
extern "C" {
    pub fn __symbol_get(symbol: *const core::ffi::c_char) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __symbol_get_gpl(symbol: *const core::ffi::c_char) -> *mut core::ffi::c_void;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct module_use {
    pub source_list: list_head,
    pub target_list: list_head,
    pub source: *mut module,
    pub target: *mut module,
}
impl Default for module_use {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const module_state_MODULE_STATE_LIVE: module_state = 0;
pub const module_state_MODULE_STATE_COMING: module_state = 1;
pub const module_state_MODULE_STATE_GOING: module_state = 2;
pub const module_state_MODULE_STATE_UNFORMED: module_state = 3;
pub type module_state = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mod_tree_node {
    pub mod_: *mut module,
    pub node: latch_tree_node,
}
impl Default for mod_tree_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const mod_mem_type_MOD_TEXT: mod_mem_type = 0;
pub const mod_mem_type_MOD_DATA: mod_mem_type = 1;
pub const mod_mem_type_MOD_RODATA: mod_mem_type = 2;
pub const mod_mem_type_MOD_RO_AFTER_INIT: mod_mem_type = 3;
pub const mod_mem_type_MOD_INIT_TEXT: mod_mem_type = 4;
pub const mod_mem_type_MOD_INIT_DATA: mod_mem_type = 5;
pub const mod_mem_type_MOD_INIT_RODATA: mod_mem_type = 6;
pub const mod_mem_type_MOD_MEM_NUM_TYPES: mod_mem_type = 7;
pub const mod_mem_type_MOD_INVALID: mod_mem_type = -1;
pub type mod_mem_type = core::ffi::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct module_memory {
    pub base: *mut core::ffi::c_void,
    pub size: core::ffi::c_uint,
    pub mtn: mod_tree_node,
}
impl Default for module_memory {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mod_kallsyms {
    pub symtab: *mut Elf64_Sym,
    pub num_symtab: core::ffi::c_uint,
    pub strtab: *mut core::ffi::c_char,
    pub typetab: *mut core::ffi::c_char,
}
impl Default for mod_kallsyms {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __module_text_address(addr: core::ffi::c_ulong) -> *mut module;
}
extern "C" {
    pub fn __module_address(addr: core::ffi::c_ulong) -> *mut module;
}
extern "C" {
    pub fn is_module_address(addr: core::ffi::c_ulong) -> bool_;
}
extern "C" {
    pub fn __is_module_percpu_address(
        addr: core::ffi::c_ulong,
        can_addr: *mut core::ffi::c_ulong,
    ) -> bool_;
}
extern "C" {
    pub fn is_module_percpu_address(addr: core::ffi::c_ulong) -> bool_;
}
extern "C" {
    pub fn is_module_text_address(addr: core::ffi::c_ulong) -> bool_;
}
extern "C" {
    pub fn find_module(name: *const core::ffi::c_char) -> *mut module;
}
extern "C" {
    pub fn __module_put_and_kthread_exit(mod_: *mut module, code: core::ffi::c_long) -> !;
}
extern "C" {
    pub fn module_refcount(mod_: *mut module) -> core::ffi::c_int;
}
extern "C" {
    pub fn __symbol_put(symbol: *const core::ffi::c_char);
}
extern "C" {
    pub fn symbol_put_addr(addr: *mut core::ffi::c_void);
}
extern "C" {
    pub fn __module_get(module: *mut module);
}
extern "C" {
    pub fn try_module_get(module: *mut module) -> bool_;
}
extern "C" {
    pub fn module_put(module: *mut module);
}
extern "C" {
    pub fn dereference_module_function_descriptor(
        mod_: *mut module,
        ptr: *mut core::ffi::c_void,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn register_module_notifier(nb: *mut notifier_block) -> core::ffi::c_int;
}
extern "C" {
    pub fn unregister_module_notifier(nb: *mut notifier_block) -> core::ffi::c_int;
}
extern "C" {
    pub fn print_modules();
}
extern "C" {
    pub fn set_module_sig_enforced();
}
extern "C" {
    pub static mut module_kset: *mut kset;
}
extern "C" {
    pub static module_ktype: kobj_type;
}
extern "C" {
    pub fn module_bug_finalize(arg1: *const Elf64_Ehdr, arg2: *const Elf64_Shdr, arg3: *mut module);
}
extern "C" {
    pub fn module_bug_cleanup(arg1: *mut module);
}
extern "C" {
    pub fn module_kallsyms_on_each_symbol(
        modname: *const core::ffi::c_char,
        fn_: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut core::ffi::c_void,
                arg2: *const core::ffi::c_char,
                arg3: core::ffi::c_ulong,
            ) -> core::ffi::c_int,
        >,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn module_address_lookup(
        addr: core::ffi::c_ulong,
        symbolsize: *mut core::ffi::c_ulong,
        offset: *mut core::ffi::c_ulong,
        modname: *mut *mut core::ffi::c_char,
        modbuildid: *mut *const core::ffi::c_uchar,
        namebuf: *mut core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn lookup_module_symbol_name(
        addr: core::ffi::c_ulong,
        symname: *mut core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn lookup_module_symbol_attrs(
        addr: core::ffi::c_ulong,
        size: *mut core::ffi::c_ulong,
        offset: *mut core::ffi::c_ulong,
        modname: *mut core::ffi::c_char,
        name: *mut core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn module_get_kallsym(
        symnum: core::ffi::c_uint,
        value: *mut core::ffi::c_ulong,
        type_: *mut core::ffi::c_char,
        name: *mut core::ffi::c_char,
        module_name: *mut core::ffi::c_char,
        exported: *mut core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn module_kallsyms_lookup_name(name: *const core::ffi::c_char) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn find_kallsyms_symbol_value(
        mod_: *mut module,
        name: *const core::ffi::c_char,
    ) -> core::ffi::c_ulong;
}
pub type percpu_ref_func_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut percpu_ref)>;
pub const __PERCPU_REF_ATOMIC: _bindgen_ty_75 = 1;
pub const __PERCPU_REF_DEAD: _bindgen_ty_75 = 2;
pub const __PERCPU_REF_ATOMIC_DEAD: _bindgen_ty_75 = 3;
pub const __PERCPU_REF_FLAG_BITS: _bindgen_ty_75 = 2;
pub type _bindgen_ty_75 = core::ffi::c_uint;
pub const PERCPU_REF_INIT_ATOMIC: _bindgen_ty_76 = 1;
pub const PERCPU_REF_INIT_DEAD: _bindgen_ty_76 = 2;
pub const PERCPU_REF_ALLOW_REINIT: _bindgen_ty_76 = 4;
pub type _bindgen_ty_76 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct percpu_ref_data {
    pub count: atomic_long_t,
    pub release: percpu_ref_func_t,
    pub confirm_switch: percpu_ref_func_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub rcu: callback_head,
    pub ref_: *mut percpu_ref,
}
impl Default for percpu_ref_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl percpu_ref_data {
    #[inline]
    pub fn force_atomic(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_force_atomic(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn allow_reinit(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_allow_reinit(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        force_atomic: bool_,
        allow_reinit: bool_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let force_atomic: u8 = unsafe { ::core::mem::transmute(force_atomic) };
            force_atomic as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let allow_reinit: u8 = unsafe { ::core::mem::transmute(allow_reinit) };
            allow_reinit as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct percpu_ref {
    pub percpu_count_ptr: core::ffi::c_ulong,
    pub data: *mut percpu_ref_data,
}
impl Default for percpu_ref {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn percpu_ref_init(
        ref_: *mut percpu_ref,
        release: percpu_ref_func_t,
        flags: core::ffi::c_uint,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn percpu_ref_exit(ref_: *mut percpu_ref);
}
extern "C" {
    pub fn percpu_ref_switch_to_atomic(ref_: *mut percpu_ref, confirm_switch: percpu_ref_func_t);
}
extern "C" {
    pub fn percpu_ref_switch_to_atomic_sync(ref_: *mut percpu_ref);
}
extern "C" {
    pub fn percpu_ref_switch_to_percpu(ref_: *mut percpu_ref);
}
extern "C" {
    pub fn percpu_ref_kill_and_confirm(ref_: *mut percpu_ref, confirm_kill: percpu_ref_func_t);
}
extern "C" {
    pub fn percpu_ref_resurrect(ref_: *mut percpu_ref);
}
extern "C" {
    pub fn percpu_ref_reinit(ref_: *mut percpu_ref);
}
extern "C" {
    pub fn percpu_ref_is_zero(ref_: *mut percpu_ref) -> bool_;
}
pub const _slab_flag_bits__SLAB_CONSISTENCY_CHECKS: _slab_flag_bits = 0;
pub const _slab_flag_bits__SLAB_RED_ZONE: _slab_flag_bits = 1;
pub const _slab_flag_bits__SLAB_POISON: _slab_flag_bits = 2;
pub const _slab_flag_bits__SLAB_KMALLOC: _slab_flag_bits = 3;
pub const _slab_flag_bits__SLAB_HWCACHE_ALIGN: _slab_flag_bits = 4;
pub const _slab_flag_bits__SLAB_CACHE_DMA: _slab_flag_bits = 5;
pub const _slab_flag_bits__SLAB_CACHE_DMA32: _slab_flag_bits = 6;
pub const _slab_flag_bits__SLAB_STORE_USER: _slab_flag_bits = 7;
pub const _slab_flag_bits__SLAB_PANIC: _slab_flag_bits = 8;
pub const _slab_flag_bits__SLAB_TYPESAFE_BY_RCU: _slab_flag_bits = 9;
pub const _slab_flag_bits__SLAB_TRACE: _slab_flag_bits = 10;
pub const _slab_flag_bits__SLAB_NOLEAKTRACE: _slab_flag_bits = 11;
pub const _slab_flag_bits__SLAB_NO_MERGE: _slab_flag_bits = 12;
pub const _slab_flag_bits__SLAB_NO_USER_FLAGS: _slab_flag_bits = 13;
pub const _slab_flag_bits__SLAB_RECLAIM_ACCOUNT: _slab_flag_bits = 14;
pub const _slab_flag_bits__SLAB_OBJECT_POISON: _slab_flag_bits = 15;
pub const _slab_flag_bits__SLAB_CMPXCHG_DOUBLE: _slab_flag_bits = 16;
pub const _slab_flag_bits__SLAB_FLAGS_LAST_BIT: _slab_flag_bits = 17;
pub type _slab_flag_bits = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kmem_cache {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct slab {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm_struct {
    _unused: [u8; 0],
}
pub type kasan_vmalloc_flags_t = core::ffi::c_uint;
extern "C" {
    pub fn slab_is_available() -> bool_;
}
extern "C" {
    pub fn kmem_cache_create(
        name: *const core::ffi::c_char,
        size: core::ffi::c_uint,
        align: core::ffi::c_uint,
        flags: slab_flags_t,
        ctor: ::core::option::Option<unsafe extern "C" fn(arg1: *mut core::ffi::c_void)>,
    ) -> *mut kmem_cache;
}
extern "C" {
    pub fn kmem_cache_create_usercopy(
        name: *const core::ffi::c_char,
        size: core::ffi::c_uint,
        align: core::ffi::c_uint,
        flags: slab_flags_t,
        useroffset: core::ffi::c_uint,
        usersize: core::ffi::c_uint,
        ctor: ::core::option::Option<unsafe extern "C" fn(arg1: *mut core::ffi::c_void)>,
    ) -> *mut kmem_cache;
}
extern "C" {
    pub fn kmem_cache_destroy(s: *mut kmem_cache);
}
extern "C" {
    pub fn kmem_cache_shrink(s: *mut kmem_cache) -> core::ffi::c_int;
}
extern "C" {
    pub fn krealloc_noprof(
        objp: *const core::ffi::c_void,
        new_size: usize,
        flags: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kfree(objp: *const core::ffi::c_void);
}
extern "C" {
    pub fn kfree_sensitive(objp: *const core::ffi::c_void);
}
extern "C" {
    pub fn __ksize(objp: *const core::ffi::c_void) -> usize;
}
extern "C" {
    pub fn ksize(objp: *const core::ffi::c_void) -> usize;
}
extern "C" {
    pub fn kmem_dump_obj(object: *mut core::ffi::c_void) -> bool_;
}
pub const kmalloc_cache_type_KMALLOC_NORMAL: kmalloc_cache_type = 0;
pub const kmalloc_cache_type_KMALLOC_CGROUP: kmalloc_cache_type = 0;
pub const kmalloc_cache_type_KMALLOC_RANDOM_START: kmalloc_cache_type = 0;
pub const kmalloc_cache_type_KMALLOC_RANDOM_END: kmalloc_cache_type = 0;
pub const kmalloc_cache_type_KMALLOC_RECLAIM: kmalloc_cache_type = 1;
pub const kmalloc_cache_type_KMALLOC_DMA: kmalloc_cache_type = 2;
pub const kmalloc_cache_type_NR_KMALLOC_TYPES: kmalloc_cache_type = 3;
pub type kmalloc_cache_type = core::ffi::c_uint;
extern "C" {
    pub static mut kmalloc_caches: [[*mut kmem_cache; 14usize]; 3usize];
}
extern "C" {
    pub static mut random_kmalloc_seed: core::ffi::c_ulong;
}
extern "C" {
    pub fn __kmalloc_noprof(size: usize, flags: gfp_t) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kmem_cache_alloc_noprof(cachep: *mut kmem_cache, flags: gfp_t)
        -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kmem_cache_alloc_lru_noprof(
        s: *mut kmem_cache,
        lru: *mut list_lru,
        gfpflags: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kmem_cache_free(s: *mut kmem_cache, objp: *mut core::ffi::c_void);
}
extern "C" {
    pub fn kmem_cache_free_bulk(s: *mut kmem_cache, size: usize, p: *mut *mut core::ffi::c_void);
}
extern "C" {
    pub fn kmem_cache_alloc_bulk_noprof(
        s: *mut kmem_cache,
        flags: gfp_t,
        size: usize,
        p: *mut *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __kmalloc_node_noprof(
        size: usize,
        flags: gfp_t,
        node: core::ffi::c_int,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kmem_cache_alloc_node_noprof(
        s: *mut kmem_cache,
        flags: gfp_t,
        node: core::ffi::c_int,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kmalloc_trace_noprof(
        s: *mut kmem_cache,
        flags: gfp_t,
        size: usize,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kmalloc_node_trace_noprof(
        s: *mut kmem_cache,
        gfpflags: gfp_t,
        node: core::ffi::c_int,
        size: usize,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kmalloc_large_noprof(size: usize, flags: gfp_t) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kmalloc_large_node_noprof(
        size: usize,
        flags: gfp_t,
        node: core::ffi::c_int,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kmalloc_node_track_caller_noprof(
        size: usize,
        flags: gfp_t,
        node: core::ffi::c_int,
        caller: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kvmalloc_node_noprof(
        size: usize,
        flags: gfp_t,
        node: core::ffi::c_int,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kvrealloc_noprof(
        p: *const core::ffi::c_void,
        oldsize: usize,
        newsize: usize,
        flags: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kvfree(addr: *const core::ffi::c_void);
}
extern "C" {
    pub fn kvfree_sensitive(addr: *const core::ffi::c_void, len: usize);
}
extern "C" {
    pub fn kmem_cache_size(s: *mut kmem_cache) -> core::ffi::c_uint;
}
extern "C" {
    pub fn kmalloc_size_roundup(size: usize) -> usize;
}
extern "C" {
    pub fn kmem_cache_init_late();
}
extern "C" {
    pub static mut kunit_running: static_key_false;
}
pub const kunit_status_KUNIT_SUCCESS: kunit_status = 0;
pub const kunit_status_KUNIT_FAILURE: kunit_status = 1;
pub const kunit_status_KUNIT_SKIPPED: kunit_status = 2;
pub type kunit_status = core::ffi::c_uint;
pub const kunit_speed_KUNIT_SPEED_UNSET: kunit_speed = 0;
pub const kunit_speed_KUNIT_SPEED_VERY_SLOW: kunit_speed = 1;
pub const kunit_speed_KUNIT_SPEED_SLOW: kunit_speed = 2;
pub const kunit_speed_KUNIT_SPEED_NORMAL: kunit_speed = 3;
pub const kunit_speed_KUNIT_SPEED_MAX: kunit_speed = 3;
pub type kunit_speed = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kunit_attributes {
    pub speed: kunit_speed,
}
impl Default for kunit_attributes {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kunit_case {
    pub run_case: ::core::option::Option<unsafe extern "C" fn(test: *mut kunit)>,
    pub name: *const core::ffi::c_char,
    pub generate_params: ::core::option::Option<
        unsafe extern "C" fn(
            prev: *const core::ffi::c_void,
            desc: *mut core::ffi::c_char,
        ) -> *const core::ffi::c_void,
    >,
    pub attr: kunit_attributes,
    pub status: kunit_status,
    pub module_name: *mut core::ffi::c_char,
    pub log: *mut string_stream,
}
impl Default for kunit_case {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kunit_suite {
    pub name: [core::ffi::c_char; 256usize],
    pub suite_init:
        ::core::option::Option<unsafe extern "C" fn(suite: *mut kunit_suite) -> core::ffi::c_int>,
    pub suite_exit: ::core::option::Option<unsafe extern "C" fn(suite: *mut kunit_suite)>,
    pub init: ::core::option::Option<unsafe extern "C" fn(test: *mut kunit) -> core::ffi::c_int>,
    pub exit: ::core::option::Option<unsafe extern "C" fn(test: *mut kunit)>,
    pub test_cases: *mut kunit_case,
    pub attr: kunit_attributes,
    pub status_comment: [core::ffi::c_char; 256usize],
    pub debugfs: *mut dentry,
    pub log: *mut string_stream,
    pub suite_init_err: core::ffi::c_int,
    pub is_init: bool_,
}
impl Default for kunit_suite {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kunit_suite_set {
    pub start: *const *mut kunit_suite,
    pub end: *const *mut kunit_suite,
}
impl Default for kunit_suite_set {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kunit {
    pub priv_: *mut core::ffi::c_void,
    pub name: *const core::ffi::c_char,
    pub log: *mut string_stream,
    pub try_catch: kunit_try_catch,
    pub param_value: *const core::ffi::c_void,
    pub param_index: core::ffi::c_int,
    pub lock: spinlock_t,
    pub status: kunit_status,
    pub resources: list_head,
    pub status_comment: [core::ffi::c_char; 256usize],
    pub last_seen: kunit_loc,
}
impl Default for kunit {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn kunit_enabled() -> bool_;
}
extern "C" {
    pub fn kunit_action() -> *const core::ffi::c_char;
}
extern "C" {
    pub fn kunit_filter_glob() -> *const core::ffi::c_char;
}
extern "C" {
    pub fn kunit_filter() -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn kunit_filter_action() -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn kunit_init_test(
        test: *mut kunit,
        name: *const core::ffi::c_char,
        log: *mut string_stream,
    );
}
extern "C" {
    pub fn kunit_run_tests(suite: *mut kunit_suite) -> core::ffi::c_int;
}
extern "C" {
    pub fn kunit_suite_num_test_cases(suite: *mut kunit_suite) -> usize;
}
extern "C" {
    pub fn kunit_test_case_num(
        suite: *mut kunit_suite,
        test_case: *mut kunit_case,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn kunit_filter_suites(
        suite_set: *const kunit_suite_set,
        filter_glob: *const core::ffi::c_char,
        filters: *mut core::ffi::c_char,
        filter_action: *mut core::ffi::c_char,
        err: *mut core::ffi::c_int,
    ) -> kunit_suite_set;
}
extern "C" {
    pub fn kunit_free_suite_set(suite_set: kunit_suite_set);
}
extern "C" {
    pub fn __kunit_test_suites_init(
        suites: *const *mut kunit_suite,
        num_suites: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __kunit_test_suites_exit(suites: *mut *mut kunit_suite, num_suites: core::ffi::c_int);
}
extern "C" {
    pub fn kunit_exec_run_tests(suite_set: *mut kunit_suite_set, builtin: bool_);
}
extern "C" {
    pub fn kunit_exec_list_tests(suite_set: *mut kunit_suite_set, include_attr: bool_);
}
extern "C" {
    pub fn kunit_merge_suite_sets(
        init_suite_set: kunit_suite_set,
        suite_set: kunit_suite_set,
    ) -> kunit_suite_set;
}
extern "C" {
    pub fn kunit_suite_has_succeeded(suite: *mut kunit_suite) -> kunit_status;
}
extern "C" {
    pub fn kunit_kmalloc_array(
        test: *mut kunit,
        n: usize,
        size: usize,
        gfp: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kunit_kfree(test: *mut kunit, ptr: *const core::ffi::c_void);
}
extern "C" {
    pub fn kunit_cleanup(test: *mut kunit);
}
extern "C" {
    pub fn kunit_log_append(log: *mut string_stream, fmt: *const core::ffi::c_char, ...);
}
extern "C" {
    pub fn __kunit_abort(test: *mut kunit) -> !;
}
extern "C" {
    pub fn __kunit_do_failed_assertion(
        test: *mut kunit,
        loc: *const kunit_loc,
        type_: kunit_assert_type,
        assert: *const kunit_assert,
        assert_format: assert_format_t,
        fmt: *const core::ffi::c_char,
        ...
    );
}
pub type kunit_resource_init_t = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut kunit_resource,
        arg2: *mut core::ffi::c_void,
    ) -> core::ffi::c_int,
>;
pub type kunit_resource_free_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut kunit_resource)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kunit_resource {
    pub data: *mut core::ffi::c_void,
    pub name: *const core::ffi::c_char,
    pub free: kunit_resource_free_t,
    pub refcount: kref,
    pub node: list_head,
    pub should_kfree: bool_,
}
impl Default for kunit_resource {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __kunit_add_resource(
        test: *mut kunit,
        init: kunit_resource_init_t,
        free: kunit_resource_free_t,
        res: *mut kunit_resource,
        data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
pub type kunit_resource_match_t = ::core::option::Option<
    unsafe extern "C" fn(
        test: *mut kunit,
        res: *mut kunit_resource,
        match_data: *mut core::ffi::c_void,
    ) -> bool_,
>;
extern "C" {
    pub fn kunit_destroy_resource(
        test: *mut kunit,
        match_: kunit_resource_match_t,
        match_data: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kunit_remove_resource(test: *mut kunit, res: *mut kunit_resource);
}
pub type kunit_action_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut core::ffi::c_void)>;
extern "C" {
    pub fn kunit_add_action(
        test: *mut kunit,
        action: kunit_action_t,
        ctx: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kunit_add_action_or_reset(
        test: *mut kunit,
        action: kunit_action_t,
        ctx: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kunit_remove_action(
        test: *mut kunit,
        action: kunit_action_t,
        ctx: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn kunit_release_action(
        test: *mut kunit,
        action: kunit_action_t,
        ctx: *mut core::ffi::c_void,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wait_bit_key {
    pub flags: *mut core::ffi::c_void,
    pub bit_nr: core::ffi::c_int,
    pub timeout: core::ffi::c_ulong,
}
impl Default for wait_bit_key {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wait_bit_queue_entry {
    pub key: wait_bit_key,
    pub wq_entry: wait_queue_entry,
}
impl Default for wait_bit_queue_entry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type wait_bit_action_f = ::core::option::Option<
    unsafe extern "C" fn(key: *mut wait_bit_key, mode: core::ffi::c_int) -> core::ffi::c_int,
>;
extern "C" {
    pub fn __wake_up_bit(
        wq_head: *mut wait_queue_head,
        word: *mut core::ffi::c_void,
        bit: core::ffi::c_int,
    );
}
extern "C" {
    pub fn __wait_on_bit(
        wq_head: *mut wait_queue_head,
        wbq_entry: *mut wait_bit_queue_entry,
        action: wait_bit_action_f,
        mode: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __wait_on_bit_lock(
        wq_head: *mut wait_queue_head,
        wbq_entry: *mut wait_bit_queue_entry,
        action: wait_bit_action_f,
        mode: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn wake_up_bit(word: *mut core::ffi::c_void, bit: core::ffi::c_int);
}
extern "C" {
    pub fn out_of_line_wait_on_bit(
        word: *mut core::ffi::c_void,
        arg1: core::ffi::c_int,
        action: wait_bit_action_f,
        mode: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn out_of_line_wait_on_bit_timeout(
        word: *mut core::ffi::c_void,
        arg1: core::ffi::c_int,
        action: wait_bit_action_f,
        mode: core::ffi::c_uint,
        timeout: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn out_of_line_wait_on_bit_lock(
        word: *mut core::ffi::c_void,
        arg1: core::ffi::c_int,
        action: wait_bit_action_f,
        mode: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bit_waitqueue(
        word: *mut core::ffi::c_void,
        bit: core::ffi::c_int,
    ) -> *mut wait_queue_head;
}
extern "C" {
    pub fn wait_bit_init();
}
extern "C" {
    pub fn wake_bit_function(
        wq_entry: *mut wait_queue_entry,
        mode: core::ffi::c_uint,
        sync: core::ffi::c_int,
        key: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn bit_wait(key: *mut wait_bit_key, mode: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn bit_wait_io(key: *mut wait_bit_key, mode: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn bit_wait_timeout(key: *mut wait_bit_key, mode: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn bit_wait_io_timeout(key: *mut wait_bit_key, mode: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn init_wait_var_entry(
        wbq_entry: *mut wait_bit_queue_entry,
        var: *mut core::ffi::c_void,
        flags: core::ffi::c_int,
    );
}
extern "C" {
    pub fn wake_up_var(var: *mut core::ffi::c_void);
}
extern "C" {
    pub fn __var_waitqueue(p: *mut core::ffi::c_void) -> *mut wait_queue_head_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hlist_bl_head {
    pub first: *mut hlist_bl_node,
}
impl Default for hlist_bl_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hlist_bl_node {
    pub next: *mut hlist_bl_node,
    pub pprev: *mut *mut hlist_bl_node,
}
impl Default for hlist_bl_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lockref {
    pub __bindgen_anon_1: lockref__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lockref__bindgen_ty_1 {
    pub lock_count: __u64,
    pub __bindgen_anon_1: lockref__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct lockref__bindgen_ty_1__bindgen_ty_1 {
    pub lock: spinlock_t,
    pub count: core::ffi::c_int,
}
impl Default for lockref__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for lockref {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn lockref_get(arg1: *mut lockref);
}
extern "C" {
    pub fn lockref_put_return(arg1: *mut lockref) -> core::ffi::c_int;
}
extern "C" {
    pub fn lockref_get_not_zero(arg1: *mut lockref) -> core::ffi::c_int;
}
extern "C" {
    pub fn lockref_put_not_zero(arg1: *mut lockref) -> core::ffi::c_int;
}
extern "C" {
    pub fn lockref_put_or_lock(arg1: *mut lockref) -> core::ffi::c_int;
}
extern "C" {
    pub fn lockref_mark_dead(arg1: *mut lockref);
}
extern "C" {
    pub fn lockref_get_not_dead(arg1: *mut lockref) -> core::ffi::c_int;
}
extern "C" {
    pub fn full_name_hash(
        salt: *const core::ffi::c_void,
        arg1: *const core::ffi::c_char,
        arg2: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn hashlen_string(salt: *const core::ffi::c_void, name: *const core::ffi::c_char) -> u64_;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct qstr {
    pub __bindgen_anon_1: qstr__bindgen_ty_1,
    pub name: *const core::ffi::c_uchar,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union qstr__bindgen_ty_1 {
    pub __bindgen_anon_1: qstr__bindgen_ty_1__bindgen_ty_1,
    pub hash_len: u64_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct qstr__bindgen_ty_1__bindgen_ty_1 {
    pub hash: u32_,
    pub len: u32_,
}
impl Default for qstr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for qstr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static empty_name: qstr;
}
extern "C" {
    pub static slash_name: qstr;
}
extern "C" {
    pub static dotdot_name: qstr;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dentry {
    pub d_flags: core::ffi::c_uint,
    pub d_seq: seqcount_spinlock_t,
    pub d_hash: hlist_bl_node,
    pub d_parent: *mut dentry,
    pub d_name: qstr,
    pub d_inode: *mut inode,
    pub d_iname: [core::ffi::c_uchar; 40usize],
    pub d_lockref: lockref,
    pub d_op: *const dentry_operations,
    pub d_sb: *mut super_block,
    pub d_time: core::ffi::c_ulong,
    pub d_fsdata: *mut core::ffi::c_void,
    pub __bindgen_anon_1: dentry__bindgen_ty_1,
    pub d_sib: hlist_node,
    pub d_children: hlist_head,
    pub d_u: dentry__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dentry__bindgen_ty_1 {
    pub d_lru: list_head,
    pub d_wait: *mut wait_queue_head_t,
}
impl Default for dentry__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dentry__bindgen_ty_2 {
    pub d_alias: hlist_node,
    pub d_in_lookup_hash: hlist_bl_node,
    pub d_rcu: callback_head,
}
impl Default for dentry__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for dentry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const dentry_d_lock_class_DENTRY_D_LOCK_NORMAL: dentry_d_lock_class = 0;
pub const dentry_d_lock_class_DENTRY_D_LOCK_NESTED: dentry_d_lock_class = 1;
pub type dentry_d_lock_class = core::ffi::c_uint;
pub const d_real_type_D_REAL_DATA: d_real_type = 0;
pub const d_real_type_D_REAL_METADATA: d_real_type = 1;
pub type d_real_type = core::ffi::c_uint;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct dentry_operations {
    pub d_revalidate: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut dentry, arg2: core::ffi::c_uint) -> core::ffi::c_int,
    >,
    pub d_weak_revalidate: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut dentry, arg2: core::ffi::c_uint) -> core::ffi::c_int,
    >,
    pub d_hash: ::core::option::Option<
        unsafe extern "C" fn(arg1: *const dentry, arg2: *mut qstr) -> core::ffi::c_int,
    >,
    pub d_compare: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *const dentry,
            arg2: core::ffi::c_uint,
            arg3: *const core::ffi::c_char,
            arg4: *const qstr,
        ) -> core::ffi::c_int,
    >,
    pub d_delete:
        ::core::option::Option<unsafe extern "C" fn(arg1: *const dentry) -> core::ffi::c_int>,
    pub d_init: ::core::option::Option<unsafe extern "C" fn(arg1: *mut dentry) -> core::ffi::c_int>,
    pub d_release: ::core::option::Option<unsafe extern "C" fn(arg1: *mut dentry)>,
    pub d_prune: ::core::option::Option<unsafe extern "C" fn(arg1: *mut dentry)>,
    pub d_iput: ::core::option::Option<unsafe extern "C" fn(arg1: *mut dentry, arg2: *mut inode)>,
    pub d_dname: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut dentry,
            arg2: *mut core::ffi::c_char,
            arg3: core::ffi::c_int,
        ) -> *mut core::ffi::c_char,
    >,
    pub d_automount: ::core::option::Option<unsafe extern "C" fn(arg1: *mut path) -> *mut vfsmount>,
    pub d_manage: ::core::option::Option<
        unsafe extern "C" fn(arg1: *const path, arg2: bool_) -> core::ffi::c_int,
    >,
    pub d_real: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut dentry, type_: d_real_type) -> *mut dentry,
    >,
}
impl Default for dentry_operations {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut rename_lock: seqlock_t;
}
extern "C" {
    pub fn d_instantiate(arg1: *mut dentry, arg2: *mut inode);
}
extern "C" {
    pub fn d_instantiate_new(arg1: *mut dentry, arg2: *mut inode);
}
extern "C" {
    pub fn __d_drop(dentry: *mut dentry);
}
extern "C" {
    pub fn d_drop(dentry: *mut dentry);
}
extern "C" {
    pub fn d_delete(arg1: *mut dentry);
}
extern "C" {
    pub fn d_set_d_op(dentry: *mut dentry, op: *const dentry_operations);
}
extern "C" {
    pub fn d_alloc(arg1: *mut dentry, arg2: *const qstr) -> *mut dentry;
}
extern "C" {
    pub fn d_alloc_anon(arg1: *mut super_block) -> *mut dentry;
}
extern "C" {
    pub fn d_alloc_parallel(
        arg1: *mut dentry,
        arg2: *const qstr,
        arg3: *mut wait_queue_head_t,
    ) -> *mut dentry;
}
extern "C" {
    pub fn d_splice_alias(arg1: *mut inode, arg2: *mut dentry) -> *mut dentry;
}
extern "C" {
    pub fn d_add_ci(arg1: *mut dentry, arg2: *mut inode, arg3: *mut qstr) -> *mut dentry;
}
extern "C" {
    pub fn d_same_name(dentry: *const dentry, parent: *const dentry, name: *const qstr) -> bool_;
}
extern "C" {
    pub fn d_exact_alias(arg1: *mut dentry, arg2: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn d_find_any_alias(inode: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn d_obtain_alias(arg1: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn d_obtain_root(arg1: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn shrink_dcache_sb(arg1: *mut super_block);
}
extern "C" {
    pub fn shrink_dcache_parent(arg1: *mut dentry);
}
extern "C" {
    pub fn d_invalidate(arg1: *mut dentry);
}
extern "C" {
    pub fn d_make_root(arg1: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn d_mark_tmpfile(arg1: *mut file, arg2: *mut inode);
}
extern "C" {
    pub fn d_tmpfile(arg1: *mut file, arg2: *mut inode);
}
extern "C" {
    pub fn d_find_alias(arg1: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn d_prune_aliases(arg1: *mut inode);
}
extern "C" {
    pub fn d_find_alias_rcu(arg1: *mut inode) -> *mut dentry;
}
extern "C" {
    pub fn path_has_submounts(arg1: *const path) -> core::ffi::c_int;
}
extern "C" {
    pub fn d_rehash(arg1: *mut dentry);
}
extern "C" {
    pub fn d_add(arg1: *mut dentry, arg2: *mut inode);
}
extern "C" {
    pub fn d_move(arg1: *mut dentry, arg2: *mut dentry);
}
extern "C" {
    pub fn d_exchange(arg1: *mut dentry, arg2: *mut dentry);
}
extern "C" {
    pub fn d_ancestor(arg1: *mut dentry, arg2: *mut dentry) -> *mut dentry;
}
extern "C" {
    pub fn d_lookup(arg1: *const dentry, arg2: *const qstr) -> *mut dentry;
}
extern "C" {
    pub fn d_hash_and_lookup(arg1: *mut dentry, arg2: *mut qstr) -> *mut dentry;
}
extern "C" {
    pub fn dynamic_dname(
        arg1: *mut core::ffi::c_char,
        arg2: core::ffi::c_int,
        arg3: *const core::ffi::c_char,
        ...
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn __d_path(
        arg1: *const path,
        arg2: *const path,
        arg3: *mut core::ffi::c_char,
        arg4: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn d_absolute_path(
        arg1: *const path,
        arg2: *mut core::ffi::c_char,
        arg3: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn d_path(
        arg1: *const path,
        arg2: *mut core::ffi::c_char,
        arg3: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn dentry_path_raw(
        arg1: *const dentry,
        arg2: *mut core::ffi::c_char,
        arg3: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn dentry_path(
        arg1: *const dentry,
        arg2: *mut core::ffi::c_char,
        arg3: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn dget_parent(dentry: *mut dentry) -> *mut dentry;
}
extern "C" {
    pub fn __d_lookup_unhash_wake(dentry: *mut dentry);
}
extern "C" {
    pub fn dput(arg1: *mut dentry);
}
extern "C" {
    pub static mut sysctl_vfs_cache_pressure: core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct name_snapshot {
    pub name: qstr,
    pub inline_name: [core::ffi::c_uchar; 40usize],
}
impl Default for name_snapshot {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn take_dentry_name_snapshot(arg1: *mut name_snapshot, arg2: *mut dentry);
}
extern "C" {
    pub fn release_dentry_name_snapshot(arg1: *mut name_snapshot);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct path {
    pub mnt: *mut vfsmount,
    pub dentry: *mut dentry,
}
impl Default for path {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn path_get(arg1: *const path);
}
extern "C" {
    pub fn path_put(arg1: *const path);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct shrinker_info_unit {
    pub nr_deferred: [atomic_long_t; 64usize],
    pub map: [core::ffi::c_ulong; 1usize],
}
impl Default for shrinker_info_unit {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct shrinker_info {
    pub rcu: callback_head,
    pub map_nr_max: core::ffi::c_int,
    pub unit: __IncompleteArrayField<*mut shrinker_info_unit>,
}
impl Default for shrinker_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct shrink_control {
    pub gfp_mask: gfp_t,
    pub nid: core::ffi::c_int,
    pub nr_to_scan: core::ffi::c_ulong,
    pub nr_scanned: core::ffi::c_ulong,
    pub memcg: *mut mem_cgroup,
}
impl Default for shrink_control {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct shrinker {
    pub count_objects: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut shrinker, sc: *mut shrink_control) -> core::ffi::c_ulong,
    >,
    pub scan_objects: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut shrinker, sc: *mut shrink_control) -> core::ffi::c_ulong,
    >,
    pub batch: core::ffi::c_long,
    pub seeks: core::ffi::c_int,
    pub flags: core::ffi::c_uint,
    pub refcount: refcount_t,
    pub done: completion,
    pub rcu: callback_head,
    pub private_data: *mut core::ffi::c_void,
    pub list: list_head,
    pub nr_deferred: *mut atomic_long_t,
}
impl Default for shrinker {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn shrinker_alloc(
        flags: core::ffi::c_uint,
        fmt: *const core::ffi::c_char,
        ...
    ) -> *mut shrinker;
}
extern "C" {
    pub fn shrinker_register(shrinker: *mut shrinker);
}
extern "C" {
    pub fn shrinker_free(shrinker: *mut shrinker);
}
pub const lru_status_LRU_REMOVED: lru_status = 0;
pub const lru_status_LRU_REMOVED_RETRY: lru_status = 1;
pub const lru_status_LRU_ROTATE: lru_status = 2;
pub const lru_status_LRU_SKIP: lru_status = 3;
pub const lru_status_LRU_RETRY: lru_status = 4;
pub const lru_status_LRU_STOP: lru_status = 5;
pub type lru_status = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct list_lru_one {
    pub list: list_head,
    pub nr_items: core::ffi::c_long,
}
impl Default for list_lru_one {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct list_lru_memcg {
    pub rcu: callback_head,
    pub node: __IncompleteArrayField<list_lru_one>,
}
impl Default for list_lru_memcg {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct list_lru_node {
    pub lock: spinlock_t,
    pub lru: list_lru_one,
    pub nr_items: core::ffi::c_long,
}
impl Default for list_lru_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct list_lru {
    pub node: *mut list_lru_node,
}
impl Default for list_lru {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn list_lru_destroy(lru: *mut list_lru);
}
extern "C" {
    pub fn __list_lru_init(
        lru: *mut list_lru,
        memcg_aware: bool_,
        key: *mut lock_class_key,
        shrinker: *mut shrinker,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn memcg_list_lru_alloc(
        memcg: *mut mem_cgroup,
        lru: *mut list_lru,
        gfp: gfp_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn memcg_reparent_list_lrus(memcg: *mut mem_cgroup, parent: *mut mem_cgroup);
}
extern "C" {
    pub fn list_lru_add(
        lru: *mut list_lru,
        item: *mut list_head,
        nid: core::ffi::c_int,
        memcg: *mut mem_cgroup,
    ) -> bool_;
}
extern "C" {
    pub fn list_lru_add_obj(lru: *mut list_lru, item: *mut list_head) -> bool_;
}
extern "C" {
    pub fn list_lru_del(
        lru: *mut list_lru,
        item: *mut list_head,
        nid: core::ffi::c_int,
        memcg: *mut mem_cgroup,
    ) -> bool_;
}
extern "C" {
    pub fn list_lru_del_obj(lru: *mut list_lru, item: *mut list_head) -> bool_;
}
extern "C" {
    pub fn list_lru_count_one(
        lru: *mut list_lru,
        nid: core::ffi::c_int,
        memcg: *mut mem_cgroup,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn list_lru_count_node(lru: *mut list_lru, nid: core::ffi::c_int) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn list_lru_isolate(list: *mut list_lru_one, item: *mut list_head);
}
extern "C" {
    pub fn list_lru_isolate_move(
        list: *mut list_lru_one,
        item: *mut list_head,
        head: *mut list_head,
    );
}
pub type list_lru_walk_cb = ::core::option::Option<
    unsafe extern "C" fn(
        item: *mut list_head,
        list: *mut list_lru_one,
        lock: *mut spinlock_t,
        cb_arg: *mut core::ffi::c_void,
    ) -> lru_status,
>;
extern "C" {
    pub fn list_lru_walk_one(
        lru: *mut list_lru,
        nid: core::ffi::c_int,
        memcg: *mut mem_cgroup,
        isolate: list_lru_walk_cb,
        cb_arg: *mut core::ffi::c_void,
        nr_to_walk: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn list_lru_walk_one_irq(
        lru: *mut list_lru,
        nid: core::ffi::c_int,
        memcg: *mut mem_cgroup,
        isolate: list_lru_walk_cb,
        cb_arg: *mut core::ffi::c_void,
        nr_to_walk: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn list_lru_walk_node(
        lru: *mut list_lru,
        nid: core::ffi::c_int,
        isolate: list_lru_walk_cb,
        cb_arg: *mut core::ffi::c_void,
        nr_to_walk: *mut core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct upid {
    pub nr: core::ffi::c_int,
    pub ns: *mut pid_namespace,
}
impl Default for upid {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct pid {
    pub count: refcount_t,
    pub level: core::ffi::c_uint,
    pub lock: spinlock_t,
    pub stashed: *mut dentry,
    pub ino: u64_,
    pub tasks: [hlist_head; 4usize],
    pub inodes: hlist_head,
    pub wait_pidfd: wait_queue_head_t,
    pub rcu: callback_head,
    pub numbers: __IncompleteArrayField<upid>,
}
impl Default for pid {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut init_struct_pid: pid;
}
extern "C" {
    pub fn pidfd_pid(file: *const file) -> *mut pid;
}
extern "C" {
    pub fn pidfd_get_pid(fd: core::ffi::c_uint, flags: *mut core::ffi::c_uint) -> *mut pid;
}
extern "C" {
    pub fn pidfd_get_task(
        pidfd: core::ffi::c_int,
        flags: *mut core::ffi::c_uint,
    ) -> *mut task_struct;
}
extern "C" {
    pub fn pidfd_prepare(
        pid: *mut pid,
        flags: core::ffi::c_uint,
        ret: *mut *mut file,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_notify_pidfd(task: *mut task_struct);
}
extern "C" {
    pub fn put_pid(pid: *mut pid);
}
extern "C" {
    pub fn pid_task(pid: *mut pid, arg1: pid_type) -> *mut task_struct;
}
extern "C" {
    pub fn get_pid_task(pid: *mut pid, arg1: pid_type) -> *mut task_struct;
}
extern "C" {
    pub fn get_task_pid(task: *mut task_struct, type_: pid_type) -> *mut pid;
}
extern "C" {
    pub fn attach_pid(task: *mut task_struct, arg1: pid_type);
}
extern "C" {
    pub fn detach_pid(task: *mut task_struct, arg1: pid_type);
}
extern "C" {
    pub fn change_pid(task: *mut task_struct, arg1: pid_type, pid: *mut pid);
}
extern "C" {
    pub fn exchange_tids(task: *mut task_struct, old: *mut task_struct);
}
extern "C" {
    pub fn transfer_pid(old: *mut task_struct, new: *mut task_struct, arg1: pid_type);
}
extern "C" {
    pub static mut pid_max: core::ffi::c_int;
}
extern "C" {
    pub static mut pid_max_min: core::ffi::c_int;
}
extern "C" {
    pub static mut pid_max_max: core::ffi::c_int;
}
extern "C" {
    pub fn find_pid_ns(nr: core::ffi::c_int, ns: *mut pid_namespace) -> *mut pid;
}
extern "C" {
    pub fn find_vpid(nr: core::ffi::c_int) -> *mut pid;
}
extern "C" {
    pub fn find_get_pid(nr: core::ffi::c_int) -> *mut pid;
}
extern "C" {
    pub fn find_ge_pid(nr: core::ffi::c_int, arg1: *mut pid_namespace) -> *mut pid;
}
extern "C" {
    pub fn alloc_pid(ns: *mut pid_namespace, set_tid: *mut pid_t, set_tid_size: usize) -> *mut pid;
}
extern "C" {
    pub fn free_pid(pid: *mut pid);
}
extern "C" {
    pub fn disable_pid_allocation(ns: *mut pid_namespace);
}
extern "C" {
    pub fn pid_nr_ns(pid: *mut pid, ns: *mut pid_namespace) -> pid_t;
}
extern "C" {
    pub fn pid_vnr(pid: *mut pid) -> pid_t;
}
extern "C" {
    pub fn __task_pid_nr_ns(
        task: *mut task_struct,
        type_: pid_type,
        ns: *mut pid_namespace,
    ) -> pid_t;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __user_cap_header_struct {
    pub version: __u32,
    pub pid: core::ffi::c_int,
}
pub type cap_user_header_t = *mut __user_cap_header_struct;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __user_cap_data_struct {
    pub effective: __u32,
    pub permitted: __u32,
    pub inheritable: __u32,
}
pub type cap_user_data_t = *mut __user_cap_data_struct;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vfs_cap_data {
    pub magic_etc: __le32,
    pub data: [vfs_cap_data__bindgen_ty_1; 2usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vfs_cap_data__bindgen_ty_1 {
    pub permitted: __le32,
    pub inheritable: __le32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vfs_ns_cap_data {
    pub magic_etc: __le32,
    pub data: [vfs_ns_cap_data__bindgen_ty_1; 2usize],
    pub rootid: __le32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vfs_ns_cap_data__bindgen_ty_1 {
    pub permitted: __le32,
    pub inheritable: __le32,
}
extern "C" {
    pub static mut file_caps_enabled: core::ffi::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kernel_cap_t {
    pub val: u64_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cpu_vfs_cap_data {
    pub magic_etc: __u32,
    pub rootid: kuid_t,
    pub permitted: kernel_cap_t,
    pub inheritable: kernel_cap_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mnt_idmap {
    _unused: [u8; 0],
}
extern "C" {
    pub fn has_capability(t: *mut task_struct, cap: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn has_ns_capability(
        t: *mut task_struct,
        ns: *mut user_namespace,
        cap: core::ffi::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn has_capability_noaudit(t: *mut task_struct, cap: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn has_ns_capability_noaudit(
        t: *mut task_struct,
        ns: *mut user_namespace,
        cap: core::ffi::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn capable(cap: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn ns_capable(ns: *mut user_namespace, cap: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn ns_capable_noaudit(ns: *mut user_namespace, cap: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn ns_capable_setid(ns: *mut user_namespace, cap: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn privileged_wrt_inode_uidgid(
        ns: *mut user_namespace,
        idmap: *mut mnt_idmap,
        inode: *const inode,
    ) -> bool_;
}
extern "C" {
    pub fn capable_wrt_inode_uidgid(
        idmap: *mut mnt_idmap,
        inode: *const inode,
        cap: core::ffi::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn file_ns_capable(
        file: *const file,
        ns: *mut user_namespace,
        cap: core::ffi::c_int,
    ) -> bool_;
}
extern "C" {
    pub fn ptracer_capable(tsk: *mut task_struct, ns: *mut user_namespace) -> bool_;
}
extern "C" {
    pub fn get_vfs_caps_from_disk(
        idmap: *mut mnt_idmap,
        dentry: *const dentry,
        cpu_caps: *mut cpu_vfs_cap_data,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn cap_convert_nscap(
        idmap: *mut mnt_idmap,
        dentry: *mut dentry,
        ivalue: *mut *const core::ffi::c_void,
        size: usize,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct semaphore {
    pub lock: raw_spinlock_t,
    pub count: core::ffi::c_uint,
    pub wait_list: list_head,
}
impl Default for semaphore {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn down(sem: *mut semaphore);
}
extern "C" {
    pub fn down_interruptible(sem: *mut semaphore) -> core::ffi::c_int;
}
extern "C" {
    pub fn down_killable(sem: *mut semaphore) -> core::ffi::c_int;
}
extern "C" {
    pub fn down_trylock(sem: *mut semaphore) -> core::ffi::c_int;
}
extern "C" {
    pub fn down_timeout(sem: *mut semaphore, jiffies: core::ffi::c_long) -> core::ffi::c_int;
}
extern "C" {
    pub fn up(sem: *mut semaphore);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct f_owner_ex {
    pub type_: core::ffi::c_int,
    pub pid: __kernel_pid_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flock {
    pub l_type: core::ffi::c_short,
    pub l_whence: core::ffi::c_short,
    pub l_start: __kernel_off_t,
    pub l_len: __kernel_off_t,
    pub l_pid: __kernel_pid_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flock64 {
    pub l_type: core::ffi::c_short,
    pub l_whence: core::ffi::c_short,
    pub l_start: __kernel_loff_t,
    pub l_len: __kernel_loff_t,
    pub l_pid: __kernel_pid_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct open_how {
    pub flags: __u64,
    pub mode: __u64,
    pub resolve: __u64,
}
pub const migrate_mode_MIGRATE_ASYNC: migrate_mode = 0;
pub const migrate_mode_MIGRATE_SYNC_LIGHT: migrate_mode = 1;
pub const migrate_mode_MIGRATE_SYNC: migrate_mode = 2;
pub const migrate_mode_MIGRATE_SYNC_NO_COPY: migrate_mode = 3;
pub type migrate_mode = core::ffi::c_uint;
pub const migrate_reason_MR_COMPACTION: migrate_reason = 0;
pub const migrate_reason_MR_MEMORY_FAILURE: migrate_reason = 1;
pub const migrate_reason_MR_MEMORY_HOTPLUG: migrate_reason = 2;
pub const migrate_reason_MR_SYSCALL: migrate_reason = 3;
pub const migrate_reason_MR_MEMPOLICY_MBIND: migrate_reason = 4;
pub const migrate_reason_MR_NUMA_MISPLACED: migrate_reason = 5;
pub const migrate_reason_MR_CONTIG_RANGE: migrate_reason = 6;
pub const migrate_reason_MR_LONGTERM_PIN: migrate_reason = 7;
pub const migrate_reason_MR_DEMOTION: migrate_reason = 8;
pub const migrate_reason_MR_TYPES: migrate_reason = 9;
pub type migrate_reason = core::ffi::c_uint;
extern "C" {
    pub static mut print_fatal_signals: core::ffi::c_int;
}
extern "C" {
    pub fn copy_siginfo_to_user(
        to: *mut siginfo_t,
        from: *const kernel_siginfo_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn copy_siginfo_from_user(
        to: *mut kernel_siginfo_t,
        from: *const siginfo_t,
    ) -> core::ffi::c_int;
}
pub const siginfo_layout_SIL_KILL: siginfo_layout = 0;
pub const siginfo_layout_SIL_TIMER: siginfo_layout = 1;
pub const siginfo_layout_SIL_POLL: siginfo_layout = 2;
pub const siginfo_layout_SIL_FAULT: siginfo_layout = 3;
pub const siginfo_layout_SIL_FAULT_TRAPNO: siginfo_layout = 4;
pub const siginfo_layout_SIL_FAULT_MCEERR: siginfo_layout = 5;
pub const siginfo_layout_SIL_FAULT_BNDERR: siginfo_layout = 6;
pub const siginfo_layout_SIL_FAULT_PKUERR: siginfo_layout = 7;
pub const siginfo_layout_SIL_FAULT_PERF_EVENT: siginfo_layout = 8;
pub const siginfo_layout_SIL_CHLD: siginfo_layout = 9;
pub const siginfo_layout_SIL_RT: siginfo_layout = 10;
pub const siginfo_layout_SIL_SYS: siginfo_layout = 11;
pub type siginfo_layout = core::ffi::c_uint;
extern "C" {
    pub fn siginfo_layout(sig: core::ffi::c_uint, si_code: core::ffi::c_int) -> siginfo_layout;
}
extern "C" {
    pub fn flush_sigqueue(queue: *mut sigpending);
}
extern "C" {
    pub fn next_signal(pending: *mut sigpending, mask: *mut sigset_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_send_sig_info(
        sig: core::ffi::c_int,
        info: *mut kernel_siginfo,
        p: *mut task_struct,
        type_: pid_type,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn group_send_sig_info(
        sig: core::ffi::c_int,
        info: *mut kernel_siginfo,
        p: *mut task_struct,
        type_: pid_type,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn send_signal_locked(
        sig: core::ffi::c_int,
        info: *mut kernel_siginfo,
        p: *mut task_struct,
        type_: pid_type,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn sigprocmask(
        arg1: core::ffi::c_int,
        arg2: *mut sigset_t,
        arg3: *mut sigset_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_current_blocked(arg1: *mut sigset_t);
}
extern "C" {
    pub fn __set_current_blocked(arg1: *const sigset_t);
}
extern "C" {
    pub static mut show_unhandled_signals: core::ffi::c_int;
}
extern "C" {
    pub fn get_signal(ksig: *mut ksignal) -> bool_;
}
extern "C" {
    pub fn signal_setup_done(
        failed: core::ffi::c_int,
        ksig: *mut ksignal,
        stepping: core::ffi::c_int,
    );
}
extern "C" {
    pub fn exit_signals(tsk: *mut task_struct);
}
extern "C" {
    pub fn kernel_sigaction(arg1: core::ffi::c_int, arg2: __sighandler_t);
}
extern "C" {
    pub static mut sighand_cachep: *mut kmem_cache;
}
extern "C" {
    pub fn unhandled_signal(tsk: *mut task_struct, sig: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn signals_init();
}
extern "C" {
    pub fn restore_altstack(arg1: *const stack_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn __save_altstack(arg1: *mut stack_t, arg2: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn sigaltstack_size_valid(ss_size: usize) -> bool_;
}
extern "C" {
    pub fn render_sigset_t(
        arg1: *mut seq_file,
        arg2: *const core::ffi::c_char,
        arg3: *mut sigset_t,
    );
}
extern "C" {
    pub fn task_set_jobctl_pending(task: *mut task_struct, mask: core::ffi::c_ulong) -> bool_;
}
extern "C" {
    pub fn task_clear_jobctl_trapping(task: *mut task_struct);
}
extern "C" {
    pub fn task_clear_jobctl_pending(task: *mut task_struct, mask: core::ffi::c_ulong);
}
extern "C" {
    pub static mut __tracepoint_mmap_lock_start_locking: tracepoint;
}
extern "C" {
    pub static mut __tracepoint_mmap_lock_acquire_returned: tracepoint;
}
extern "C" {
    pub static mut __tracepoint_mmap_lock_released: tracepoint;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct exception_table_entry {
    pub insn: core::ffi::c_int,
    pub fixup: core::ffi::c_int,
    pub data: core::ffi::c_int,
}
extern "C" {
    pub fn fixup_exception(
        regs: *mut pt_regs,
        trapnr: core::ffi::c_int,
        error_code: core::ffi::c_ulong,
        fault_addr: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn fixup_bug(regs: *mut pt_regs, trapnr: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn ex_get_fixup_type(ip: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn early_fixup_exception(regs: *mut pt_regs, trapnr: core::ffi::c_int);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct interval_tree_node {
    pub rb: rb_node,
    pub start: core::ffi::c_ulong,
    pub last: core::ffi::c_ulong,
    pub __subtree_last: core::ffi::c_ulong,
}
impl Default for interval_tree_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn interval_tree_insert(node: *mut interval_tree_node, root: *mut rb_root_cached);
}
extern "C" {
    pub fn interval_tree_remove(node: *mut interval_tree_node, root: *mut rb_root_cached);
}
extern "C" {
    pub fn interval_tree_iter_first(
        root: *mut rb_root_cached,
        start: core::ffi::c_ulong,
        last: core::ffi::c_ulong,
    ) -> *mut interval_tree_node;
}
extern "C" {
    pub fn interval_tree_iter_next(
        node: *mut interval_tree_node,
        start: core::ffi::c_ulong,
        last: core::ffi::c_ulong,
    ) -> *mut interval_tree_node;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct interval_tree_span_iter {
    pub nodes: [*mut interval_tree_node; 2usize],
    pub first_index: core::ffi::c_ulong,
    pub last_index: core::ffi::c_ulong,
    pub __bindgen_anon_1: interval_tree_span_iter__bindgen_ty_1,
    pub __bindgen_anon_2: interval_tree_span_iter__bindgen_ty_2,
    pub is_hole: core::ffi::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union interval_tree_span_iter__bindgen_ty_1 {
    pub start_hole: core::ffi::c_ulong,
    pub start_used: core::ffi::c_ulong,
}
impl Default for interval_tree_span_iter__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union interval_tree_span_iter__bindgen_ty_2 {
    pub last_hole: core::ffi::c_ulong,
    pub last_used: core::ffi::c_ulong,
}
impl Default for interval_tree_span_iter__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for interval_tree_span_iter {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn interval_tree_span_iter_first(
        state: *mut interval_tree_span_iter,
        itree: *mut rb_root_cached,
        first_index: core::ffi::c_ulong,
        last_index: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn interval_tree_span_iter_advance(
        iter: *mut interval_tree_span_iter,
        itree: *mut rb_root_cached,
        new_index: core::ffi::c_ulong,
    );
}
extern "C" {
    pub fn interval_tree_span_iter_next(state: *mut interval_tree_span_iter);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmu_notifier_subscriptions {
    _unused: [u8; 0],
}
pub const mmu_notifier_event_MMU_NOTIFY_UNMAP: mmu_notifier_event = 0;
pub const mmu_notifier_event_MMU_NOTIFY_CLEAR: mmu_notifier_event = 1;
pub const mmu_notifier_event_MMU_NOTIFY_PROTECTION_VMA: mmu_notifier_event = 2;
pub const mmu_notifier_event_MMU_NOTIFY_PROTECTION_PAGE: mmu_notifier_event = 3;
pub const mmu_notifier_event_MMU_NOTIFY_SOFT_DIRTY: mmu_notifier_event = 4;
pub const mmu_notifier_event_MMU_NOTIFY_RELEASE: mmu_notifier_event = 5;
pub const mmu_notifier_event_MMU_NOTIFY_MIGRATE: mmu_notifier_event = 6;
pub const mmu_notifier_event_MMU_NOTIFY_EXCLUSIVE: mmu_notifier_event = 7;
pub type mmu_notifier_event = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mmu_notifier_ops {
    pub release: ::core::option::Option<
        unsafe extern "C" fn(subscription: *mut mmu_notifier, mm: *mut mm_struct),
    >,
    pub clear_flush_young: ::core::option::Option<
        unsafe extern "C" fn(
            subscription: *mut mmu_notifier,
            mm: *mut mm_struct,
            start: core::ffi::c_ulong,
            end: core::ffi::c_ulong,
        ) -> core::ffi::c_int,
    >,
    pub clear_young: ::core::option::Option<
        unsafe extern "C" fn(
            subscription: *mut mmu_notifier,
            mm: *mut mm_struct,
            start: core::ffi::c_ulong,
            end: core::ffi::c_ulong,
        ) -> core::ffi::c_int,
    >,
    pub test_young: ::core::option::Option<
        unsafe extern "C" fn(
            subscription: *mut mmu_notifier,
            mm: *mut mm_struct,
            address: core::ffi::c_ulong,
        ) -> core::ffi::c_int,
    >,
    pub invalidate_range_start: ::core::option::Option<
        unsafe extern "C" fn(
            subscription: *mut mmu_notifier,
            range: *const mmu_notifier_range,
        ) -> core::ffi::c_int,
    >,
    pub invalidate_range_end: ::core::option::Option<
        unsafe extern "C" fn(subscription: *mut mmu_notifier, range: *const mmu_notifier_range),
    >,
    pub arch_invalidate_secondary_tlbs: ::core::option::Option<
        unsafe extern "C" fn(
            subscription: *mut mmu_notifier,
            mm: *mut mm_struct,
            start: core::ffi::c_ulong,
            end: core::ffi::c_ulong,
        ),
    >,
    pub alloc_notifier:
        ::core::option::Option<unsafe extern "C" fn(mm: *mut mm_struct) -> *mut mmu_notifier>,
    pub free_notifier:
        ::core::option::Option<unsafe extern "C" fn(subscription: *mut mmu_notifier)>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmu_notifier {
    pub hlist: hlist_node,
    pub ops: *const mmu_notifier_ops,
    pub mm: *mut mm_struct,
    pub rcu: callback_head,
    pub users: core::ffi::c_uint,
}
impl Default for mmu_notifier {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mmu_interval_notifier_ops {
    pub invalidate: ::core::option::Option<
        unsafe extern "C" fn(
            interval_sub: *mut mmu_interval_notifier,
            range: *const mmu_notifier_range,
            cur_seq: core::ffi::c_ulong,
        ) -> bool_,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmu_interval_notifier {
    pub interval_tree: interval_tree_node,
    pub ops: *const mmu_interval_notifier_ops,
    pub mm: *mut mm_struct,
    pub deferred_item: hlist_node,
    pub invalidate_seq: core::ffi::c_ulong,
}
impl Default for mmu_interval_notifier {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mmu_notifier_range {
    pub start: core::ffi::c_ulong,
    pub end: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ghcb {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mpc_bus {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mpc_cpu {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mpc_table {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct irq_domain {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_mpparse {
    pub setup_ioapic_ids: ::core::option::Option<unsafe extern "C" fn()>,
    pub find_mptable: ::core::option::Option<unsafe extern "C" fn()>,
    pub early_parse_smp_cfg: ::core::option::Option<unsafe extern "C" fn()>,
    pub parse_smp_cfg: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_resources {
    pub probe_roms: ::core::option::Option<unsafe extern "C" fn()>,
    pub reserve_resources: ::core::option::Option<unsafe extern "C" fn()>,
    pub memory_setup: ::core::option::Option<unsafe extern "C" fn() -> *mut core::ffi::c_char>,
    pub dmi_setup: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_irqs {
    pub pre_vector_init: ::core::option::Option<unsafe extern "C" fn()>,
    pub intr_init: ::core::option::Option<unsafe extern "C" fn()>,
    pub intr_mode_select: ::core::option::Option<unsafe extern "C" fn()>,
    pub intr_mode_init: ::core::option::Option<unsafe extern "C" fn()>,
    pub create_pci_msi_domain: ::core::option::Option<unsafe extern "C" fn() -> *mut irq_domain>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_oem {
    pub arch_setup: ::core::option::Option<unsafe extern "C" fn()>,
    pub banner: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_paging {
    pub pagetable_init: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_timers {
    pub setup_percpu_clockev: ::core::option::Option<unsafe extern "C" fn()>,
    pub timer_init: ::core::option::Option<unsafe extern "C" fn()>,
    pub wallclock_init: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_iommu {
    pub iommu_init: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_pci {
    pub arch_init: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
    pub init: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
    pub init_irq: ::core::option::Option<unsafe extern "C" fn()>,
    pub fixup_irqs: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_hyper_init {
    pub init_platform: ::core::option::Option<unsafe extern "C" fn()>,
    pub guest_late_init: ::core::option::Option<unsafe extern "C" fn()>,
    pub x2apic_available: ::core::option::Option<unsafe extern "C" fn() -> bool_>,
    pub msi_ext_dest_id: ::core::option::Option<unsafe extern "C" fn() -> bool_>,
    pub init_mem_mapping: ::core::option::Option<unsafe extern "C" fn()>,
    pub init_after_bootmem: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_acpi {
    pub set_root_pointer: ::core::option::Option<unsafe extern "C" fn(addr: u64_)>,
    pub get_root_pointer: ::core::option::Option<unsafe extern "C" fn() -> u64_>,
    pub reduced_hw_early_init: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_guest {
    pub enc_status_change_prepare: ::core::option::Option<
        unsafe extern "C" fn(
            vaddr: core::ffi::c_ulong,
            npages: core::ffi::c_int,
            enc: bool_,
        ) -> bool_,
    >,
    pub enc_status_change_finish: ::core::option::Option<
        unsafe extern "C" fn(
            vaddr: core::ffi::c_ulong,
            npages: core::ffi::c_int,
            enc: bool_,
        ) -> bool_,
    >,
    pub enc_tlb_flush_required: ::core::option::Option<unsafe extern "C" fn(enc: bool_) -> bool_>,
    pub enc_cache_flush_required: ::core::option::Option<unsafe extern "C" fn() -> bool_>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_init_ops {
    pub resources: x86_init_resources,
    pub mpparse: x86_init_mpparse,
    pub irqs: x86_init_irqs,
    pub oem: x86_init_oem,
    pub paging: x86_init_paging,
    pub timers: x86_init_timers,
    pub iommu: x86_init_iommu,
    pub pci: x86_init_pci,
    pub hyper: x86_hyper_init,
    pub acpi: x86_init_acpi,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_cpuinit_ops {
    pub setup_percpu_clockev: ::core::option::Option<unsafe extern "C" fn()>,
    pub early_percpu_clock_init: ::core::option::Option<unsafe extern "C" fn()>,
    pub fixup_cpu_id:
        ::core::option::Option<unsafe extern "C" fn(c: *mut cpuinfo_x86, node: core::ffi::c_int)>,
    pub parallel_bringup: bool_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_legacy_devices {
    pub pnpbios: core::ffi::c_int,
}
pub const x86_legacy_i8042_state_X86_LEGACY_I8042_PLATFORM_ABSENT: x86_legacy_i8042_state = 0;
pub const x86_legacy_i8042_state_X86_LEGACY_I8042_FIRMWARE_ABSENT: x86_legacy_i8042_state = 1;
pub const x86_legacy_i8042_state_X86_LEGACY_I8042_EXPECTED_PRESENT: x86_legacy_i8042_state = 2;
pub type x86_legacy_i8042_state = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_legacy_features {
    pub i8042: x86_legacy_i8042_state,
    pub rtc: core::ffi::c_int,
    pub warm_reset: core::ffi::c_int,
    pub no_vga: core::ffi::c_int,
    pub reserve_bios_regions: core::ffi::c_int,
    pub devices: x86_legacy_devices,
}
impl Default for x86_legacy_features {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_hyper_runtime {
    pub pin_vcpu: ::core::option::Option<unsafe extern "C" fn(cpu: core::ffi::c_int)>,
    pub sev_es_hcall_prepare:
        ::core::option::Option<unsafe extern "C" fn(ghcb: *mut ghcb, regs: *mut pt_regs)>,
    pub sev_es_hcall_finish:
        ::core::option::Option<unsafe extern "C" fn(ghcb: *mut ghcb, regs: *mut pt_regs) -> bool_>,
    pub is_private_mmio: ::core::option::Option<unsafe extern "C" fn(addr: u64_) -> bool_>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_platform_ops {
    pub calibrate_cpu: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_ulong>,
    pub calibrate_tsc: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_ulong>,
    pub get_wallclock: ::core::option::Option<unsafe extern "C" fn(ts: *mut timespec64)>,
    pub set_wallclock:
        ::core::option::Option<unsafe extern "C" fn(ts: *const timespec64) -> core::ffi::c_int>,
    pub iommu_shutdown: ::core::option::Option<unsafe extern "C" fn()>,
    pub is_untracked_pat_range:
        ::core::option::Option<unsafe extern "C" fn(start: u64_, end: u64_) -> bool_>,
    pub nmi_init: ::core::option::Option<unsafe extern "C" fn()>,
    pub get_nmi_reason: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_uchar>,
    pub save_sched_clock_state: ::core::option::Option<unsafe extern "C" fn()>,
    pub restore_sched_clock_state: ::core::option::Option<unsafe extern "C" fn()>,
    pub apic_post_init: ::core::option::Option<unsafe extern "C" fn()>,
    pub legacy: x86_legacy_features,
    pub set_legacy_features: ::core::option::Option<unsafe extern "C" fn()>,
    pub realmode_reserve: ::core::option::Option<unsafe extern "C" fn()>,
    pub realmode_init: ::core::option::Option<unsafe extern "C" fn()>,
    pub hyper: x86_hyper_runtime,
    pub guest: x86_guest,
}
impl Default for x86_platform_ops {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct x86_apic_ops {
    pub io_apic_read: ::core::option::Option<
        unsafe extern "C" fn(apic: core::ffi::c_uint, reg: core::ffi::c_uint) -> core::ffi::c_uint,
    >,
    pub restore: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub static mut x86_init: x86_init_ops;
}
extern "C" {
    pub static mut x86_cpuinit: x86_cpuinit_ops;
}
extern "C" {
    pub static mut x86_platform: x86_platform_ops;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_msi_ops {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut x86_msi: x86_msi_ops;
}
extern "C" {
    pub static mut x86_apic_ops: x86_apic_ops;
}
extern "C" {
    pub fn x86_early_init_platform_quirks();
}
extern "C" {
    pub fn x86_init_noop();
}
extern "C" {
    pub fn x86_init_uint_noop(unused: core::ffi::c_uint);
}
extern "C" {
    pub fn bool_x86_init_noop() -> bool_;
}
extern "C" {
    pub fn x86_op_int_noop(cpu: core::ffi::c_int);
}
extern "C" {
    pub fn x86_pnpbios_disabled() -> bool_;
}
extern "C" {
    pub fn set_rtc_noop(now: *const timespec64) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_rtc_noop(now: *mut timespec64);
}
extern "C" {
    pub static mut init_pkru_value: u32_;
}
extern "C" {
    pub fn kernel_fpu_begin_mask(kfpu_mask: core::ffi::c_uint);
}
extern "C" {
    pub fn kernel_fpu_end();
}
extern "C" {
    pub fn irq_fpu_usable() -> bool_;
}
extern "C" {
    pub fn fpregs_mark_activate();
}
extern "C" {
    pub fn fpregs_lock_and_load();
}
extern "C" {
    pub fn fpregs_assert_state_consistent();
}
extern "C" {
    pub fn switch_fpu_return();
}
extern "C" {
    pub fn cpu_has_xfeatures(
        xfeatures_mask: u64_,
        feature_name: *mut *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn fpu__exception_code(fpu: *mut fpu, trap_nr: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn fpu_sync_fpstate(fpu: *mut fpu);
}
extern "C" {
    pub fn fpu_reset_from_exception_fixup();
}
extern "C" {
    pub fn fpu__init_cpu();
}
extern "C" {
    pub fn fpu__init_system();
}
extern "C" {
    pub fn fpu__init_check_bugs();
}
extern "C" {
    pub fn fpu__resume_cpu();
}
extern "C" {
    pub static mut fpu_fpregs_owner_ctx: *mut fpu;
}
extern "C" {
    pub fn fpstate_free(fpu: *mut fpu);
}
extern "C" {
    pub fn fpstate_clear_xstate_component(fps: *mut fpstate, xfeature: core::ffi::c_uint);
}
extern "C" {
    pub fn xstate_get_guest_group_perm() -> u64_;
}
extern "C" {
    pub fn get_xsave_addr(
        xsave: *mut xregs_state,
        xfeature_nr: core::ffi::c_int,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn fpu_alloc_guest_fpstate(gfpu: *mut fpu_guest) -> bool_;
}
extern "C" {
    pub fn fpu_free_guest_fpstate(gfpu: *mut fpu_guest);
}
extern "C" {
    pub fn fpu_swap_kvm_fpstate(gfpu: *mut fpu_guest, enter_guest: bool_) -> core::ffi::c_int;
}
extern "C" {
    pub fn fpu_enable_guest_xfd_features(
        guest_fpu: *mut fpu_guest,
        xfeatures: u64_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn fpu_update_guest_xfd(guest_fpu: *mut fpu_guest, xfd: u64_);
}
extern "C" {
    pub fn fpu_sync_guest_vmexit_xfd_state();
}
extern "C" {
    pub fn fpu_copy_guest_fpstate_to_uabi(
        gfpu: *mut fpu_guest,
        buf: *mut core::ffi::c_void,
        size: core::ffi::c_uint,
        xfeatures: u64_,
        pkru: u32_,
    );
}
extern "C" {
    pub fn fpu_copy_uabi_to_guest_fpstate(
        gfpu: *mut fpu_guest,
        buf: *const core::ffi::c_void,
        xcr0: u64_,
        vpkru: *mut u32_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn fpu_xstate_prctl(
        option: core::ffi::c_int,
        arg2: core::ffi::c_ulong,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn fpu_idle_fpregs();
}
pub const cc_vendor_CC_VENDOR_NONE: cc_vendor = 0;
pub const cc_vendor_CC_VENDOR_AMD: cc_vendor = 1;
pub const cc_vendor_CC_VENDOR_INTEL: cc_vendor = 2;
pub type cc_vendor = core::ffi::c_uint;
pub const cc_mask: u64_ = 0;
extern "C" {
    pub static mut early_top_pgt: [pgd_t; 512usize];
}
extern "C" {
    pub fn __early_make_pgtable(address: core::ffi::c_ulong, pmd: pmdval_t) -> bool_;
}
extern "C" {
    pub fn ptdump_walk_pgd_level(m: *mut seq_file, mm: *mut mm_struct);
}
extern "C" {
    pub fn ptdump_walk_pgd_level_debugfs(m: *mut seq_file, mm: *mut mm_struct, user: bool_);
}
extern "C" {
    pub fn ptdump_walk_pgd_level_checkwx() -> bool_;
}
extern "C" {
    pub fn ptdump_walk_user_pgd_level_checkwx();
}
extern "C" {
    pub static mut empty_zero_page: [core::ffi::c_ulong; 512usize];
}
extern "C" {
    pub static mut pgd_lock: spinlock_t;
}
extern "C" {
    pub static mut pgd_list: list_head;
}
extern "C" {
    pub fn pgd_page_get_mm(page: *mut page) -> *mut mm_struct;
}
extern "C" {
    pub static mut early_pmd_flags: pmdval_t;
}
extern "C" {
    pub fn pte_mkwrite(pte: pte_t, vma: *mut vm_area_struct) -> pte_t;
}
extern "C" {
    pub fn pmd_mkwrite(pmd: pmd_t, vma: *mut vm_area_struct) -> pmd_t;
}
extern "C" {
    pub fn populate_extra_pmd(vaddr: core::ffi::c_ulong) -> *mut pmd_t;
}
extern "C" {
    pub fn populate_extra_pte(vaddr: core::ffi::c_ulong) -> *mut pte_t;
}
pub const vsyscall_num___NR_vgettimeofday: vsyscall_num = 0;
pub const vsyscall_num___NR_vtime: vsyscall_num = 1;
pub const vsyscall_num___NR_vgetcpu: vsyscall_num = 2;
pub type vsyscall_num = core::ffi::c_uint;
pub const fixed_addresses_VSYSCALL_PAGE: fixed_addresses = 511;
pub const fixed_addresses_FIX_DBGP_BASE: fixed_addresses = 512;
pub const fixed_addresses_FIX_EARLYCON_MEM_BASE: fixed_addresses = 513;
pub const fixed_addresses_FIX_APIC_BASE: fixed_addresses = 514;
pub const fixed_addresses_FIX_IO_APIC_BASE_0: fixed_addresses = 515;
pub const fixed_addresses_FIX_IO_APIC_BASE_END: fixed_addresses = 642;
pub const fixed_addresses___end_of_permanent_fixed_addresses: fixed_addresses = 643;
pub const fixed_addresses_FIX_BTMAP_END: fixed_addresses = 1024;
pub const fixed_addresses_FIX_BTMAP_BEGIN: fixed_addresses = 1535;
pub const fixed_addresses___end_of_fixed_addresses: fixed_addresses = 1536;
pub type fixed_addresses = core::ffi::c_uint;
extern "C" {
    pub fn reserve_top_address(reserve: core::ffi::c_ulong);
}
extern "C" {
    pub static mut fixmaps_set: core::ffi::c_int;
}
extern "C" {
    pub static mut pkmap_page_table: *mut pte_t;
}
extern "C" {
    pub fn __native_set_fixmap(idx: fixed_addresses, pte: pte_t);
}
extern "C" {
    pub fn native_set_fixmap(idx: core::ffi::c_uint, phys: phys_addr_t, flags: pgprot_t);
}
extern "C" {
    pub fn early_memremap_encrypted(
        phys_addr: resource_size_t,
        size: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn early_memremap_encrypted_wp(
        phys_addr: resource_size_t,
        size: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn early_memremap_decrypted(
        phys_addr: resource_size_t,
        size: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn early_memremap_decrypted_wp(
        phys_addr: resource_size_t,
        size: core::ffi::c_ulong,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn __early_set_fixmap(idx: fixed_addresses, phys: phys_addr_t, flags: pgprot_t);
}
extern "C" {
    pub static mut level4_kernel_pgt: [p4d_t; 512usize];
}
extern "C" {
    pub static mut level4_ident_pgt: [p4d_t; 512usize];
}
extern "C" {
    pub static mut level3_kernel_pgt: [pud_t; 512usize];
}
extern "C" {
    pub static mut level3_ident_pgt: [pud_t; 512usize];
}
extern "C" {
    pub static mut level2_kernel_pgt: [pmd_t; 512usize];
}
extern "C" {
    pub static mut level2_fixmap_pgt: [pmd_t; 512usize];
}
extern "C" {
    pub static mut level2_ident_pgt: [pmd_t; 512usize];
}
extern "C" {
    pub static mut level1_fixmap_pgt: [pte_t; 1024usize];
}
extern "C" {
    pub static mut init_top_pgt: [pgd_t; 0usize];
}
extern "C" {
    pub fn paging_init();
}
extern "C" {
    pub fn set_pte_vaddr_p4d(p4d_page: *mut p4d_t, vaddr: core::ffi::c_ulong, new_pte: pte_t);
}
extern "C" {
    pub fn set_pte_vaddr_pud(pud_page: *mut pud_t, vaddr: core::ffi::c_ulong, new_pte: pte_t);
}
extern "C" {
    pub fn cleanup_highmap();
}
extern "C" {
    pub fn init_extra_mapping_uc(phys: core::ffi::c_ulong, size: core::ffi::c_ulong);
}
extern "C" {
    pub fn init_extra_mapping_wb(phys: core::ffi::c_ulong, size: core::ffi::c_ulong);
}
extern "C" {
    pub static mut direct_gbpages: core::ffi::c_int;
}
extern "C" {
    pub fn init_mem_mapping();
}
extern "C" {
    pub fn early_alloc_pgt_buf();
}
extern "C" {
    pub fn init_memory_mapping(
        start: core::ffi::c_ulong,
        end: core::ffi::c_ulong,
        prot: pgprot_t,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub static mut trampoline_pgd_entry: pgd_t;
}
extern "C" {
    pub fn ptep_set_access_flags(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        ptep: *mut pte_t,
        entry: pte_t,
        dirty: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn ptep_test_and_clear_young(
        vma: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        ptep: *mut pte_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn ptep_clear_flush_young(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        ptep: *mut pte_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn pmdp_set_access_flags(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        pmdp: *mut pmd_t,
        entry: pmd_t,
        dirty: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn pudp_set_access_flags(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        pudp: *mut pud_t,
        entry: pud_t,
        dirty: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn pmdp_test_and_clear_young(
        vma: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        pmdp: *mut pmd_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn pudp_test_and_clear_young(
        vma: *mut vm_area_struct,
        addr: core::ffi::c_ulong,
        pudp: *mut pud_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn pmdp_clear_flush_young(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        pmdp: *mut pmd_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn pmdp_invalidate_ad(
        vma: *mut vm_area_struct,
        address: core::ffi::c_ulong,
        pmdp: *mut pmd_t,
    ) -> pmd_t;
}
extern "C" {
    pub fn pfn_modify_allowed(pfn: core::ffi::c_ulong, prot: pgprot_t) -> bool_;
}
extern "C" {
    pub fn arch_check_zapped_pte(vma: *mut vm_area_struct, pte: pte_t);
}
extern "C" {
    pub fn arch_check_zapped_pmd(vma: *mut vm_area_struct, pmd: pmd_t);
}
extern "C" {
    pub static mut tlbstate_untag_mask: core::ffi::c_ulonglong;
}
extern "C" {
    pub fn __flush_tlb_all();
}
extern "C" {
    pub fn cr4_update_irqsoff(set: core::ffi::c_ulong, clear: core::ffi::c_ulong);
}
extern "C" {
    pub fn cr4_read_shadow() -> core::ffi::c_ulong;
}
extern "C" {
    pub fn rep_movs_alternative(
        to: *mut core::ffi::c_void,
        from: *const core::ffi::c_void,
        len: core::ffi::c_uint,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __copy_user_nocache(
        dst: *mut core::ffi::c_void,
        src: *const core::ffi::c_void,
        size: core::ffi::c_uint,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn __copy_user_flushcache(
        dst: *mut core::ffi::c_void,
        src: *const core::ffi::c_void,
        size: core::ffi::c_uint,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn rep_stos_alternative(
        addr: *mut core::ffi::c_void,
        len: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __get_user_1() -> core::ffi::c_int;
}
extern "C" {
    pub fn __get_user_2() -> core::ffi::c_int;
}
extern "C" {
    pub fn __get_user_4() -> core::ffi::c_int;
}
extern "C" {
    pub fn __get_user_8() -> core::ffi::c_int;
}
extern "C" {
    pub fn __get_user_nocheck_1() -> core::ffi::c_int;
}
extern "C" {
    pub fn __get_user_nocheck_2() -> core::ffi::c_int;
}
extern "C" {
    pub fn __get_user_nocheck_4() -> core::ffi::c_int;
}
extern "C" {
    pub fn __get_user_nocheck_8() -> core::ffi::c_int;
}
extern "C" {
    pub fn __get_user_bad() -> core::ffi::c_int;
}
extern "C" {
    pub fn __put_user_bad();
}
extern "C" {
    pub fn __put_user_1();
}
extern "C" {
    pub fn __put_user_2();
}
extern "C" {
    pub fn __put_user_4();
}
extern "C" {
    pub fn __put_user_8();
}
extern "C" {
    pub fn __put_user_nocheck_1();
}
extern "C" {
    pub fn __put_user_nocheck_2();
}
extern "C" {
    pub fn __put_user_nocheck_4();
}
extern "C" {
    pub fn __put_user_nocheck_8();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __large_struct {
    pub buf: [core::ffi::c_ulong; 100usize],
}
impl Default for __large_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn copy_from_user_nmi(
        to: *mut core::ffi::c_void,
        from: *const core::ffi::c_void,
        n: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn strncpy_from_user(
        dst: *mut core::ffi::c_char,
        src: *const core::ffi::c_char,
        count: core::ffi::c_long,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn strnlen_user(str_: *const core::ffi::c_char, n: core::ffi::c_long) -> core::ffi::c_long;
}
extern "C" {
    pub fn copy_mc_to_kernel(
        to: *mut core::ffi::c_void,
        from: *const core::ffi::c_void,
        len: core::ffi::c_uint,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn copy_mc_to_user(
        to: *mut core::ffi::c_void,
        from: *const core::ffi::c_void,
        len: core::ffi::c_uint,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn __try_cmpxchg_user_wrong_size();
}
extern "C" {
    pub fn _copy_from_user(
        arg1: *mut core::ffi::c_void,
        arg2: *const core::ffi::c_void,
        arg3: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _copy_to_user(
        arg1: *mut core::ffi::c_void,
        arg2: *const core::ffi::c_void,
        arg3: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn check_zeroed_user(from: *const core::ffi::c_void, size: usize) -> core::ffi::c_int;
}
extern "C" {
    pub fn copy_from_kernel_nofault_allowed(
        unsafe_src: *const core::ffi::c_void,
        size: usize,
    ) -> bool_;
}
extern "C" {
    pub fn copy_to_kernel_nofault(
        dst: *mut core::ffi::c_void,
        src: *const core::ffi::c_void,
        size: usize,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn copy_from_user_nofault(
        dst: *mut core::ffi::c_void,
        src: *const core::ffi::c_void,
        size: usize,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn copy_to_user_nofault(
        dst: *mut core::ffi::c_void,
        src: *const core::ffi::c_void,
        size: usize,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn strncpy_from_kernel_nofault(
        dst: *mut core::ffi::c_char,
        unsafe_addr: *const core::ffi::c_void,
        count: core::ffi::c_long,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn strncpy_from_user_nofault(
        dst: *mut core::ffi::c_char,
        unsafe_addr: *const core::ffi::c_void,
        count: core::ffi::c_long,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn strnlen_user_nofault(
        unsafe_addr: *const core::ffi::c_void,
        count: core::ffi::c_long,
    ) -> core::ffi::c_long;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct css_set {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernel_clone_args {
    pub flags: u64_,
    pub pidfd: *mut core::ffi::c_int,
    pub child_tid: *mut core::ffi::c_int,
    pub parent_tid: *mut core::ffi::c_int,
    pub name: *const core::ffi::c_char,
    pub exit_signal: core::ffi::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub stack: core::ffi::c_ulong,
    pub stack_size: core::ffi::c_ulong,
    pub tls: core::ffi::c_ulong,
    pub set_tid: *mut pid_t,
    pub set_tid_size: usize,
    pub cgroup: core::ffi::c_int,
    pub idle: core::ffi::c_int,
    pub fn_: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut core::ffi::c_void) -> core::ffi::c_int,
    >,
    pub fn_arg: *mut core::ffi::c_void,
    pub cgrp: *mut cgroup,
    pub cset: *mut css_set,
}
impl Default for kernel_clone_args {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl kernel_clone_args {
    #[inline]
    pub fn kthread(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_kthread(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn io_thread(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_io_thread(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn user_worker(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_user_worker(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_files(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_files(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        kthread: u32_,
        io_thread: u32_,
        user_worker: u32_,
        no_files: u32_,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let kthread: u32 = unsafe { ::core::mem::transmute(kthread) };
            kthread as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let io_thread: u32 = unsafe { ::core::mem::transmute(io_thread) };
            io_thread as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let user_worker: u32 = unsafe { ::core::mem::transmute(user_worker) };
            user_worker as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let no_files: u32 = unsafe { ::core::mem::transmute(no_files) };
            no_files as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut tasklist_lock: rwlock_t;
}
extern "C" {
    pub static mut mmlist_lock: spinlock_t;
}
extern "C" {
    pub static mut init_thread_union: thread_union;
}
extern "C" {
    pub static mut init_task: task_struct;
}
extern "C" {
    pub fn lockdep_tasklist_lock_is_held() -> core::ffi::c_int;
}
extern "C" {
    pub fn schedule_tail(prev: *mut task_struct);
}
extern "C" {
    pub fn init_idle(idle: *mut task_struct, cpu: core::ffi::c_int);
}
extern "C" {
    pub fn sched_fork(clone_flags: core::ffi::c_ulong, p: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn sched_cgroup_fork(p: *mut task_struct, kargs: *mut kernel_clone_args);
}
extern "C" {
    pub fn sched_post_fork(p: *mut task_struct);
}
extern "C" {
    pub fn sched_dead(p: *mut task_struct);
}
extern "C" {
    pub fn do_task_dead() -> !;
}
extern "C" {
    pub fn make_task_dead(signr: core::ffi::c_int) -> !;
}
extern "C" {
    pub fn mm_cache_init();
}
extern "C" {
    pub fn proc_caches_init();
}
extern "C" {
    pub fn fork_init();
}
extern "C" {
    pub fn release_task(p: *mut task_struct);
}
extern "C" {
    pub fn copy_thread(arg1: *mut task_struct, arg2: *const kernel_clone_args) -> core::ffi::c_int;
}
extern "C" {
    pub fn flush_thread();
}
extern "C" {
    pub fn exit_thread(tsk: *mut task_struct);
}
extern "C" {
    pub fn do_group_exit(arg1: core::ffi::c_int) -> !;
}
extern "C" {
    pub fn exit_files(arg1: *mut task_struct);
}
extern "C" {
    pub fn exit_itimers(arg1: *mut task_struct);
}
extern "C" {
    pub fn kernel_clone(kargs: *mut kernel_clone_args) -> pid_t;
}
extern "C" {
    pub fn copy_process(
        pid: *mut pid,
        trace: core::ffi::c_int,
        node: core::ffi::c_int,
        args: *mut kernel_clone_args,
    ) -> *mut task_struct;
}
extern "C" {
    pub fn create_io_thread(
        fn_: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut core::ffi::c_void) -> core::ffi::c_int,
        >,
        arg: *mut core::ffi::c_void,
        node: core::ffi::c_int,
    ) -> *mut task_struct;
}
extern "C" {
    pub fn fork_idle(arg1: core::ffi::c_int) -> *mut task_struct;
}
extern "C" {
    pub fn kernel_thread(
        fn_: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut core::ffi::c_void) -> core::ffi::c_int,
        >,
        arg: *mut core::ffi::c_void,
        name: *const core::ffi::c_char,
        flags: core::ffi::c_ulong,
    ) -> pid_t;
}
extern "C" {
    pub fn user_mode_thread(
        fn_: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut core::ffi::c_void) -> core::ffi::c_int,
        >,
        arg: *mut core::ffi::c_void,
        flags: core::ffi::c_ulong,
    ) -> pid_t;
}
extern "C" {
    pub fn kernel_wait4(
        arg1: pid_t,
        arg2: *mut core::ffi::c_int,
        arg3: core::ffi::c_int,
        arg4: *mut rusage,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn kernel_wait(pid: pid_t, stat: *mut core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn free_task(tsk: *mut task_struct);
}
extern "C" {
    pub fn sched_exec();
}
extern "C" {
    pub fn __put_task_struct(t: *mut task_struct);
}
extern "C" {
    pub fn __put_task_struct_rcu_cb(rhp: *mut callback_head);
}
extern "C" {
    pub fn put_task_struct_rcu_user(task: *mut task_struct);
}
extern "C" {
    pub fn release_thread(dead_task: *mut task_struct);
}
extern "C" {
    pub static mut arch_task_struct_size: core::ffi::c_int;
}
pub type class_task_lock_t = *mut task_struct;
pub type key_serial_t = i32;
pub type key_perm_t = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct key {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct net {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut printk_ratelimit_state: ratelimit_state;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user_struct {
    pub __count: refcount_t,
    pub epoll_watches: percpu_counter,
    pub unix_inflight: core::ffi::c_ulong,
    pub pipe_bufs: atomic_long_t,
    pub uidhash_node: hlist_node,
    pub uid: kuid_t,
    pub locked_vm: atomic_long_t,
    pub ratelimit: ratelimit_state,
}
impl Default for user_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn uids_sysfs_init() -> core::ffi::c_int;
}
extern "C" {
    pub fn find_user(arg1: kuid_t) -> *mut user_struct;
}
extern "C" {
    pub static mut root_user: user_struct;
}
extern "C" {
    pub fn alloc_uid(arg1: kuid_t) -> *mut user_struct;
}
extern "C" {
    pub fn free_uid(arg1: *mut user_struct);
}
#[repr(C)]
#[derive(Default)]
pub struct group_info {
    pub usage: refcount_t,
    pub ngroups: core::ffi::c_int,
    pub gid: __IncompleteArrayField<kgid_t>,
}
extern "C" {
    pub fn groups_alloc(arg1: core::ffi::c_int) -> *mut group_info;
}
extern "C" {
    pub fn groups_free(arg1: *mut group_info);
}
extern "C" {
    pub fn in_group_p(arg1: kgid_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn in_egroup_p(arg1: kgid_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn groups_search(arg1: *const group_info, arg2: kgid_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_current_groups(arg1: *mut group_info) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_groups(arg1: *mut cred, arg2: *mut group_info);
}
extern "C" {
    pub fn may_setgroups() -> bool_;
}
extern "C" {
    pub fn groups_sort(arg1: *mut group_info);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cred {
    pub usage: atomic_long_t,
    pub uid: kuid_t,
    pub gid: kgid_t,
    pub suid: kuid_t,
    pub sgid: kgid_t,
    pub euid: kuid_t,
    pub egid: kgid_t,
    pub fsuid: kuid_t,
    pub fsgid: kgid_t,
    pub securebits: core::ffi::c_uint,
    pub cap_inheritable: kernel_cap_t,
    pub cap_permitted: kernel_cap_t,
    pub cap_effective: kernel_cap_t,
    pub cap_bset: kernel_cap_t,
    pub cap_ambient: kernel_cap_t,
    pub user: *mut user_struct,
    pub user_ns: *mut user_namespace,
    pub ucounts: *mut ucounts,
    pub group_info: *mut group_info,
    pub __bindgen_anon_1: cred__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cred__bindgen_ty_1 {
    pub non_rcu: core::ffi::c_int,
    pub rcu: callback_head,
}
impl Default for cred__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for cred {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __put_cred(arg1: *mut cred);
}
extern "C" {
    pub fn exit_creds(arg1: *mut task_struct);
}
extern "C" {
    pub fn copy_creds(arg1: *mut task_struct, arg2: core::ffi::c_ulong) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_task_cred(arg1: *mut task_struct) -> *const cred;
}
extern "C" {
    pub fn cred_alloc_blank() -> *mut cred;
}
extern "C" {
    pub fn prepare_creds() -> *mut cred;
}
extern "C" {
    pub fn prepare_exec_creds() -> *mut cred;
}
extern "C" {
    pub fn commit_creds(arg1: *mut cred) -> core::ffi::c_int;
}
extern "C" {
    pub fn abort_creds(arg1: *mut cred);
}
extern "C" {
    pub fn override_creds(arg1: *const cred) -> *const cred;
}
extern "C" {
    pub fn revert_creds(arg1: *const cred);
}
extern "C" {
    pub fn prepare_kernel_cred(arg1: *mut task_struct) -> *mut cred;
}
extern "C" {
    pub fn set_security_override(arg1: *mut cred, arg2: u32_) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_security_override_from_ctx(
        arg1: *mut cred,
        arg2: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_create_files_as(arg1: *mut cred, arg2: *mut inode) -> core::ffi::c_int;
}
extern "C" {
    pub fn cred_fscmp(arg1: *const cred, arg2: *const cred) -> core::ffi::c_int;
}
extern "C" {
    pub fn cred_init();
}
extern "C" {
    pub fn set_cred_ucounts(arg1: *mut cred) -> core::ffi::c_int;
}
extern "C" {
    pub fn timerqueue_add(head: *mut timerqueue_head, node: *mut timerqueue_node) -> bool_;
}
extern "C" {
    pub fn timerqueue_del(head: *mut timerqueue_head, node: *mut timerqueue_node) -> bool_;
}
extern "C" {
    pub fn timerqueue_iterate_next(node: *mut timerqueue_node) -> *mut timerqueue_node;
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct hrtimer_clock_base {
    pub cpu_base: *mut hrtimer_cpu_base,
    pub index: core::ffi::c_uint,
    pub clockid: clockid_t,
    pub seq: seqcount_raw_spinlock_t,
    pub running: *mut hrtimer,
    pub active: timerqueue_head,
    pub get_time: ::core::option::Option<unsafe extern "C" fn() -> ktime_t>,
    pub offset: ktime_t,
}
impl Default for hrtimer_clock_base {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const hrtimer_base_type_HRTIMER_BASE_MONOTONIC: hrtimer_base_type = 0;
pub const hrtimer_base_type_HRTIMER_BASE_REALTIME: hrtimer_base_type = 1;
pub const hrtimer_base_type_HRTIMER_BASE_BOOTTIME: hrtimer_base_type = 2;
pub const hrtimer_base_type_HRTIMER_BASE_TAI: hrtimer_base_type = 3;
pub const hrtimer_base_type_HRTIMER_BASE_MONOTONIC_SOFT: hrtimer_base_type = 4;
pub const hrtimer_base_type_HRTIMER_BASE_REALTIME_SOFT: hrtimer_base_type = 5;
pub const hrtimer_base_type_HRTIMER_BASE_BOOTTIME_SOFT: hrtimer_base_type = 6;
pub const hrtimer_base_type_HRTIMER_BASE_TAI_SOFT: hrtimer_base_type = 7;
pub const hrtimer_base_type_HRTIMER_MAX_CLOCK_BASES: hrtimer_base_type = 8;
pub type hrtimer_base_type = core::ffi::c_uint;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct hrtimer_cpu_base {
    pub lock: raw_spinlock_t,
    pub cpu: core::ffi::c_uint,
    pub active_bases: core::ffi::c_uint,
    pub clock_was_set_seq: core::ffi::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub expires_next: ktime_t,
    pub next_timer: *mut hrtimer,
    pub softirq_expires_next: ktime_t,
    pub softirq_next_timer: *mut hrtimer,
    pub __bindgen_padding_0: u64,
    pub clock_base: [hrtimer_clock_base; 8usize],
}
impl Default for hrtimer_cpu_base {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl hrtimer_cpu_base {
    #[inline]
    pub fn hres_active(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hres_active(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_hrtirq(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_hrtirq(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hang_detected(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hang_detected(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn softirq_activated(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_softirq_activated(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn online(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_online(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        hres_active: core::ffi::c_uint,
        in_hrtirq: core::ffi::c_uint,
        hang_detected: core::ffi::c_uint,
        softirq_activated: core::ffi::c_uint,
        online: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let hres_active: u32 = unsafe { ::core::mem::transmute(hres_active) };
            hres_active as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let in_hrtirq: u32 = unsafe { ::core::mem::transmute(in_hrtirq) };
            in_hrtirq as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let hang_detected: u32 = unsafe { ::core::mem::transmute(hang_detected) };
            hang_detected as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let softirq_activated: u32 = unsafe { ::core::mem::transmute(softirq_activated) };
            softirq_activated as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let online: u32 = unsafe { ::core::mem::transmute(online) };
            online as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const hrtimer_mode_HRTIMER_MODE_ABS: hrtimer_mode = 0;
pub const hrtimer_mode_HRTIMER_MODE_REL: hrtimer_mode = 1;
pub const hrtimer_mode_HRTIMER_MODE_PINNED: hrtimer_mode = 2;
pub const hrtimer_mode_HRTIMER_MODE_SOFT: hrtimer_mode = 4;
pub const hrtimer_mode_HRTIMER_MODE_HARD: hrtimer_mode = 8;
pub const hrtimer_mode_HRTIMER_MODE_ABS_PINNED: hrtimer_mode = 2;
pub const hrtimer_mode_HRTIMER_MODE_REL_PINNED: hrtimer_mode = 3;
pub const hrtimer_mode_HRTIMER_MODE_ABS_SOFT: hrtimer_mode = 4;
pub const hrtimer_mode_HRTIMER_MODE_REL_SOFT: hrtimer_mode = 5;
pub const hrtimer_mode_HRTIMER_MODE_ABS_PINNED_SOFT: hrtimer_mode = 6;
pub const hrtimer_mode_HRTIMER_MODE_REL_PINNED_SOFT: hrtimer_mode = 7;
pub const hrtimer_mode_HRTIMER_MODE_ABS_HARD: hrtimer_mode = 8;
pub const hrtimer_mode_HRTIMER_MODE_REL_HARD: hrtimer_mode = 9;
pub const hrtimer_mode_HRTIMER_MODE_ABS_PINNED_HARD: hrtimer_mode = 10;
pub const hrtimer_mode_HRTIMER_MODE_REL_PINNED_HARD: hrtimer_mode = 11;
pub type hrtimer_mode = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hrtimer_sleeper {
    pub timer: hrtimer,
    pub task: *mut task_struct,
}
impl Default for hrtimer_sleeper {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn timerfd_clock_was_set();
}
extern "C" {
    pub fn timerfd_resume();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tick_device {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut tick_cpu_device: tick_device;
}
extern "C" {
    pub fn hrtimer_init(timer: *mut hrtimer, which_clock: clockid_t, mode: hrtimer_mode);
}
extern "C" {
    pub fn hrtimer_init_sleeper(sl: *mut hrtimer_sleeper, clock_id: clockid_t, mode: hrtimer_mode);
}
extern "C" {
    pub fn hrtimer_start_range_ns(
        timer: *mut hrtimer,
        tim: ktime_t,
        range_ns: u64_,
        mode: hrtimer_mode,
    );
}
extern "C" {
    pub fn hrtimer_cancel(timer: *mut hrtimer) -> core::ffi::c_int;
}
extern "C" {
    pub fn hrtimer_try_to_cancel(timer: *mut hrtimer) -> core::ffi::c_int;
}
extern "C" {
    pub fn hrtimer_sleeper_start_expires(sl: *mut hrtimer_sleeper, mode: hrtimer_mode);
}
extern "C" {
    pub fn __hrtimer_get_remaining(timer: *const hrtimer, adjust: bool_) -> ktime_t;
}
extern "C" {
    pub fn hrtimer_get_next_event() -> u64_;
}
extern "C" {
    pub fn hrtimer_next_event_without(exclude: *const hrtimer) -> u64_;
}
extern "C" {
    pub fn hrtimer_active(timer: *const hrtimer) -> bool_;
}
extern "C" {
    pub fn hrtimer_forward(timer: *mut hrtimer, now: ktime_t, interval: ktime_t) -> u64_;
}
extern "C" {
    pub fn nanosleep_copyout(arg1: *mut restart_block, arg2: *mut timespec64) -> core::ffi::c_int;
}
extern "C" {
    pub fn hrtimer_nanosleep(
        rqtp: ktime_t,
        mode: hrtimer_mode,
        clockid: clockid_t,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn schedule_hrtimeout_range(
        expires: *mut ktime_t,
        delta: u64_,
        mode: hrtimer_mode,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn schedule_hrtimeout_range_clock(
        expires: *mut ktime_t,
        delta: u64_,
        mode: hrtimer_mode,
        clock_id: clockid_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn schedule_hrtimeout(expires: *mut ktime_t, mode: hrtimer_mode) -> core::ffi::c_int;
}
extern "C" {
    pub fn hrtimer_run_queues();
}
extern "C" {
    pub fn hrtimers_init();
}
extern "C" {
    pub fn sysrq_timer_list_show();
}
extern "C" {
    pub fn hrtimers_prepare_cpu(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn hrtimers_cpu_dying(cpu: core::ffi::c_uint) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rtc_device {
    _unused: [u8; 0],
}
pub const alarmtimer_type_ALARM_REALTIME: alarmtimer_type = 0;
pub const alarmtimer_type_ALARM_BOOTTIME: alarmtimer_type = 1;
pub const alarmtimer_type_ALARM_NUMTYPE: alarmtimer_type = 2;
pub const alarmtimer_type_ALARM_REALTIME_FREEZER: alarmtimer_type = 3;
pub const alarmtimer_type_ALARM_BOOTTIME_FREEZER: alarmtimer_type = 4;
pub type alarmtimer_type = core::ffi::c_uint;
pub const alarmtimer_restart_ALARMTIMER_NORESTART: alarmtimer_restart = 0;
pub const alarmtimer_restart_ALARMTIMER_RESTART: alarmtimer_restart = 1;
pub type alarmtimer_restart = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct alarm {
    pub node: timerqueue_node,
    pub timer: hrtimer,
    pub function: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut alarm, now: ktime_t) -> alarmtimer_restart,
    >,
    pub type_: alarmtimer_type,
    pub state: core::ffi::c_int,
    pub data: *mut core::ffi::c_void,
}
impl Default for alarm {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn alarm_init(
        alarm: *mut alarm,
        type_: alarmtimer_type,
        function: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut alarm, arg2: ktime_t) -> alarmtimer_restart,
        >,
    );
}
extern "C" {
    pub fn alarm_start(alarm: *mut alarm, start: ktime_t);
}
extern "C" {
    pub fn alarm_start_relative(alarm: *mut alarm, start: ktime_t);
}
extern "C" {
    pub fn alarm_restart(alarm: *mut alarm);
}
extern "C" {
    pub fn alarm_try_to_cancel(alarm: *mut alarm) -> core::ffi::c_int;
}
extern "C" {
    pub fn alarm_cancel(alarm: *mut alarm) -> core::ffi::c_int;
}
extern "C" {
    pub fn alarm_forward(alarm: *mut alarm, now: ktime_t, interval: ktime_t) -> u64_;
}
extern "C" {
    pub fn alarm_forward_now(alarm: *mut alarm, interval: ktime_t) -> u64_;
}
extern "C" {
    pub fn alarm_expires_remaining(alarm: *const alarm) -> ktime_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cpu_timer {
    pub node: timerqueue_node,
    pub head: *mut timerqueue_head,
    pub pid: *mut pid,
    pub elist: list_head,
    pub firing: core::ffi::c_int,
    pub handling: *mut task_struct,
}
impl Default for cpu_timer {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn posix_cputimers_group_init(pct: *mut posix_cputimers, cpu_limit: u64_);
}
extern "C" {
    pub fn clear_posix_cputimers_work(p: *mut task_struct);
}
extern "C" {
    pub fn posix_cputimers_init_work();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_itimer {
    pub list: list_head,
    pub t_hash: hlist_node,
    pub it_lock: spinlock_t,
    pub kclock: *mut k_clock,
    pub it_clock: clockid_t,
    pub it_id: timer_t,
    pub it_active: core::ffi::c_int,
    pub it_overrun: s64,
    pub it_overrun_last: s64,
    pub it_requeue_pending: core::ffi::c_int,
    pub it_sigev_notify: core::ffi::c_int,
    pub it_interval: ktime_t,
    pub it_signal: *mut signal_struct,
    pub __bindgen_anon_1: k_itimer__bindgen_ty_1,
    pub sigq: *mut sigqueue,
    pub it: k_itimer__bindgen_ty_2,
    pub rcu: callback_head,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union k_itimer__bindgen_ty_1 {
    pub it_pid: *mut pid,
    pub it_process: *mut task_struct,
}
impl Default for k_itimer__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union k_itimer__bindgen_ty_2 {
    pub real: k_itimer__bindgen_ty_2__bindgen_ty_1,
    pub cpu: cpu_timer,
    pub alarm: k_itimer__bindgen_ty_2__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_itimer__bindgen_ty_2__bindgen_ty_1 {
    pub timer: hrtimer,
}
impl Default for k_itimer__bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_itimer__bindgen_ty_2__bindgen_ty_2 {
    pub alarmtimer: alarm,
}
impl Default for k_itimer__bindgen_ty_2__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for k_itimer__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for k_itimer {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn run_posix_cpu_timers();
}
extern "C" {
    pub fn posix_cpu_timers_exit(task: *mut task_struct);
}
extern "C" {
    pub fn posix_cpu_timers_exit_group(task: *mut task_struct);
}
extern "C" {
    pub fn set_process_cpu_timer(
        task: *mut task_struct,
        clock_idx: core::ffi::c_uint,
        newval: *mut u64_,
        oldval: *mut u64_,
    );
}
extern "C" {
    pub fn update_rlimit_cpu(
        task: *mut task_struct,
        rlim_new: core::ffi::c_ulong,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn posixtimer_rearm(info: *mut kernel_siginfo);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sighand_struct {
    pub siglock: spinlock_t,
    pub count: refcount_t,
    pub signalfd_wqh: wait_queue_head_t,
    pub action: [k_sigaction; 64usize],
}
impl Default for sighand_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pacct_struct {
    pub ac_flag: core::ffi::c_int,
    pub ac_exitcode: core::ffi::c_long,
    pub ac_mem: core::ffi::c_ulong,
    pub ac_utime: u64_,
    pub ac_stime: u64_,
    pub ac_minflt: core::ffi::c_ulong,
    pub ac_majflt: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cpu_itimer {
    pub expires: u64_,
    pub incr: u64_,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct task_cputime_atomic {
    pub utime: atomic64_t,
    pub stime: atomic64_t,
    pub sum_exec_runtime: atomic64_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct thread_group_cputimer {
    pub cputime_atomic: task_cputime_atomic,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct multiprocess_signals {
    pub signal: sigset_t,
    pub node: hlist_node,
}
impl Default for multiprocess_signals {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct core_thread {
    pub task: *mut task_struct,
    pub next: *mut core_thread,
}
impl Default for core_thread {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct core_state {
    pub nr_threads: atomic_t,
    pub dumper: core_thread,
    pub startup: completion,
}
impl Default for core_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct signal_struct {
    pub sigcnt: refcount_t,
    pub live: atomic_t,
    pub nr_threads: core::ffi::c_int,
    pub quick_threads: core::ffi::c_int,
    pub thread_head: list_head,
    pub wait_chldexit: wait_queue_head_t,
    pub curr_target: *mut task_struct,
    pub shared_pending: sigpending,
    pub multiprocess: hlist_head,
    pub group_exit_code: core::ffi::c_int,
    pub notify_count: core::ffi::c_int,
    pub group_exec_task: *mut task_struct,
    pub group_stop_count: core::ffi::c_int,
    pub flags: core::ffi::c_uint,
    pub core_state: *mut core_state,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub next_posix_timer_id: core::ffi::c_uint,
    pub posix_timers: list_head,
    pub real_timer: hrtimer,
    pub it_real_incr: ktime_t,
    pub it: [cpu_itimer; 2usize],
    pub cputimer: thread_group_cputimer,
    pub posix_cputimers: posix_cputimers,
    pub pids: [*mut pid; 4usize],
    pub tty_old_pgrp: *mut pid,
    pub leader: core::ffi::c_int,
    pub tty: *mut tty_struct,
    pub stats_lock: seqlock_t,
    pub utime: u64_,
    pub stime: u64_,
    pub cutime: u64_,
    pub cstime: u64_,
    pub gtime: u64_,
    pub cgtime: u64_,
    pub prev_cputime: prev_cputime,
    pub nvcsw: core::ffi::c_ulong,
    pub nivcsw: core::ffi::c_ulong,
    pub cnvcsw: core::ffi::c_ulong,
    pub cnivcsw: core::ffi::c_ulong,
    pub min_flt: core::ffi::c_ulong,
    pub maj_flt: core::ffi::c_ulong,
    pub cmin_flt: core::ffi::c_ulong,
    pub cmaj_flt: core::ffi::c_ulong,
    pub inblock: core::ffi::c_ulong,
    pub oublock: core::ffi::c_ulong,
    pub cinblock: core::ffi::c_ulong,
    pub coublock: core::ffi::c_ulong,
    pub maxrss: core::ffi::c_ulong,
    pub cmaxrss: core::ffi::c_ulong,
    pub ioac: task_io_accounting,
    pub sum_sched_runtime: core::ffi::c_ulonglong,
    pub rlim: [rlimit; 16usize],
    pub oom_flag_origin: bool_,
    pub oom_score_adj: core::ffi::c_short,
    pub oom_score_adj_min: core::ffi::c_short,
    pub oom_mm: *mut mm_struct,
    pub cred_guard_mutex: mutex,
    pub exec_update_lock: rw_semaphore,
}
impl Default for signal_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl signal_struct {
    #[inline]
    pub fn is_child_subreaper(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_child_subreaper(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_child_subreaper(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_child_subreaper(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_child_subreaper: core::ffi::c_uint,
        has_child_subreaper: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_child_subreaper: u32 = unsafe { ::core::mem::transmute(is_child_subreaper) };
            is_child_subreaper as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let has_child_subreaper: u32 = unsafe { ::core::mem::transmute(has_child_subreaper) };
            has_child_subreaper as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn flush_signals(arg1: *mut task_struct);
}
extern "C" {
    pub fn ignore_signals(arg1: *mut task_struct);
}
extern "C" {
    pub fn flush_signal_handlers(arg1: *mut task_struct, force_default: core::ffi::c_int);
}
extern "C" {
    pub fn dequeue_signal(
        task: *mut task_struct,
        mask: *mut sigset_t,
        info: *mut kernel_siginfo_t,
        type_: *mut pid_type,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_sig_fault_to_task(
        sig: core::ffi::c_int,
        code: core::ffi::c_int,
        addr: *mut core::ffi::c_void,
        t: *mut task_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_sig_fault(
        sig: core::ffi::c_int,
        code: core::ffi::c_int,
        addr: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn send_sig_fault(
        sig: core::ffi::c_int,
        code: core::ffi::c_int,
        addr: *mut core::ffi::c_void,
        t: *mut task_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_sig_mceerr(
        code: core::ffi::c_int,
        arg1: *mut core::ffi::c_void,
        arg2: core::ffi::c_short,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn send_sig_mceerr(
        code: core::ffi::c_int,
        arg1: *mut core::ffi::c_void,
        arg2: core::ffi::c_short,
        arg3: *mut task_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_sig_bnderr(
        addr: *mut core::ffi::c_void,
        lower: *mut core::ffi::c_void,
        upper: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_sig_pkuerr(addr: *mut core::ffi::c_void, pkey: u32_) -> core::ffi::c_int;
}
extern "C" {
    pub fn send_sig_perf(
        addr: *mut core::ffi::c_void,
        type_: u32_,
        sig_data: u64_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_sig_ptrace_errno_trap(
        errno: core::ffi::c_int,
        addr: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_sig_fault_trapno(
        sig: core::ffi::c_int,
        code: core::ffi::c_int,
        addr: *mut core::ffi::c_void,
        trapno: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn send_sig_fault_trapno(
        sig: core::ffi::c_int,
        code: core::ffi::c_int,
        addr: *mut core::ffi::c_void,
        trapno: core::ffi::c_int,
        t: *mut task_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_sig_seccomp(
        syscall: core::ffi::c_int,
        reason: core::ffi::c_int,
        force_coredump: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn send_sig_info(
        arg1: core::ffi::c_int,
        arg2: *mut kernel_siginfo,
        arg3: *mut task_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn force_sigsegv(sig: core::ffi::c_int);
}
extern "C" {
    pub fn force_sig_info(arg1: *mut kernel_siginfo) -> core::ffi::c_int;
}
extern "C" {
    pub fn __kill_pgrp_info(
        sig: core::ffi::c_int,
        info: *mut kernel_siginfo,
        pgrp: *mut pid,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kill_pid_info(
        sig: core::ffi::c_int,
        info: *mut kernel_siginfo,
        pid: *mut pid,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kill_pid_usb_asyncio(
        sig: core::ffi::c_int,
        errno: core::ffi::c_int,
        addr: sigval_t,
        arg1: *mut pid,
        arg2: *const cred,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kill_pgrp(
        pid: *mut pid,
        sig: core::ffi::c_int,
        priv_: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kill_pid(
        pid: *mut pid,
        sig: core::ffi::c_int,
        priv_: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_notify_parent(arg1: *mut task_struct, arg2: core::ffi::c_int) -> bool_;
}
extern "C" {
    pub fn __wake_up_parent(p: *mut task_struct, parent: *mut task_struct);
}
extern "C" {
    pub fn force_sig(arg1: core::ffi::c_int);
}
extern "C" {
    pub fn force_fatal_sig(arg1: core::ffi::c_int);
}
extern "C" {
    pub fn force_exit_sig(arg1: core::ffi::c_int);
}
extern "C" {
    pub fn send_sig(
        arg1: core::ffi::c_int,
        arg2: *mut task_struct,
        arg3: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn zap_other_threads(p: *mut task_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn sigqueue_alloc() -> *mut sigqueue;
}
extern "C" {
    pub fn sigqueue_free(arg1: *mut sigqueue);
}
extern "C" {
    pub fn send_sigqueue(arg1: *mut sigqueue, arg2: *mut pid, arg3: pid_type) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_sigaction(
        arg1: core::ffi::c_int,
        arg2: *mut k_sigaction,
        arg3: *mut k_sigaction,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn recalc_sigpending();
}
extern "C" {
    pub fn calculate_sigpending();
}
extern "C" {
    pub fn signal_wake_up_state(t: *mut task_struct, state: core::ffi::c_uint);
}
extern "C" {
    pub fn task_join_group_stop(task: *mut task_struct);
}
extern "C" {
    pub fn set_user_sigmask(umask: *const sigset_t, sigsetsize: usize) -> core::ffi::c_int;
}
extern "C" {
    pub fn __cleanup_sighand(arg1: *mut sighand_struct);
}
extern "C" {
    pub fn flush_itimer_signals();
}
extern "C" {
    pub fn current_is_single_threaded() -> bool_;
}
pub type proc_visitor = ::core::option::Option<
    unsafe extern "C" fn(p: *mut task_struct, data: *mut core::ffi::c_void) -> core::ffi::c_int,
>;
extern "C" {
    pub fn walk_process_tree(
        top: *mut task_struct,
        arg1: proc_visitor,
        arg2: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn __lock_task_sighand(
        task: *mut task_struct,
        flags: *mut core::ffi::c_ulong,
    ) -> *mut sighand_struct;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rcuwait {
    pub task: *mut task_struct,
}
impl Default for rcuwait {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn rcuwait_wake_up(w: *mut rcuwait) -> core::ffi::c_int;
}
extern "C" {
    pub fn finish_rcuwait(w: *mut rcuwait);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rcu_sync {
    pub gp_state: core::ffi::c_int,
    pub gp_count: core::ffi::c_int,
    pub gp_wait: wait_queue_head_t,
    pub cb_head: callback_head,
}
impl Default for rcu_sync {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn rcu_sync_init(arg1: *mut rcu_sync);
}
extern "C" {
    pub fn rcu_sync_enter(arg1: *mut rcu_sync);
}
extern "C" {
    pub fn rcu_sync_exit(arg1: *mut rcu_sync);
}
extern "C" {
    pub fn rcu_sync_dtor(arg1: *mut rcu_sync);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct percpu_rw_semaphore {
    pub rss: rcu_sync,
    pub read_count: *mut core::ffi::c_uint,
    pub writer: rcuwait,
    pub waiters: wait_queue_head_t,
    pub block: atomic_t,
}
impl Default for percpu_rw_semaphore {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __percpu_down_read(arg1: *mut percpu_rw_semaphore, arg2: bool_) -> bool_;
}
extern "C" {
    pub fn percpu_is_read_locked(arg1: *mut percpu_rw_semaphore) -> bool_;
}
extern "C" {
    pub fn percpu_down_write(arg1: *mut percpu_rw_semaphore);
}
extern "C" {
    pub fn percpu_up_write(arg1: *mut percpu_rw_semaphore);
}
extern "C" {
    pub fn __percpu_init_rwsem(
        arg1: *mut percpu_rw_semaphore,
        arg2: *const core::ffi::c_char,
        arg3: *mut lock_class_key,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn percpu_free_rwsem(arg1: *mut percpu_rw_semaphore);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct delayed_call {
    pub fn_: ::core::option::Option<unsafe extern "C" fn(arg1: *mut core::ffi::c_void)>,
    pub arg: *mut core::ffi::c_void,
}
impl Default for delayed_call {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct guid_t {
    pub b: [__u8; 16usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct uuid_t {
    pub b: [__u8; 16usize],
}
extern "C" {
    pub static guid_null: guid_t;
}
extern "C" {
    pub static uuid_null: uuid_t;
}
extern "C" {
    pub fn generate_random_uuid(uuid: *mut core::ffi::c_uchar);
}
extern "C" {
    pub fn generate_random_guid(guid: *mut core::ffi::c_uchar);
}
extern "C" {
    pub fn guid_gen(u: *mut guid_t);
}
extern "C" {
    pub fn uuid_gen(u: *mut uuid_t);
}
extern "C" {
    pub fn uuid_is_valid(uuid: *const core::ffi::c_char) -> bool_;
}
extern "C" {
    pub static guid_index: [u8_; 16usize];
}
extern "C" {
    pub static uuid_index: [u8_; 16usize];
}
extern "C" {
    pub fn guid_parse(uuid: *const core::ffi::c_char, u: *mut guid_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn uuid_parse(uuid: *const core::ffi::c_char, u: *mut uuid_t) -> core::ffi::c_int;
}
pub type errseq_t = u32_;
extern "C" {
    pub fn errseq_set(eseq: *mut errseq_t, err: core::ffi::c_int) -> errseq_t;
}
extern "C" {
    pub fn errseq_sample(eseq: *mut errseq_t) -> errseq_t;
}
extern "C" {
    pub fn errseq_check(eseq: *mut errseq_t, since: errseq_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn errseq_check_and_advance(eseq: *mut errseq_t, since: *mut errseq_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn rt_mutex_pre_schedule();
}
extern "C" {
    pub fn rt_mutex_schedule();
}
extern "C" {
    pub fn rt_mutex_post_schedule();
}
extern "C" {
    pub fn rt_mutex_setprio(p: *mut task_struct, pi_task: *mut task_struct);
}
extern "C" {
    pub fn rt_mutex_adjust_pi(p: *mut task_struct);
}
extern "C" {
    pub fn normalize_rt_tasks();
}
pub const ICQ_EXITED: _bindgen_ty_77 = 4;
pub const ICQ_DESTROYED: _bindgen_ty_77 = 8;
pub type _bindgen_ty_77 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_cq {
    pub q: *mut request_queue,
    pub ioc: *mut io_context,
    pub __bindgen_anon_1: io_cq__bindgen_ty_1,
    pub __bindgen_anon_2: io_cq__bindgen_ty_2,
    pub flags: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_cq__bindgen_ty_1 {
    pub q_node: list_head,
    pub __rcu_icq_cache: *mut kmem_cache,
}
impl Default for io_cq__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_cq__bindgen_ty_2 {
    pub ioc_node: hlist_node,
    pub __rcu_head: callback_head,
}
impl Default for io_cq__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for io_cq {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct io_context {
    pub refcount: atomic_long_t,
    pub active_ref: atomic_t,
    pub ioprio: core::ffi::c_ushort,
}
extern "C" {
    pub fn put_io_context(ioc: *mut io_context);
}
extern "C" {
    pub fn exit_io_context(task: *mut task_struct);
}
extern "C" {
    pub fn __copy_io(clone_flags: core::ffi::c_ulong, tsk: *mut task_struct) -> core::ffi::c_int;
}
pub const IOPRIO_CLASS_NONE: _bindgen_ty_78 = 0;
pub const IOPRIO_CLASS_RT: _bindgen_ty_78 = 1;
pub const IOPRIO_CLASS_BE: _bindgen_ty_78 = 2;
pub const IOPRIO_CLASS_IDLE: _bindgen_ty_78 = 3;
pub const IOPRIO_CLASS_INVALID: _bindgen_ty_78 = 7;
pub type _bindgen_ty_78 = core::ffi::c_uint;
pub const IOPRIO_WHO_PROCESS: _bindgen_ty_79 = 1;
pub const IOPRIO_WHO_PGRP: _bindgen_ty_79 = 2;
pub const IOPRIO_WHO_USER: _bindgen_ty_79 = 3;
pub type _bindgen_ty_79 = core::ffi::c_uint;
pub const IOPRIO_HINT_NONE: _bindgen_ty_80 = 0;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_1: _bindgen_ty_80 = 1;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_2: _bindgen_ty_80 = 2;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_3: _bindgen_ty_80 = 3;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_4: _bindgen_ty_80 = 4;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_5: _bindgen_ty_80 = 5;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_6: _bindgen_ty_80 = 6;
pub const IOPRIO_HINT_DEV_DURATION_LIMIT_7: _bindgen_ty_80 = 7;
pub type _bindgen_ty_80 = core::ffi::c_uint;
extern "C" {
    pub fn set_task_ioprio(task: *mut task_struct, ioprio: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn ioprio_check_cap(ioprio: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn fs_ftype_to_dtype(filetype: core::ffi::c_uint) -> core::ffi::c_uchar;
}
extern "C" {
    pub fn fs_umode_to_ftype(mode: umode_t) -> core::ffi::c_uchar;
}
extern "C" {
    pub fn fs_umode_to_dtype(mode: umode_t) -> core::ffi::c_uchar;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vfsmount {
    pub mnt_root: *mut dentry,
    pub mnt_sb: *mut super_block,
    pub mnt_flags: core::ffi::c_int,
    pub mnt_idmap: *mut mnt_idmap,
}
impl Default for vfsmount {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn mnt_want_write(mnt: *mut vfsmount) -> core::ffi::c_int;
}
extern "C" {
    pub fn mnt_want_write_file(file: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn mnt_drop_write(mnt: *mut vfsmount);
}
extern "C" {
    pub fn mnt_drop_write_file(file: *mut file);
}
extern "C" {
    pub fn mntput(mnt: *mut vfsmount);
}
extern "C" {
    pub fn mntget(mnt: *mut vfsmount) -> *mut vfsmount;
}
extern "C" {
    pub fn mnt_make_shortterm(mnt: *mut vfsmount);
}
extern "C" {
    pub fn mnt_clone_internal(path: *const path) -> *mut vfsmount;
}
extern "C" {
    pub fn __mnt_is_readonly(mnt: *mut vfsmount) -> bool_;
}
extern "C" {
    pub fn mnt_may_suid(mnt: *mut vfsmount) -> bool_;
}
extern "C" {
    pub fn clone_private_mount(path: *const path) -> *mut vfsmount;
}
extern "C" {
    pub fn mnt_get_write_access(mnt: *mut vfsmount) -> core::ffi::c_int;
}
extern "C" {
    pub fn mnt_put_write_access(mnt: *mut vfsmount);
}
extern "C" {
    pub fn fc_mount(fc: *mut fs_context) -> *mut vfsmount;
}
extern "C" {
    pub fn vfs_create_mount(fc: *mut fs_context) -> *mut vfsmount;
}
extern "C" {
    pub fn vfs_kern_mount(
        type_: *mut file_system_type,
        flags: core::ffi::c_int,
        name: *const core::ffi::c_char,
        data: *mut core::ffi::c_void,
    ) -> *mut vfsmount;
}
extern "C" {
    pub fn vfs_submount(
        mountpoint: *const dentry,
        type_: *mut file_system_type,
        name: *const core::ffi::c_char,
        data: *mut core::ffi::c_void,
    ) -> *mut vfsmount;
}
extern "C" {
    pub fn mnt_set_expiry(mnt: *mut vfsmount, expiry_list: *mut list_head);
}
extern "C" {
    pub fn mark_mounts_for_expiry(mounts: *mut list_head);
}
extern "C" {
    pub fn path_is_mountpoint(path: *const path) -> bool_;
}
extern "C" {
    pub fn our_mnt(mnt: *mut vfsmount) -> bool_;
}
extern "C" {
    pub fn kern_mount(arg1: *mut file_system_type) -> *mut vfsmount;
}
extern "C" {
    pub fn kern_unmount(mnt: *mut vfsmount);
}
extern "C" {
    pub fn may_umount_tree(arg1: *mut vfsmount) -> core::ffi::c_int;
}
extern "C" {
    pub fn may_umount(arg1: *mut vfsmount) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_mount(
        arg1: *const core::ffi::c_char,
        arg2: *const core::ffi::c_char,
        arg3: *const core::ffi::c_char,
        arg4: core::ffi::c_ulong,
        arg5: *mut core::ffi::c_void,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn collect_mounts(arg1: *const path) -> *mut vfsmount;
}
extern "C" {
    pub fn drop_collected_mounts(arg1: *mut vfsmount);
}
extern "C" {
    pub fn iterate_mounts(
        arg1: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut vfsmount,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        arg2: *mut core::ffi::c_void,
        arg3: *mut vfsmount,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn kern_unmount_array(mnt: *mut *mut vfsmount, num: core::ffi::c_uint);
}
extern "C" {
    pub fn cifs_root_data(
        dev: *mut *mut core::ffi::c_char,
        opts: *mut *mut core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static mut nop_mnt_idmap: mnt_idmap;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vfsuid_t {
    pub val: uid_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct vfsgid_t {
    pub val: gid_t,
}
extern "C" {
    pub fn vfsgid_in_group_p(vfsgid: vfsgid_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn mnt_idmap_get(idmap: *mut mnt_idmap) -> *mut mnt_idmap;
}
extern "C" {
    pub fn mnt_idmap_put(idmap: *mut mnt_idmap);
}
extern "C" {
    pub fn make_vfsuid(
        idmap: *mut mnt_idmap,
        fs_userns: *mut user_namespace,
        kuid: kuid_t,
    ) -> vfsuid_t;
}
extern "C" {
    pub fn make_vfsgid(
        idmap: *mut mnt_idmap,
        fs_userns: *mut user_namespace,
        kgid: kgid_t,
    ) -> vfsgid_t;
}
extern "C" {
    pub fn from_vfsuid(
        idmap: *mut mnt_idmap,
        fs_userns: *mut user_namespace,
        vfsuid: vfsuid_t,
    ) -> kuid_t;
}
extern "C" {
    pub fn from_vfsgid(
        idmap: *mut mnt_idmap,
        fs_userns: *mut user_namespace,
        vfsgid: vfsgid_t,
    ) -> kgid_t;
}
pub const rw_hint_WRITE_LIFE_NOT_SET: rw_hint = 0;
pub const rw_hint_WRITE_LIFE_NONE: rw_hint = 1;
pub const rw_hint_WRITE_LIFE_SHORT: rw_hint = 2;
pub const rw_hint_WRITE_LIFE_MEDIUM: rw_hint = 3;
pub const rw_hint_WRITE_LIFE_LONG: rw_hint = 4;
pub const rw_hint_WRITE_LIFE_EXTREME: rw_hint = 5;
pub type rw_hint = core::ffi::c_uchar;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct file_clone_range {
    pub src_fd: __s64,
    pub src_offset: __u64,
    pub src_length: __u64,
    pub dest_offset: __u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fstrim_range {
    pub start: __u64,
    pub len: __u64,
    pub minlen: __u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fsuuid2 {
    pub len: __u8,
    pub uuid: [__u8; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fs_sysfs_path {
    pub len: __u8,
    pub name: [__u8; 128usize],
}
impl Default for fs_sysfs_path {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct file_dedupe_range_info {
    pub dest_fd: __s64,
    pub dest_offset: __u64,
    pub bytes_deduped: __u64,
    pub status: __s32,
    pub reserved: __u32,
}
#[repr(C)]
#[derive(Default)]
pub struct file_dedupe_range {
    pub src_offset: __u64,
    pub src_length: __u64,
    pub dest_count: __u16,
    pub reserved1: __u16,
    pub reserved2: __u32,
    pub info: __IncompleteArrayField<file_dedupe_range_info>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct files_stat_struct {
    pub nr_files: core::ffi::c_ulong,
    pub nr_free_files: core::ffi::c_ulong,
    pub max_files: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct inodes_stat_t {
    pub nr_inodes: core::ffi::c_long,
    pub nr_unused: core::ffi::c_long,
    pub dummy: [core::ffi::c_long; 5usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fsxattr {
    pub fsx_xflags: __u32,
    pub fsx_extsize: __u32,
    pub fsx_nextents: __u32,
    pub fsx_projid: __u32,
    pub fsx_cowextsize: __u32,
    pub fsx_pad: [core::ffi::c_uchar; 8usize],
}
pub type __kernel_rwf_t = core::ffi::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct page_region {
    pub start: __u64,
    pub end: __u64,
    pub categories: __u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct pm_scan_arg {
    pub size: __u64,
    pub flags: __u64,
    pub start: __u64,
    pub end: __u64,
    pub walk_end: __u64,
    pub vec: __u64,
    pub vec_len: __u64,
    pub max_pages: __u64,
    pub category_inverted: __u64,
    pub category_mask: __u64,
    pub category_anyof_mask: __u64,
    pub return_mask: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct backing_dev_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bdi_writeback {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bio {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_comp_batch {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct export_operations {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fiemap_extent_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hd_geometry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iovec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kstatfs {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct swap_info_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iov_iter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fscrypt_inode_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fscrypt_operations {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fsverity_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fsverity_operations {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fsnotify_mark_connector {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fsnotify_sb_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fs_parameter_spec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fileattr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iomap_ops {
    _unused: [u8; 0],
}
extern "C" {
    pub fn inode_init();
}
extern "C" {
    pub fn inode_init_early();
}
extern "C" {
    pub fn files_init();
}
extern "C" {
    pub fn files_maxfiles_init();
}
extern "C" {
    pub fn get_max_files() -> core::ffi::c_ulong;
}
extern "C" {
    pub static mut sysctl_nr_open: core::ffi::c_uint;
}
pub type rwf_t = __kernel_rwf_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct buffer_head {
    _unused: [u8; 0],
}
pub type get_block_t = ::core::option::Option<
    unsafe extern "C" fn(
        inode: *mut inode,
        iblock: sector_t,
        bh_result: *mut buffer_head,
        create: core::ffi::c_int,
    ) -> core::ffi::c_int,
>;
pub type dio_iodone_t = ::core::option::Option<
    unsafe extern "C" fn(
        iocb: *mut kiocb,
        offset: loff_t,
        bytes: isize,
        private: *mut core::ffi::c_void,
    ) -> core::ffi::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iattr {
    pub ia_valid: core::ffi::c_uint,
    pub ia_mode: umode_t,
    pub __bindgen_anon_1: iattr__bindgen_ty_1,
    pub __bindgen_anon_2: iattr__bindgen_ty_2,
    pub ia_size: loff_t,
    pub ia_atime: timespec64,
    pub ia_mtime: timespec64,
    pub ia_ctime: timespec64,
    pub ia_file: *mut file,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iattr__bindgen_ty_1 {
    pub ia_uid: kuid_t,
    pub ia_vfsuid: vfsuid_t,
}
impl Default for iattr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iattr__bindgen_ty_2 {
    pub ia_gid: kgid_t,
    pub ia_vfsgid: vfsgid_t,
}
impl Default for iattr__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for iattr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fs_disk_quota {
    pub d_version: __s8,
    pub d_flags: __s8,
    pub d_fieldmask: __u16,
    pub d_id: __u32,
    pub d_blk_hardlimit: __u64,
    pub d_blk_softlimit: __u64,
    pub d_ino_hardlimit: __u64,
    pub d_ino_softlimit: __u64,
    pub d_bcount: __u64,
    pub d_icount: __u64,
    pub d_itimer: __s32,
    pub d_btimer: __s32,
    pub d_iwarns: __u16,
    pub d_bwarns: __u16,
    pub d_itimer_hi: __s8,
    pub d_btimer_hi: __s8,
    pub d_rtbtimer_hi: __s8,
    pub d_padding2: __s8,
    pub d_rtb_hardlimit: __u64,
    pub d_rtb_softlimit: __u64,
    pub d_rtbcount: __u64,
    pub d_rtbtimer: __s32,
    pub d_rtbwarns: __u16,
    pub d_padding3: __s16,
    pub d_padding4: [core::ffi::c_char; 8usize],
}
pub type fs_disk_quota_t = fs_disk_quota;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fs_qfilestat {
    pub qfs_ino: __u64,
    pub qfs_nblks: __u64,
    pub qfs_nextents: __u32,
}
pub type fs_qfilestat_t = fs_qfilestat;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fs_quota_stat {
    pub qs_version: __s8,
    pub qs_flags: __u16,
    pub qs_pad: __s8,
    pub qs_uquota: fs_qfilestat_t,
    pub qs_gquota: fs_qfilestat_t,
    pub qs_incoredqs: __u32,
    pub qs_btimelimit: __s32,
    pub qs_itimelimit: __s32,
    pub qs_rtbtimelimit: __s32,
    pub qs_bwarnlimit: __u16,
    pub qs_iwarnlimit: __u16,
}
pub type fs_quota_stat_t = fs_quota_stat;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fs_qfilestatv {
    pub qfs_ino: __u64,
    pub qfs_nblks: __u64,
    pub qfs_nextents: __u32,
    pub qfs_pad: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fs_quota_statv {
    pub qs_version: __s8,
    pub qs_pad1: __u8,
    pub qs_flags: __u16,
    pub qs_incoredqs: __u32,
    pub qs_uquota: fs_qfilestatv,
    pub qs_gquota: fs_qfilestatv,
    pub qs_pquota: fs_qfilestatv,
    pub qs_btimelimit: __s32,
    pub qs_itimelimit: __s32,
    pub qs_rtbtimelimit: __s32,
    pub qs_bwarnlimit: __u16,
    pub qs_iwarnlimit: __u16,
    pub qs_rtbwarnlimit: __u16,
    pub qs_pad3: __u16,
    pub qs_pad4: __u32,
    pub qs_pad2: [__u64; 7usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct qtree_fmt_operations {
    pub mem2disk_dqblk: ::core::option::Option<
        unsafe extern "C" fn(disk: *mut core::ffi::c_void, dquot: *mut dquot),
    >,
    pub disk2mem_dqblk: ::core::option::Option<
        unsafe extern "C" fn(dquot: *mut dquot, disk: *mut core::ffi::c_void),
    >,
    pub is_id: ::core::option::Option<
        unsafe extern "C" fn(disk: *mut core::ffi::c_void, dquot: *mut dquot) -> core::ffi::c_int,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct qtree_mem_dqinfo {
    pub dqi_sb: *mut super_block,
    pub dqi_type: core::ffi::c_int,
    pub dqi_blocks: core::ffi::c_uint,
    pub dqi_free_blk: core::ffi::c_uint,
    pub dqi_free_entry: core::ffi::c_uint,
    pub dqi_blocksize_bits: core::ffi::c_uint,
    pub dqi_entry_size: core::ffi::c_uint,
    pub dqi_usable_bs: core::ffi::c_uint,
    pub dqi_qtree_depth: core::ffi::c_uint,
    pub dqi_ops: *const qtree_fmt_operations,
}
impl Default for qtree_mem_dqinfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn qtree_write_dquot(info: *mut qtree_mem_dqinfo, dquot: *mut dquot) -> core::ffi::c_int;
}
extern "C" {
    pub fn qtree_read_dquot(info: *mut qtree_mem_dqinfo, dquot: *mut dquot) -> core::ffi::c_int;
}
extern "C" {
    pub fn qtree_delete_dquot(info: *mut qtree_mem_dqinfo, dquot: *mut dquot) -> core::ffi::c_int;
}
extern "C" {
    pub fn qtree_release_dquot(info: *mut qtree_mem_dqinfo, dquot: *mut dquot) -> core::ffi::c_int;
}
extern "C" {
    pub fn qtree_entry_unused(
        info: *mut qtree_mem_dqinfo,
        disk: *mut core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn qtree_get_next_id(info: *mut qtree_mem_dqinfo, qid: *mut kqid) -> core::ffi::c_int;
}
pub type projid_t = __kernel_uid32_t;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kprojid_t {
    pub val: projid_t,
}
pub const QIF_BLIMITS_B: _bindgen_ty_81 = 0;
pub const QIF_SPACE_B: _bindgen_ty_81 = 1;
pub const QIF_ILIMITS_B: _bindgen_ty_81 = 2;
pub const QIF_INODES_B: _bindgen_ty_81 = 3;
pub const QIF_BTIME_B: _bindgen_ty_81 = 4;
pub const QIF_ITIME_B: _bindgen_ty_81 = 5;
pub type _bindgen_ty_81 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct if_dqblk {
    pub dqb_bhardlimit: __u64,
    pub dqb_bsoftlimit: __u64,
    pub dqb_curspace: __u64,
    pub dqb_ihardlimit: __u64,
    pub dqb_isoftlimit: __u64,
    pub dqb_curinodes: __u64,
    pub dqb_btime: __u64,
    pub dqb_itime: __u64,
    pub dqb_valid: __u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct if_nextdqblk {
    pub dqb_bhardlimit: __u64,
    pub dqb_bsoftlimit: __u64,
    pub dqb_curspace: __u64,
    pub dqb_ihardlimit: __u64,
    pub dqb_isoftlimit: __u64,
    pub dqb_curinodes: __u64,
    pub dqb_btime: __u64,
    pub dqb_itime: __u64,
    pub dqb_valid: __u32,
    pub dqb_id: __u32,
}
pub const DQF_ROOT_SQUASH_B: _bindgen_ty_82 = 0;
pub const DQF_SYS_FILE_B: _bindgen_ty_82 = 16;
pub const DQF_PRIVATE: _bindgen_ty_82 = 17;
pub type _bindgen_ty_82 = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct if_dqinfo {
    pub dqi_bgrace: __u64,
    pub dqi_igrace: __u64,
    pub dqi_flags: __u32,
    pub dqi_valid: __u32,
}
pub const QUOTA_NL_C_UNSPEC: _bindgen_ty_83 = 0;
pub const QUOTA_NL_C_WARNING: _bindgen_ty_83 = 1;
pub const __QUOTA_NL_C_MAX: _bindgen_ty_83 = 2;
pub type _bindgen_ty_83 = core::ffi::c_uint;
pub const QUOTA_NL_A_UNSPEC: _bindgen_ty_84 = 0;
pub const QUOTA_NL_A_QTYPE: _bindgen_ty_84 = 1;
pub const QUOTA_NL_A_EXCESS_ID: _bindgen_ty_84 = 2;
pub const QUOTA_NL_A_WARNING: _bindgen_ty_84 = 3;
pub const QUOTA_NL_A_DEV_MAJOR: _bindgen_ty_84 = 4;
pub const QUOTA_NL_A_DEV_MINOR: _bindgen_ty_84 = 5;
pub const QUOTA_NL_A_CAUSED_ID: _bindgen_ty_84 = 6;
pub const QUOTA_NL_A_PAD: _bindgen_ty_84 = 7;
pub const __QUOTA_NL_A_MAX: _bindgen_ty_84 = 8;
pub type _bindgen_ty_84 = core::ffi::c_uint;
pub const quota_type_USRQUOTA: quota_type = 0;
pub const quota_type_GRPQUOTA: quota_type = 1;
pub const quota_type_PRJQUOTA: quota_type = 2;
pub type quota_type = core::ffi::c_uint;
pub type qid_t = __kernel_uid32_t;
pub type qsize_t = core::ffi::c_longlong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kqid {
    pub __bindgen_anon_1: kqid__bindgen_ty_1,
    pub type_: quota_type,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union kqid__bindgen_ty_1 {
    pub uid: kuid_t,
    pub gid: kgid_t,
    pub projid: kprojid_t,
}
impl Default for kqid__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for kqid {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn qid_eq(left: kqid, right: kqid) -> bool_;
}
extern "C" {
    pub fn qid_lt(left: kqid, right: kqid) -> bool_;
}
extern "C" {
    pub fn from_kqid(to: *mut user_namespace, qid: kqid) -> qid_t;
}
extern "C" {
    pub fn from_kqid_munged(to: *mut user_namespace, qid: kqid) -> qid_t;
}
extern "C" {
    pub fn qid_valid(qid: kqid) -> bool_;
}
extern "C" {
    pub static mut dq_data_lock: spinlock_t;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mem_dqblk {
    pub dqb_bhardlimit: qsize_t,
    pub dqb_bsoftlimit: qsize_t,
    pub dqb_curspace: qsize_t,
    pub dqb_rsvspace: qsize_t,
    pub dqb_ihardlimit: qsize_t,
    pub dqb_isoftlimit: qsize_t,
    pub dqb_curinodes: qsize_t,
    pub dqb_btime: time64_t,
    pub dqb_itime: time64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mem_dqinfo {
    pub dqi_format: *mut quota_format_type,
    pub dqi_fmt_id: core::ffi::c_int,
    pub dqi_dirty_list: list_head,
    pub dqi_flags: core::ffi::c_ulong,
    pub dqi_bgrace: core::ffi::c_uint,
    pub dqi_igrace: core::ffi::c_uint,
    pub dqi_max_spc_limit: qsize_t,
    pub dqi_max_ino_limit: qsize_t,
    pub dqi_priv: *mut core::ffi::c_void,
}
impl Default for mem_dqinfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const DQF_INFO_DIRTY_B: _bindgen_ty_85 = 17;
pub type _bindgen_ty_85 = core::ffi::c_uint;
extern "C" {
    pub fn mark_info_dirty(sb: *mut super_block, type_: core::ffi::c_int);
}
pub const DQST_LOOKUPS: _bindgen_ty_86 = 0;
pub const DQST_DROPS: _bindgen_ty_86 = 1;
pub const DQST_READS: _bindgen_ty_86 = 2;
pub const DQST_WRITES: _bindgen_ty_86 = 3;
pub const DQST_CACHE_HITS: _bindgen_ty_86 = 4;
pub const DQST_ALLOC_DQUOTS: _bindgen_ty_86 = 5;
pub const DQST_FREE_DQUOTS: _bindgen_ty_86 = 6;
pub const DQST_SYNCS: _bindgen_ty_86 = 7;
pub const _DQST_DQSTAT_LAST: _bindgen_ty_86 = 8;
pub type _bindgen_ty_86 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dqstats {
    pub stat: [core::ffi::c_ulong; 8usize],
    pub counter: [percpu_counter; 8usize],
}
impl Default for dqstats {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut dqstats: dqstats;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dquot {
    pub dq_hash: hlist_node,
    pub dq_inuse: list_head,
    pub dq_free: list_head,
    pub dq_dirty: list_head,
    pub dq_lock: mutex,
    pub dq_dqb_lock: spinlock_t,
    pub dq_count: atomic_t,
    pub dq_sb: *mut super_block,
    pub dq_id: kqid,
    pub dq_off: loff_t,
    pub dq_flags: core::ffi::c_ulong,
    pub dq_dqb: mem_dqblk,
}
impl Default for dquot {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct quota_format_ops {
    pub check_quota_file: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, type_: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub read_file_info: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, type_: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub write_file_info: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, type_: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub free_file_info: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, type_: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub read_dqblk:
        ::core::option::Option<unsafe extern "C" fn(dquot: *mut dquot) -> core::ffi::c_int>,
    pub commit_dqblk:
        ::core::option::Option<unsafe extern "C" fn(dquot: *mut dquot) -> core::ffi::c_int>,
    pub release_dqblk:
        ::core::option::Option<unsafe extern "C" fn(dquot: *mut dquot) -> core::ffi::c_int>,
    pub get_next_id: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, qid: *mut kqid) -> core::ffi::c_int,
    >,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct dquot_operations {
    pub write_dquot:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut dquot) -> core::ffi::c_int>,
    pub alloc_dquot: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_int) -> *mut dquot,
    >,
    pub destroy_dquot: ::core::option::Option<unsafe extern "C" fn(arg1: *mut dquot)>,
    pub acquire_dquot:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut dquot) -> core::ffi::c_int>,
    pub release_dquot:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut dquot) -> core::ffi::c_int>,
    pub mark_dirty:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut dquot) -> core::ffi::c_int>,
    pub write_info: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub get_reserved_space:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode) -> *mut qsize_t>,
    pub get_projid: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut kprojid_t) -> core::ffi::c_int,
    >,
    pub get_inode_usage: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut qsize_t) -> core::ffi::c_int,
    >,
    pub get_next_id: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, qid: *mut kqid) -> core::ffi::c_int,
    >,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct qc_dqblk {
    pub d_fieldmask: core::ffi::c_int,
    pub d_spc_hardlimit: u64_,
    pub d_spc_softlimit: u64_,
    pub d_ino_hardlimit: u64_,
    pub d_ino_softlimit: u64_,
    pub d_space: u64_,
    pub d_ino_count: u64_,
    pub d_ino_timer: s64,
    pub d_spc_timer: s64,
    pub d_ino_warns: core::ffi::c_int,
    pub d_spc_warns: core::ffi::c_int,
    pub d_rt_spc_hardlimit: u64_,
    pub d_rt_spc_softlimit: u64_,
    pub d_rt_space: u64_,
    pub d_rt_spc_timer: s64,
    pub d_rt_spc_warns: core::ffi::c_int,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct qc_type_state {
    pub flags: core::ffi::c_uint,
    pub spc_timelimit: core::ffi::c_uint,
    pub ino_timelimit: core::ffi::c_uint,
    pub rt_spc_timelimit: core::ffi::c_uint,
    pub spc_warnlimit: core::ffi::c_uint,
    pub ino_warnlimit: core::ffi::c_uint,
    pub rt_spc_warnlimit: core::ffi::c_uint,
    pub ino: core::ffi::c_ulonglong,
    pub blocks: blkcnt_t,
    pub nextents: blkcnt_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct qc_state {
    pub s_incoredqs: core::ffi::c_uint,
    pub s_state: [qc_type_state; 3usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct qc_info {
    pub i_fieldmask: core::ffi::c_int,
    pub i_flags: core::ffi::c_uint,
    pub i_spc_timelimit: core::ffi::c_uint,
    pub i_ino_timelimit: core::ffi::c_uint,
    pub i_rt_spc_timelimit: core::ffi::c_uint,
    pub i_spc_warnlimit: core::ffi::c_uint,
    pub i_ino_warnlimit: core::ffi::c_uint,
    pub i_rt_spc_warnlimit: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct quotactl_ops {
    pub quota_on: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: core::ffi::c_int,
            arg3: core::ffi::c_int,
            arg4: *const path,
        ) -> core::ffi::c_int,
    >,
    pub quota_off: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub quota_enable: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_uint) -> core::ffi::c_int,
    >,
    pub quota_disable: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_uint) -> core::ffi::c_int,
    >,
    pub quota_sync: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub set_info: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: core::ffi::c_int,
            arg3: *mut qc_info,
        ) -> core::ffi::c_int,
    >,
    pub get_dqblk: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: kqid,
            arg3: *mut qc_dqblk,
        ) -> core::ffi::c_int,
    >,
    pub get_nextdqblk: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: *mut kqid,
            arg3: *mut qc_dqblk,
        ) -> core::ffi::c_int,
    >,
    pub set_dqblk: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: kqid,
            arg3: *mut qc_dqblk,
        ) -> core::ffi::c_int,
    >,
    pub get_state: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: *mut qc_state) -> core::ffi::c_int,
    >,
    pub rm_xquota: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_uint) -> core::ffi::c_int,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct quota_format_type {
    pub qf_fmt_id: core::ffi::c_int,
    pub qf_ops: *const quota_format_ops,
    pub qf_owner: *mut module,
    pub qf_next: *mut quota_format_type,
}
impl Default for quota_format_type {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const _DQUOT_USAGE_ENABLED: _bindgen_ty_87 = 0;
pub const _DQUOT_LIMITS_ENABLED: _bindgen_ty_87 = 1;
pub const _DQUOT_SUSPENDED: _bindgen_ty_87 = 2;
pub const _DQUOT_STATE_FLAGS: _bindgen_ty_87 = 3;
pub type _bindgen_ty_87 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct quota_info {
    pub flags: core::ffi::c_uint,
    pub dqio_sem: rw_semaphore,
    pub files: [*mut inode; 3usize],
    pub info: [mem_dqinfo; 3usize],
    pub ops: [*const quota_format_ops; 3usize],
}
impl Default for quota_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn register_quota_format(fmt: *mut quota_format_type) -> core::ffi::c_int;
}
extern "C" {
    pub fn unregister_quota_format(fmt: *mut quota_format_type);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct quota_module_name {
    pub qm_fmt_id: core::ffi::c_int,
    pub qm_mod_name: *mut core::ffi::c_char,
}
impl Default for quota_module_name {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const positive_aop_returns_AOP_WRITEPAGE_ACTIVATE: positive_aop_returns = 524288;
pub const positive_aop_returns_AOP_TRUNCATED_PAGE: positive_aop_returns = 524289;
pub type positive_aop_returns = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct writeback_control {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct readahead_control {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kiocb {
    pub ki_filp: *mut file,
    pub ki_pos: loff_t,
    pub ki_complete:
        ::core::option::Option<unsafe extern "C" fn(iocb: *mut kiocb, ret: core::ffi::c_long)>,
    pub private: *mut core::ffi::c_void,
    pub ki_flags: core::ffi::c_int,
    pub ki_ioprio: u16_,
    pub __bindgen_anon_1: kiocb__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union kiocb__bindgen_ty_1 {
    pub ki_waitq: *mut wait_page_queue,
    pub dio_complete:
        ::core::option::Option<unsafe extern "C" fn(data: *mut core::ffi::c_void) -> isize>,
}
impl Default for kiocb__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for kiocb {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct address_space_operations {
    pub writepage: ::core::option::Option<
        unsafe extern "C" fn(page: *mut page, wbc: *mut writeback_control) -> core::ffi::c_int,
    >,
    pub read_folio: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: *mut folio) -> core::ffi::c_int,
    >,
    pub writepages: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut address_space,
            arg2: *mut writeback_control,
        ) -> core::ffi::c_int,
    >,
    pub dirty_folio: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut address_space, arg2: *mut folio) -> bool_,
    >,
    pub readahead: ::core::option::Option<unsafe extern "C" fn(arg1: *mut readahead_control)>,
    pub write_begin: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            mapping: *mut address_space,
            pos: loff_t,
            len: core::ffi::c_uint,
            pagep: *mut *mut page,
            fsdata: *mut *mut core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
    pub write_end: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            mapping: *mut address_space,
            pos: loff_t,
            len: core::ffi::c_uint,
            copied: core::ffi::c_uint,
            page: *mut page,
            fsdata: *mut core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
    pub bmap: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut address_space, arg2: sector_t) -> sector_t,
    >,
    pub invalidate_folio:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut folio, offset: usize, len: usize)>,
    pub release_folio:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut folio, arg2: gfp_t) -> bool_>,
    pub free_folio: ::core::option::Option<unsafe extern "C" fn(folio: *mut folio)>,
    pub direct_IO: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut kiocb, iter: *mut iov_iter) -> isize,
    >,
    pub migrate_folio: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut address_space,
            dst: *mut folio,
            src: *mut folio,
            arg2: migrate_mode,
        ) -> core::ffi::c_int,
    >,
    pub launder_folio:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut folio) -> core::ffi::c_int>,
    pub is_partially_uptodate: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut folio, from: usize, count: usize) -> bool_,
    >,
    pub is_dirty_writeback: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut folio, dirty: *mut bool_, wb: *mut bool_),
    >,
    pub error_remove_folio: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut address_space, arg2: *mut folio) -> core::ffi::c_int,
    >,
    pub swap_activate: ::core::option::Option<
        unsafe extern "C" fn(
            sis: *mut swap_info_struct,
            file: *mut file,
            span: *mut sector_t,
        ) -> core::ffi::c_int,
    >,
    pub swap_deactivate: ::core::option::Option<unsafe extern "C" fn(file: *mut file)>,
    pub swap_rw: ::core::option::Option<
        unsafe extern "C" fn(iocb: *mut kiocb, iter: *mut iov_iter) -> core::ffi::c_int,
    >,
}
extern "C" {
    pub static empty_aops: address_space_operations;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct address_space {
    pub host: *mut inode,
    pub i_pages: xarray,
    pub invalidate_lock: rw_semaphore,
    pub gfp_mask: gfp_t,
    pub i_mmap_writable: atomic_t,
    pub i_mmap: rb_root_cached,
    pub nrpages: core::ffi::c_ulong,
    pub writeback_index: core::ffi::c_ulong,
    pub a_ops: *const address_space_operations,
    pub flags: core::ffi::c_ulong,
    pub wb_err: errseq_t,
    pub i_private_lock: spinlock_t,
    pub i_private_list: list_head,
    pub i_mmap_rwsem: rw_semaphore,
    pub i_private_data: *mut core::ffi::c_void,
}
impl Default for address_space {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct posix_acl {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct inode {
    pub i_mode: umode_t,
    pub i_opflags: core::ffi::c_ushort,
    pub i_uid: kuid_t,
    pub i_gid: kgid_t,
    pub i_flags: core::ffi::c_uint,
    pub i_op: *const inode_operations,
    pub i_sb: *mut super_block,
    pub i_mapping: *mut address_space,
    pub i_ino: core::ffi::c_ulong,
    pub __bindgen_anon_1: inode__bindgen_ty_1,
    pub i_rdev: dev_t,
    pub i_size: loff_t,
    pub __i_atime: timespec64,
    pub __i_mtime: timespec64,
    pub __i_ctime: timespec64,
    pub i_lock: spinlock_t,
    pub i_bytes: core::ffi::c_ushort,
    pub i_blkbits: u8_,
    pub i_write_hint: rw_hint,
    pub i_blocks: blkcnt_t,
    pub i_state: core::ffi::c_ulong,
    pub i_rwsem: rw_semaphore,
    pub dirtied_when: core::ffi::c_ulong,
    pub dirtied_time_when: core::ffi::c_ulong,
    pub i_hash: hlist_node,
    pub i_io_list: list_head,
    pub i_lru: list_head,
    pub i_sb_list: list_head,
    pub i_wb_list: list_head,
    pub __bindgen_anon_2: inode__bindgen_ty_2,
    pub i_version: atomic64_t,
    pub i_sequence: atomic64_t,
    pub i_count: atomic_t,
    pub i_dio_count: atomic_t,
    pub i_writecount: atomic_t,
    pub i_readcount: atomic_t,
    pub __bindgen_anon_3: inode__bindgen_ty_3,
    pub i_flctx: *mut file_lock_context,
    pub i_data: address_space,
    pub i_devices: list_head,
    pub __bindgen_anon_4: inode__bindgen_ty_4,
    pub i_generation: __u32,
    pub i_private: *mut core::ffi::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inode__bindgen_ty_1 {
    pub i_nlink: core::ffi::c_uint,
    pub __i_nlink: core::ffi::c_uint,
}
impl Default for inode__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inode__bindgen_ty_2 {
    pub i_dentry: hlist_head,
    pub i_rcu: callback_head,
}
impl Default for inode__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inode__bindgen_ty_3 {
    pub i_fop: *const file_operations,
    pub free_inode: ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode)>,
}
impl Default for inode__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inode__bindgen_ty_4 {
    pub i_pipe: *mut pipe_inode_info,
    pub i_cdev: *mut cdev,
    pub i_link: *mut core::ffi::c_char,
    pub i_dir_seq: core::ffi::c_uint,
}
impl Default for inode__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for inode {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn timestamp_truncate(t: timespec64, inode: *mut inode) -> timespec64;
}
pub const inode_i_mutex_lock_class_I_MUTEX_NORMAL: inode_i_mutex_lock_class = 0;
pub const inode_i_mutex_lock_class_I_MUTEX_PARENT: inode_i_mutex_lock_class = 1;
pub const inode_i_mutex_lock_class_I_MUTEX_CHILD: inode_i_mutex_lock_class = 2;
pub const inode_i_mutex_lock_class_I_MUTEX_XATTR: inode_i_mutex_lock_class = 3;
pub const inode_i_mutex_lock_class_I_MUTEX_NONDIR2: inode_i_mutex_lock_class = 4;
pub const inode_i_mutex_lock_class_I_MUTEX_PARENT2: inode_i_mutex_lock_class = 5;
pub type inode_i_mutex_lock_class = core::ffi::c_uint;
extern "C" {
    pub fn lock_two_nondirectories(arg1: *mut inode, arg2: *mut inode);
}
extern "C" {
    pub fn unlock_two_nondirectories(arg1: *mut inode, arg2: *mut inode);
}
extern "C" {
    pub fn filemap_invalidate_lock_two(mapping1: *mut address_space, mapping2: *mut address_space);
}
extern "C" {
    pub fn filemap_invalidate_unlock_two(
        mapping1: *mut address_space,
        mapping2: *mut address_space,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fown_struct {
    pub lock: rwlock_t,
    pub pid: *mut pid,
    pub pid_type: pid_type,
    pub uid: kuid_t,
    pub euid: kuid_t,
    pub signum: core::ffi::c_int,
}
impl Default for fown_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct file_ra_state {
    pub start: core::ffi::c_ulong,
    pub size: core::ffi::c_uint,
    pub async_size: core::ffi::c_uint,
    pub ra_pages: core::ffi::c_uint,
    pub mmap_miss: core::ffi::c_uint,
    pub prev_pos: loff_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct file {
    pub __bindgen_anon_1: file__bindgen_ty_1,
    pub f_lock: spinlock_t,
    pub f_mode: fmode_t,
    pub f_count: atomic_long_t,
    pub f_pos_lock: mutex,
    pub f_pos: loff_t,
    pub f_flags: core::ffi::c_uint,
    pub f_owner: fown_struct,
    pub f_cred: *const cred,
    pub f_ra: file_ra_state,
    pub f_path: path,
    pub f_inode: *mut inode,
    pub f_op: *const file_operations,
    pub f_version: u64_,
    pub private_data: *mut core::ffi::c_void,
    pub f_ep: *mut hlist_head,
    pub f_mapping: *mut address_space,
    pub f_wb_err: errseq_t,
    pub f_sb_err: errseq_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union file__bindgen_ty_1 {
    pub f_task_work: callback_head,
    pub f_llist: llist_node,
    pub f_iocb_flags: core::ffi::c_uint,
}
impl Default for file__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for file {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct file_handle {
    pub handle_bytes: __u32,
    pub handle_type: core::ffi::c_int,
    pub f_handle: __IncompleteArrayField<core::ffi::c_uchar>,
}
extern "C" {
    pub fn get_file_rcu(f: *mut *mut file) -> *mut file;
}
extern "C" {
    pub fn get_file_active(f: *mut *mut file) -> *mut file;
}
pub type fl_owner_t = *mut core::ffi::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct file_lock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct file_lease {
    _unused: [u8; 0],
}
extern "C" {
    pub fn send_sigio(fown: *mut fown_struct, fd: core::ffi::c_int, band: core::ffi::c_int);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fasync_struct {
    pub fa_lock: rwlock_t,
    pub magic: core::ffi::c_int,
    pub fa_fd: core::ffi::c_int,
    pub fa_next: *mut fasync_struct,
    pub fa_file: *mut file,
    pub fa_rcu: callback_head,
}
impl Default for fasync_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn fasync_helper(
        arg1: core::ffi::c_int,
        arg2: *mut file,
        arg3: core::ffi::c_int,
        arg4: *mut *mut fasync_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn fasync_insert_entry(
        arg1: core::ffi::c_int,
        arg2: *mut file,
        arg3: *mut *mut fasync_struct,
        arg4: *mut fasync_struct,
    ) -> *mut fasync_struct;
}
extern "C" {
    pub fn fasync_remove_entry(arg1: *mut file, arg2: *mut *mut fasync_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn fasync_alloc() -> *mut fasync_struct;
}
extern "C" {
    pub fn fasync_free(arg1: *mut fasync_struct);
}
extern "C" {
    pub fn kill_fasync(
        arg1: *mut *mut fasync_struct,
        arg2: core::ffi::c_int,
        arg3: core::ffi::c_int,
    );
}
extern "C" {
    pub fn __f_setown(filp: *mut file, arg1: *mut pid, arg2: pid_type, force: core::ffi::c_int);
}
extern "C" {
    pub fn f_setown(
        filp: *mut file,
        who: core::ffi::c_int,
        force: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn f_delown(filp: *mut file);
}
extern "C" {
    pub fn f_getown(filp: *mut file) -> pid_t;
}
extern "C" {
    pub fn send_sigurg(fown: *mut fown_struct) -> core::ffi::c_int;
}
pub const SB_UNFROZEN: _bindgen_ty_88 = 0;
pub const SB_FREEZE_WRITE: _bindgen_ty_88 = 1;
pub const SB_FREEZE_PAGEFAULT: _bindgen_ty_88 = 2;
pub const SB_FREEZE_FS: _bindgen_ty_88 = 3;
pub const SB_FREEZE_COMPLETE: _bindgen_ty_88 = 4;
pub type _bindgen_ty_88 = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sb_writers {
    pub frozen: core::ffi::c_ushort,
    pub freeze_kcount: core::ffi::c_int,
    pub freeze_ucount: core::ffi::c_int,
    pub rw_sem: [percpu_rw_semaphore; 3usize],
}
impl Default for sb_writers {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct super_block {
    pub s_list: list_head,
    pub s_dev: dev_t,
    pub s_blocksize_bits: core::ffi::c_uchar,
    pub s_blocksize: core::ffi::c_ulong,
    pub s_maxbytes: loff_t,
    pub s_type: *mut file_system_type,
    pub s_op: *const super_operations,
    pub dq_op: *const dquot_operations,
    pub s_qcop: *const quotactl_ops,
    pub s_export_op: *const export_operations,
    pub s_flags: core::ffi::c_ulong,
    pub s_iflags: core::ffi::c_ulong,
    pub s_magic: core::ffi::c_ulong,
    pub s_root: *mut dentry,
    pub s_umount: rw_semaphore,
    pub s_count: core::ffi::c_int,
    pub s_active: atomic_t,
    pub s_xattr: *const *mut xattr_handler,
    pub s_roots: hlist_bl_head,
    pub s_mounts: list_head,
    pub s_bdev: *mut block_device,
    pub s_bdev_file: *mut file,
    pub s_bdi: *mut backing_dev_info,
    pub s_mtd: *mut mtd_info,
    pub s_instances: hlist_node,
    pub s_quota_types: core::ffi::c_uint,
    pub s_dquot: quota_info,
    pub s_writers: sb_writers,
    pub s_fs_info: *mut core::ffi::c_void,
    pub s_time_gran: u32_,
    pub s_time_min: time64_t,
    pub s_time_max: time64_t,
    pub s_id: [core::ffi::c_char; 32usize],
    pub s_uuid: uuid_t,
    pub s_uuid_len: u8_,
    pub s_sysfs_name: [core::ffi::c_char; 37usize],
    pub s_max_links: core::ffi::c_uint,
    pub s_vfs_rename_mutex: mutex,
    pub s_subtype: *const core::ffi::c_char,
    pub s_d_op: *const dentry_operations,
    pub s_shrink: *mut shrinker,
    pub s_remove_count: atomic_long_t,
    pub s_readonly_remount: core::ffi::c_int,
    pub s_wb_err: errseq_t,
    pub s_dio_done_wq: *mut workqueue_struct,
    pub s_pins: hlist_head,
    pub s_user_ns: *mut user_namespace,
    pub s_dentry_lru: list_lru,
    pub s_inode_lru: list_lru,
    pub rcu: callback_head,
    pub destroy_work: work_struct,
    pub s_sync_lock: mutex,
    pub s_stack_depth: core::ffi::c_int,
    pub __bindgen_padding_0: [u32; 7usize],
    pub s_inode_list_lock: spinlock_t,
    pub s_inodes: list_head,
    pub s_inode_wblist_lock: spinlock_t,
    pub s_inodes_wb: list_head,
}
impl Default for super_block {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn current_time(inode: *mut inode) -> timespec64;
}
extern "C" {
    pub fn inode_set_ctime_current(inode: *mut inode) -> timespec64;
}
extern "C" {
    pub fn simple_inode_init_ts(inode: *mut inode) -> timespec64;
}
extern "C" {
    pub fn inode_owner_or_capable(idmap: *mut mnt_idmap, inode: *const inode) -> bool_;
}
extern "C" {
    pub fn vfs_create(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: *mut dentry,
        arg4: umode_t,
        arg5: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_mkdir(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: *mut dentry,
        arg4: umode_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_mknod(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: *mut dentry,
        arg4: umode_t,
        arg5: dev_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_symlink(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: *mut dentry,
        arg4: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_link(
        arg1: *mut dentry,
        arg2: *mut mnt_idmap,
        arg3: *mut inode,
        arg4: *mut dentry,
        arg5: *mut *mut inode,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_rmdir(arg1: *mut mnt_idmap, arg2: *mut inode, arg3: *mut dentry)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_unlink(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: *mut dentry,
        arg4: *mut *mut inode,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct renamedata {
    pub old_mnt_idmap: *mut mnt_idmap,
    pub old_dir: *mut inode,
    pub old_dentry: *mut dentry,
    pub new_mnt_idmap: *mut mnt_idmap,
    pub new_dir: *mut inode,
    pub new_dentry: *mut dentry,
    pub delegated_inode: *mut *mut inode,
    pub flags: core::ffi::c_uint,
}
impl Default for renamedata {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn vfs_rename(arg1: *mut renamedata) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernel_tmpfile_open(
        idmap: *mut mnt_idmap,
        parentpath: *const path,
        mode: umode_t,
        open_flag: core::ffi::c_int,
        cred: *const cred,
    ) -> *mut file;
}
extern "C" {
    pub fn kernel_file_open(
        path: *const path,
        flags: core::ffi::c_int,
        cred: *const cred,
    ) -> *mut file;
}
extern "C" {
    pub fn vfs_mkobj(
        arg1: *mut dentry,
        arg2: umode_t,
        f: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut dentry,
                arg2: umode_t,
                arg3: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        arg3: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_fchown(file: *mut file, user: uid_t, group: gid_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_fchmod(file: *mut file, mode: umode_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_utimes(path: *const path, times: *mut timespec64) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_ioctl(
        file: *mut file,
        cmd: core::ffi::c_uint,
        arg: core::ffi::c_ulong,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn inode_init_owner(
        idmap: *mut mnt_idmap,
        inode: *mut inode,
        dir: *const inode,
        mode: umode_t,
    );
}
extern "C" {
    pub fn may_open_dev(path: *const path) -> bool_;
}
extern "C" {
    pub fn mode_strip_sgid(idmap: *mut mnt_idmap, dir: *const inode, mode: umode_t) -> umode_t;
}
pub type filldir_t = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut dir_context,
        arg2: *const core::ffi::c_char,
        arg3: core::ffi::c_int,
        arg4: loff_t,
        arg5: u64_,
        arg6: core::ffi::c_uint,
    ) -> bool_,
>;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct dir_context {
    pub actor: filldir_t,
    pub pos: loff_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_uring_cmd {
    _unused: [u8; 0],
}
pub type fop_flags_t = core::ffi::c_uint;
extern "C" {
    pub fn wrap_directory_iterator(
        arg1: *mut file,
        arg2: *mut dir_context,
        arg3: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut file, arg2: *mut dir_context) -> core::ffi::c_int,
        >,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct inode_operations {
    pub lookup: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut inode,
            arg2: *mut dentry,
            arg3: core::ffi::c_uint,
        ) -> *mut dentry,
    >,
    pub get_link: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut dentry,
            arg2: *mut inode,
            arg3: *mut delayed_call,
        ) -> *const core::ffi::c_char,
    >,
    pub permission: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub get_inode_acl: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut inode,
            arg2: core::ffi::c_int,
            arg3: bool_,
        ) -> *mut posix_acl,
    >,
    pub readlink: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut dentry,
            arg2: *mut core::ffi::c_char,
            arg3: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub create: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: umode_t,
            arg5: bool_,
        ) -> core::ffi::c_int,
    >,
    pub link: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut dentry,
            arg2: *mut inode,
            arg3: *mut dentry,
        ) -> core::ffi::c_int,
    >,
    pub unlink: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut dentry) -> core::ffi::c_int,
    >,
    pub symlink: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: *const core::ffi::c_char,
        ) -> core::ffi::c_int,
    >,
    pub mkdir: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: umode_t,
        ) -> core::ffi::c_int,
    >,
    pub rmdir: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut dentry) -> core::ffi::c_int,
    >,
    pub mknod: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: umode_t,
            arg5: dev_t,
        ) -> core::ffi::c_int,
    >,
    pub rename: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: *mut inode,
            arg5: *mut dentry,
            arg6: core::ffi::c_uint,
        ) -> core::ffi::c_int,
    >,
    pub setattr: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut dentry,
            arg3: *mut iattr,
        ) -> core::ffi::c_int,
    >,
    pub getattr: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *const path,
            arg3: *mut kstat,
            arg4: u32_,
            arg5: core::ffi::c_uint,
        ) -> core::ffi::c_int,
    >,
    pub listxattr: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut dentry, arg2: *mut core::ffi::c_char, arg3: usize) -> isize,
    >,
    pub fiemap: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut inode,
            arg2: *mut fiemap_extent_info,
            start: u64_,
            len: u64_,
        ) -> core::ffi::c_int,
    >,
    pub update_time: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub atomic_open: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut inode,
            arg2: *mut dentry,
            arg3: *mut file,
            open_flag: core::ffi::c_uint,
            create_mode: umode_t,
        ) -> core::ffi::c_int,
    >,
    pub tmpfile: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut inode,
            arg3: *mut file,
            arg4: umode_t,
        ) -> core::ffi::c_int,
    >,
    pub get_acl: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut dentry,
            arg3: core::ffi::c_int,
        ) -> *mut posix_acl,
    >,
    pub set_acl: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mnt_idmap,
            arg2: *mut dentry,
            arg3: *mut posix_acl,
            arg4: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub fileattr_set: ::core::option::Option<
        unsafe extern "C" fn(
            idmap: *mut mnt_idmap,
            dentry: *mut dentry,
            fa: *mut fileattr,
        ) -> core::ffi::c_int,
    >,
    pub fileattr_get: ::core::option::Option<
        unsafe extern "C" fn(dentry: *mut dentry, fa: *mut fileattr) -> core::ffi::c_int,
    >,
    pub get_offset_ctx:
        ::core::option::Option<unsafe extern "C" fn(inode: *mut inode) -> *mut offset_ctx>,
}
impl Default for inode_operations {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn vfs_read(
        arg1: *mut file,
        arg2: *mut core::ffi::c_char,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn vfs_write(
        arg1: *mut file,
        arg2: *const core::ffi::c_char,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn vfs_copy_file_range(
        arg1: *mut file,
        arg2: loff_t,
        arg3: *mut file,
        arg4: loff_t,
        arg5: usize,
        arg6: core::ffi::c_uint,
    ) -> isize;
}
extern "C" {
    pub fn remap_verify_area(
        file: *mut file,
        pos: loff_t,
        len: loff_t,
        write: bool_,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __generic_remap_file_range_prep(
        file_in: *mut file,
        pos_in: loff_t,
        file_out: *mut file,
        pos_out: loff_t,
        len: *mut loff_t,
        remap_flags: core::ffi::c_uint,
        dax_read_ops: *const iomap_ops,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_remap_file_range_prep(
        file_in: *mut file,
        pos_in: loff_t,
        file_out: *mut file,
        pos_out: loff_t,
        count: *mut loff_t,
        remap_flags: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_clone_file_range(
        file_in: *mut file,
        pos_in: loff_t,
        file_out: *mut file,
        pos_out: loff_t,
        len: loff_t,
        remap_flags: core::ffi::c_uint,
    ) -> loff_t;
}
extern "C" {
    pub fn vfs_dedupe_file_range(file: *mut file, same: *mut file_dedupe_range)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_dedupe_file_range_one(
        src_file: *mut file,
        src_pos: loff_t,
        dst_file: *mut file,
        dst_pos: loff_t,
        len: loff_t,
        remap_flags: core::ffi::c_uint,
    ) -> loff_t;
}
pub const freeze_holder_FREEZE_HOLDER_KERNEL: freeze_holder = 1;
pub const freeze_holder_FREEZE_HOLDER_USERSPACE: freeze_holder = 2;
pub const freeze_holder_FREEZE_MAY_NEST: freeze_holder = 4;
pub type freeze_holder = core::ffi::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct super_operations {
    pub alloc_inode:
        ::core::option::Option<unsafe extern "C" fn(sb: *mut super_block) -> *mut inode>,
    pub destroy_inode: ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode)>,
    pub free_inode: ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode)>,
    pub dirty_inode:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode, flags: core::ffi::c_int)>,
    pub write_inode: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, wbc: *mut writeback_control) -> core::ffi::c_int,
    >,
    pub drop_inode:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode) -> core::ffi::c_int>,
    pub evict_inode: ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode)>,
    pub put_super: ::core::option::Option<unsafe extern "C" fn(arg1: *mut super_block)>,
    pub sync_fs: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, wait: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub freeze_super: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, who: freeze_holder) -> core::ffi::c_int,
    >,
    pub freeze_fs:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut super_block) -> core::ffi::c_int>,
    pub thaw_super: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, who: freeze_holder) -> core::ffi::c_int,
    >,
    pub unfreeze_fs:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut super_block) -> core::ffi::c_int>,
    pub statfs: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut dentry, arg2: *mut kstatfs) -> core::ffi::c_int,
    >,
    pub remount_fs: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: *mut core::ffi::c_int,
            arg3: *mut core::ffi::c_char,
        ) -> core::ffi::c_int,
    >,
    pub umount_begin: ::core::option::Option<unsafe extern "C" fn(arg1: *mut super_block)>,
    pub show_options: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut seq_file, arg2: *mut dentry) -> core::ffi::c_int,
    >,
    pub show_devname: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut seq_file, arg2: *mut dentry) -> core::ffi::c_int,
    >,
    pub show_path: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut seq_file, arg2: *mut dentry) -> core::ffi::c_int,
    >,
    pub show_stats: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut seq_file, arg2: *mut dentry) -> core::ffi::c_int,
    >,
    pub nr_cached_objects: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: *mut shrink_control,
        ) -> core::ffi::c_long,
    >,
    pub free_cached_objects: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: *mut shrink_control,
        ) -> core::ffi::c_long,
    >,
    pub shutdown: ::core::option::Option<unsafe extern "C" fn(sb: *mut super_block)>,
}
extern "C" {
    pub fn __mark_inode_dirty(arg1: *mut inode, arg2: core::ffi::c_int);
}
extern "C" {
    pub fn inc_nlink(inode: *mut inode);
}
extern "C" {
    pub fn drop_nlink(inode: *mut inode);
}
extern "C" {
    pub fn clear_nlink(inode: *mut inode);
}
extern "C" {
    pub fn set_nlink(inode: *mut inode, nlink: core::ffi::c_uint);
}
pub const file_time_flags_S_ATIME: file_time_flags = 1;
pub const file_time_flags_S_MTIME: file_time_flags = 2;
pub const file_time_flags_S_CTIME: file_time_flags = 4;
pub const file_time_flags_S_VERSION: file_time_flags = 8;
pub type file_time_flags = core::ffi::c_uint;
extern "C" {
    pub fn atime_needs_update(arg1: *const path, arg2: *mut inode) -> bool_;
}
extern "C" {
    pub fn touch_atime(arg1: *const path);
}
extern "C" {
    pub fn inode_update_time(inode: *mut inode, flags: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn file_modified(file: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn kiocb_modified(iocb: *mut kiocb) -> core::ffi::c_int;
}
extern "C" {
    pub fn sync_inode_metadata(inode: *mut inode, wait: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn mount_bdev(
        fs_type: *mut file_system_type,
        flags: core::ffi::c_int,
        dev_name: *const core::ffi::c_char,
        data: *mut core::ffi::c_void,
        fill_super: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut super_block,
                arg2: *mut core::ffi::c_void,
                arg3: core::ffi::c_int,
            ) -> core::ffi::c_int,
        >,
    ) -> *mut dentry;
}
extern "C" {
    pub fn mount_single(
        fs_type: *mut file_system_type,
        flags: core::ffi::c_int,
        data: *mut core::ffi::c_void,
        fill_super: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut super_block,
                arg2: *mut core::ffi::c_void,
                arg3: core::ffi::c_int,
            ) -> core::ffi::c_int,
        >,
    ) -> *mut dentry;
}
extern "C" {
    pub fn mount_nodev(
        fs_type: *mut file_system_type,
        flags: core::ffi::c_int,
        data: *mut core::ffi::c_void,
        fill_super: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut super_block,
                arg2: *mut core::ffi::c_void,
                arg3: core::ffi::c_int,
            ) -> core::ffi::c_int,
        >,
    ) -> *mut dentry;
}
extern "C" {
    pub fn mount_subtree(mnt: *mut vfsmount, path: *const core::ffi::c_char) -> *mut dentry;
}
extern "C" {
    pub fn retire_super(sb: *mut super_block);
}
extern "C" {
    pub fn generic_shutdown_super(sb: *mut super_block);
}
extern "C" {
    pub fn kill_block_super(sb: *mut super_block);
}
extern "C" {
    pub fn kill_anon_super(sb: *mut super_block);
}
extern "C" {
    pub fn kill_litter_super(sb: *mut super_block);
}
extern "C" {
    pub fn deactivate_super(sb: *mut super_block);
}
extern "C" {
    pub fn deactivate_locked_super(sb: *mut super_block);
}
extern "C" {
    pub fn set_anon_super(s: *mut super_block, data: *mut core::ffi::c_void) -> core::ffi::c_int;
}
extern "C" {
    pub fn set_anon_super_fc(s: *mut super_block, fc: *mut fs_context) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_anon_bdev(arg1: *mut dev_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn free_anon_bdev(arg1: dev_t);
}
extern "C" {
    pub fn sget_fc(
        fc: *mut fs_context,
        test: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut super_block, arg2: *mut fs_context) -> core::ffi::c_int,
        >,
        set: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut super_block, arg2: *mut fs_context) -> core::ffi::c_int,
        >,
    ) -> *mut super_block;
}
extern "C" {
    pub fn sget(
        type_: *mut file_system_type,
        test: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut super_block,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        set: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut super_block,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        flags: core::ffi::c_int,
        data: *mut core::ffi::c_void,
    ) -> *mut super_block;
}
extern "C" {
    pub fn sget_dev(fc: *mut fs_context, dev: dev_t) -> *mut super_block;
}
extern "C" {
    pub fn register_filesystem(arg1: *mut file_system_type) -> core::ffi::c_int;
}
extern "C" {
    pub fn unregister_filesystem(arg1: *mut file_system_type) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_statfs(arg1: *const path, arg2: *mut kstatfs) -> core::ffi::c_int;
}
extern "C" {
    pub fn user_statfs(arg1: *const core::ffi::c_char, arg2: *mut kstatfs) -> core::ffi::c_int;
}
extern "C" {
    pub fn fd_statfs(arg1: core::ffi::c_int, arg2: *mut kstatfs) -> core::ffi::c_int;
}
extern "C" {
    pub fn freeze_super(super_: *mut super_block, who: freeze_holder) -> core::ffi::c_int;
}
extern "C" {
    pub fn thaw_super(super_: *mut super_block, who: freeze_holder) -> core::ffi::c_int;
}
extern "C" {
    pub fn super_setup_bdi_name(
        sb: *mut super_block,
        fmt: *mut core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn super_setup_bdi(sb: *mut super_block) -> core::ffi::c_int;
}
extern "C" {
    pub fn current_umask() -> core::ffi::c_int;
}
extern "C" {
    pub fn ihold(inode: *mut inode);
}
extern "C" {
    pub fn iput(arg1: *mut inode);
}
extern "C" {
    pub fn inode_update_timestamps(inode: *mut inode, flags: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_update_time(arg1: *mut inode, arg2: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub static mut fs_kobj: *mut kobject;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct audit_names {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct filename {
    pub name: *const core::ffi::c_char,
    pub uptr: *const core::ffi::c_char,
    pub refcnt: atomic_t,
    pub aname: *mut audit_names,
    pub iname: __IncompleteArrayField<core::ffi::c_char>,
}
impl Default for filename {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn vfs_truncate(arg1: *const path, arg2: loff_t) -> core::ffi::c_long;
}
extern "C" {
    pub fn do_truncate(
        arg1: *mut mnt_idmap,
        arg2: *mut dentry,
        start: loff_t,
        time_attrs: core::ffi::c_uint,
        filp: *mut file,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_fallocate(
        file: *mut file,
        mode: core::ffi::c_int,
        offset: loff_t,
        len: loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_sys_open(
        dfd: core::ffi::c_int,
        filename: *const core::ffi::c_char,
        flags: core::ffi::c_int,
        mode: umode_t,
    ) -> core::ffi::c_long;
}
extern "C" {
    pub fn file_open_name(arg1: *mut filename, arg2: core::ffi::c_int, arg3: umode_t) -> *mut file;
}
extern "C" {
    pub fn filp_open(
        arg1: *const core::ffi::c_char,
        arg2: core::ffi::c_int,
        arg3: umode_t,
    ) -> *mut file;
}
extern "C" {
    pub fn file_open_root(
        arg1: *const path,
        arg2: *const core::ffi::c_char,
        arg3: core::ffi::c_int,
        arg4: umode_t,
    ) -> *mut file;
}
extern "C" {
    pub fn dentry_open(path: *const path, flags: core::ffi::c_int, creds: *const cred)
        -> *mut file;
}
extern "C" {
    pub fn dentry_create(
        path: *const path,
        flags: core::ffi::c_int,
        mode: umode_t,
        cred: *const cred,
    ) -> *mut file;
}
extern "C" {
    pub fn backing_file_user_path(f: *mut file) -> *mut path;
}
extern "C" {
    pub fn filp_close(arg1: *mut file, id: fl_owner_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn getname_flags(
        arg1: *const core::ffi::c_char,
        arg2: core::ffi::c_int,
        arg3: *mut core::ffi::c_int,
    ) -> *mut filename;
}
extern "C" {
    pub fn getname_uflags(arg1: *const core::ffi::c_char, arg2: core::ffi::c_int) -> *mut filename;
}
extern "C" {
    pub fn getname(arg1: *const core::ffi::c_char) -> *mut filename;
}
extern "C" {
    pub fn getname_kernel(arg1: *const core::ffi::c_char) -> *mut filename;
}
extern "C" {
    pub fn putname(name: *mut filename);
}
extern "C" {
    pub fn finish_open(
        file: *mut file,
        dentry: *mut dentry,
        open: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut inode, arg2: *mut file) -> core::ffi::c_int,
        >,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn finish_no_open(file: *mut file, dentry: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_caches_init_early();
}
extern "C" {
    pub fn vfs_caches_init();
}
extern "C" {
    pub static mut names_cachep: *mut kmem_cache;
}
extern "C" {
    pub static mut blockdev_superblock: *mut super_block;
}
extern "C" {
    pub fn emergency_thaw_all();
}
extern "C" {
    pub fn sync_filesystem(arg1: *mut super_block) -> core::ffi::c_int;
}
extern "C" {
    pub static def_blk_fops: file_operations;
}
extern "C" {
    pub static def_chr_fops: file_operations;
}
extern "C" {
    pub fn alloc_chrdev_region(
        arg1: *mut dev_t,
        arg2: core::ffi::c_uint,
        arg3: core::ffi::c_uint,
        arg4: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn register_chrdev_region(
        arg1: dev_t,
        arg2: core::ffi::c_uint,
        arg3: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __register_chrdev(
        major: core::ffi::c_uint,
        baseminor: core::ffi::c_uint,
        count: core::ffi::c_uint,
        name: *const core::ffi::c_char,
        fops: *const file_operations,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __unregister_chrdev(
        major: core::ffi::c_uint,
        baseminor: core::ffi::c_uint,
        count: core::ffi::c_uint,
        name: *const core::ffi::c_char,
    );
}
extern "C" {
    pub fn unregister_chrdev_region(arg1: dev_t, arg2: core::ffi::c_uint);
}
extern "C" {
    pub fn chrdev_show(arg1: *mut seq_file, arg2: off_t);
}
extern "C" {
    pub fn init_special_inode(arg1: *mut inode, arg2: umode_t, arg3: dev_t);
}
extern "C" {
    pub fn make_bad_inode(arg1: *mut inode);
}
extern "C" {
    pub fn is_bad_inode(arg1: *mut inode) -> bool_;
}
extern "C" {
    pub fn file_fdatawait_range(file: *mut file, lstart: loff_t, lend: loff_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn file_check_and_advance_wb_err(file: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn file_write_and_wait_range(
        file: *mut file,
        start: loff_t,
        end: loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_fsync_range(
        file: *mut file,
        start: loff_t,
        end: loff_t,
        datasync: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_fsync(file: *mut file, datasync: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn sync_file_range(
        file: *mut file,
        offset: loff_t,
        nbytes: loff_t,
        flags: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn emergency_sync();
}
extern "C" {
    pub fn emergency_remount();
}
extern "C" {
    pub fn bmap(inode: *mut inode, block: *mut sector_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn notify_change(
        arg1: *mut mnt_idmap,
        arg2: *mut dentry,
        arg3: *mut iattr,
        arg4: *mut *mut inode,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn inode_permission(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_permission(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __check_sticky(
        idmap: *mut mnt_idmap,
        dir: *mut inode,
        inode: *mut inode,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn do_pipe_flags(arg1: *mut core::ffi::c_int, arg2: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn kernel_read(
        arg1: *mut file,
        arg2: *mut core::ffi::c_void,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn __kernel_read(
        file: *mut file,
        buf: *mut core::ffi::c_void,
        count: usize,
        pos: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn kernel_write(
        arg1: *mut file,
        arg2: *const core::ffi::c_void,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn __kernel_write(
        arg1: *mut file,
        arg2: *const core::ffi::c_void,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn open_exec(arg1: *const core::ffi::c_char) -> *mut file;
}
extern "C" {
    pub fn is_subdir(arg1: *mut dentry, arg2: *mut dentry) -> bool_;
}
extern "C" {
    pub fn path_is_under(arg1: *const path, arg2: *const path) -> bool_;
}
extern "C" {
    pub fn file_path(
        arg1: *mut file,
        arg2: *mut core::ffi::c_char,
        arg3: core::ffi::c_int,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn default_llseek(file: *mut file, offset: loff_t, whence: core::ffi::c_int) -> loff_t;
}
extern "C" {
    pub fn vfs_llseek(file: *mut file, offset: loff_t, whence: core::ffi::c_int) -> loff_t;
}
extern "C" {
    pub fn inode_init_always(arg1: *mut super_block, arg2: *mut inode) -> core::ffi::c_int;
}
extern "C" {
    pub fn inode_init_once(arg1: *mut inode);
}
extern "C" {
    pub fn address_space_init_once(mapping: *mut address_space);
}
extern "C" {
    pub fn igrab(arg1: *mut inode) -> *mut inode;
}
extern "C" {
    pub fn iunique(arg1: *mut super_block, arg2: ino_t) -> ino_t;
}
extern "C" {
    pub fn inode_needs_sync(inode: *mut inode) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_delete_inode(inode: *mut inode) -> core::ffi::c_int;
}
extern "C" {
    pub fn d_mark_dontcache(inode: *mut inode);
}
extern "C" {
    pub fn ilookup5_nowait(
        sb: *mut super_block,
        hashval: core::ffi::c_ulong,
        test: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        data: *mut core::ffi::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn ilookup5(
        sb: *mut super_block,
        hashval: core::ffi::c_ulong,
        test: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        data: *mut core::ffi::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn ilookup(sb: *mut super_block, ino: core::ffi::c_ulong) -> *mut inode;
}
extern "C" {
    pub fn inode_insert5(
        inode: *mut inode,
        hashval: core::ffi::c_ulong,
        test: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        set: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        data: *mut core::ffi::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn iget5_locked(
        arg1: *mut super_block,
        arg2: core::ffi::c_ulong,
        test: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        set: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        arg3: *mut core::ffi::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn iget_locked(arg1: *mut super_block, arg2: core::ffi::c_ulong) -> *mut inode;
}
extern "C" {
    pub fn find_inode_nowait(
        arg1: *mut super_block,
        arg2: core::ffi::c_ulong,
        match_: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: core::ffi::c_ulong,
                arg3: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        data: *mut core::ffi::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn find_inode_rcu(
        arg1: *mut super_block,
        arg2: core::ffi::c_ulong,
        arg3: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        arg4: *mut core::ffi::c_void,
    ) -> *mut inode;
}
extern "C" {
    pub fn find_inode_by_ino_rcu(arg1: *mut super_block, arg2: core::ffi::c_ulong) -> *mut inode;
}
extern "C" {
    pub fn insert_inode_locked4(
        arg1: *mut inode,
        arg2: core::ffi::c_ulong,
        test: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut inode,
                arg2: *mut core::ffi::c_void,
            ) -> core::ffi::c_int,
        >,
        arg3: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn insert_inode_locked(arg1: *mut inode) -> core::ffi::c_int;
}
extern "C" {
    pub fn unlock_new_inode(arg1: *mut inode);
}
extern "C" {
    pub fn discard_new_inode(arg1: *mut inode);
}
extern "C" {
    pub fn get_next_ino() -> core::ffi::c_uint;
}
extern "C" {
    pub fn evict_inodes(sb: *mut super_block);
}
extern "C" {
    pub fn dump_mapping(arg1: *const address_space);
}
extern "C" {
    pub fn __iget(inode: *mut inode);
}
extern "C" {
    pub fn iget_failed(arg1: *mut inode);
}
extern "C" {
    pub fn clear_inode(arg1: *mut inode);
}
extern "C" {
    pub fn __destroy_inode(arg1: *mut inode);
}
extern "C" {
    pub fn new_inode_pseudo(sb: *mut super_block) -> *mut inode;
}
extern "C" {
    pub fn new_inode(sb: *mut super_block) -> *mut inode;
}
extern "C" {
    pub fn free_inode_nonrcu(inode: *mut inode);
}
extern "C" {
    pub fn setattr_should_drop_suidgid(arg1: *mut mnt_idmap, arg2: *mut inode) -> core::ffi::c_int;
}
extern "C" {
    pub fn file_remove_privs_flags(file: *mut file, flags: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn file_remove_privs(arg1: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn setattr_should_drop_sgid(idmap: *mut mnt_idmap, inode: *const inode)
        -> core::ffi::c_int;
}
extern "C" {
    pub fn __insert_inode_hash(arg1: *mut inode, hashval: core::ffi::c_ulong);
}
extern "C" {
    pub fn __remove_inode_hash(arg1: *mut inode);
}
extern "C" {
    pub fn inode_sb_list_add(inode: *mut inode);
}
extern "C" {
    pub fn inode_add_lru(inode: *mut inode);
}
extern "C" {
    pub fn sb_set_blocksize(arg1: *mut super_block, arg2: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn sb_min_blocksize(arg1: *mut super_block, arg2: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_file_mmap(arg1: *mut file, arg2: *mut vm_area_struct) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_file_readonly_mmap(
        arg1: *mut file,
        arg2: *mut vm_area_struct,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_write_checks(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn generic_write_checks_count(iocb: *mut kiocb, count: *mut loff_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_write_check_limits(
        file: *mut file,
        pos: loff_t,
        count: *mut loff_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_file_rw_checks(file_in: *mut file, file_out: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn filemap_read(iocb: *mut kiocb, to: *mut iov_iter, already_read: isize) -> isize;
}
extern "C" {
    pub fn generic_file_read_iter(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn __generic_file_write_iter(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn generic_file_write_iter(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn generic_file_direct_write(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn generic_perform_write(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn direct_write_fallback(
        iocb: *mut kiocb,
        iter: *mut iov_iter,
        direct_written: isize,
        buffered_written: isize,
    ) -> isize;
}
extern "C" {
    pub fn vfs_iter_read(
        file: *mut file,
        iter: *mut iov_iter,
        ppos: *mut loff_t,
        flags: rwf_t,
    ) -> isize;
}
extern "C" {
    pub fn vfs_iter_write(
        file: *mut file,
        iter: *mut iov_iter,
        ppos: *mut loff_t,
        flags: rwf_t,
    ) -> isize;
}
extern "C" {
    pub fn vfs_iocb_iter_read(file: *mut file, iocb: *mut kiocb, iter: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn vfs_iocb_iter_write(file: *mut file, iocb: *mut kiocb, iter: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn filemap_splice_read(
        in_: *mut file,
        ppos: *mut loff_t,
        pipe: *mut pipe_inode_info,
        len: usize,
        flags: core::ffi::c_uint,
    ) -> isize;
}
extern "C" {
    pub fn copy_splice_read(
        in_: *mut file,
        ppos: *mut loff_t,
        pipe: *mut pipe_inode_info,
        len: usize,
        flags: core::ffi::c_uint,
    ) -> isize;
}
extern "C" {
    pub fn iter_file_splice_write(
        arg1: *mut pipe_inode_info,
        arg2: *mut file,
        arg3: *mut loff_t,
        arg4: usize,
        arg5: core::ffi::c_uint,
    ) -> isize;
}
extern "C" {
    pub fn file_ra_state_init(ra: *mut file_ra_state, mapping: *mut address_space);
}
extern "C" {
    pub fn noop_llseek(file: *mut file, offset: loff_t, whence: core::ffi::c_int) -> loff_t;
}
extern "C" {
    pub fn vfs_setpos(file: *mut file, offset: loff_t, maxsize: loff_t) -> loff_t;
}
extern "C" {
    pub fn generic_file_llseek(file: *mut file, offset: loff_t, whence: core::ffi::c_int)
        -> loff_t;
}
extern "C" {
    pub fn generic_file_llseek_size(
        file: *mut file,
        offset: loff_t,
        whence: core::ffi::c_int,
        maxsize: loff_t,
        eof: loff_t,
    ) -> loff_t;
}
extern "C" {
    pub fn fixed_size_llseek(
        file: *mut file,
        offset: loff_t,
        whence: core::ffi::c_int,
        size: loff_t,
    ) -> loff_t;
}
extern "C" {
    pub fn no_seek_end_llseek_size(
        arg1: *mut file,
        arg2: loff_t,
        arg3: core::ffi::c_int,
        arg4: loff_t,
    ) -> loff_t;
}
extern "C" {
    pub fn no_seek_end_llseek(arg1: *mut file, arg2: loff_t, arg3: core::ffi::c_int) -> loff_t;
}
extern "C" {
    pub fn rw_verify_area(
        arg1: core::ffi::c_int,
        arg2: *mut file,
        arg3: *const loff_t,
        arg4: usize,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_file_open(inode: *mut inode, filp: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn nonseekable_open(inode: *mut inode, filp: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn stream_open(inode: *mut inode, filp: *mut file) -> core::ffi::c_int;
}
pub type dio_submit_t = ::core::option::Option<
    unsafe extern "C" fn(bio: *mut bio, inode: *mut inode, file_offset: loff_t),
>;
pub const DIO_LOCKING: _bindgen_ty_89 = 1;
pub const DIO_SKIP_HOLES: _bindgen_ty_89 = 2;
pub type _bindgen_ty_89 = core::ffi::c_uint;
extern "C" {
    pub fn __blockdev_direct_IO(
        iocb: *mut kiocb,
        inode: *mut inode,
        bdev: *mut block_device,
        iter: *mut iov_iter,
        get_block: get_block_t,
        end_io: dio_iodone_t,
        flags: core::ffi::c_int,
    ) -> isize;
}
extern "C" {
    pub fn inode_dio_wait(inode: *mut inode);
}
extern "C" {
    pub fn inode_set_flags(inode: *mut inode, flags: core::ffi::c_uint, mask: core::ffi::c_uint);
}
extern "C" {
    pub static generic_ro_fops: file_operations;
}
extern "C" {
    pub fn readlink_copy(
        arg1: *mut core::ffi::c_char,
        arg2: core::ffi::c_int,
        arg3: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn page_readlink(
        arg1: *mut dentry,
        arg2: *mut core::ffi::c_char,
        arg3: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn page_get_link(
        arg1: *mut dentry,
        arg2: *mut inode,
        arg3: *mut delayed_call,
    ) -> *const core::ffi::c_char;
}
extern "C" {
    pub fn page_put_link(arg1: *mut core::ffi::c_void);
}
extern "C" {
    pub fn page_symlink(
        inode: *mut inode,
        symname: *const core::ffi::c_char,
        len: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static page_symlink_inode_operations: inode_operations;
}
extern "C" {
    pub fn kfree_link(arg1: *mut core::ffi::c_void);
}
extern "C" {
    pub fn generic_fillattr(arg1: *mut mnt_idmap, arg2: u32_, arg3: *mut inode, arg4: *mut kstat);
}
extern "C" {
    pub fn generic_fill_statx_attr(inode: *mut inode, stat: *mut kstat);
}
extern "C" {
    pub fn vfs_getattr_nosec(
        arg1: *const path,
        arg2: *mut kstat,
        arg3: u32_,
        arg4: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_getattr(
        arg1: *const path,
        arg2: *mut kstat,
        arg3: u32_,
        arg4: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn __inode_add_bytes(inode: *mut inode, bytes: loff_t);
}
extern "C" {
    pub fn inode_add_bytes(inode: *mut inode, bytes: loff_t);
}
extern "C" {
    pub fn __inode_sub_bytes(inode: *mut inode, bytes: loff_t);
}
extern "C" {
    pub fn inode_sub_bytes(inode: *mut inode, bytes: loff_t);
}
extern "C" {
    pub fn inode_get_bytes(inode: *mut inode) -> loff_t;
}
extern "C" {
    pub fn inode_set_bytes(inode: *mut inode, bytes: loff_t);
}
extern "C" {
    pub fn simple_get_link(
        arg1: *mut dentry,
        arg2: *mut inode,
        arg3: *mut delayed_call,
    ) -> *const core::ffi::c_char;
}
extern "C" {
    pub static simple_symlink_inode_operations: inode_operations;
}
extern "C" {
    pub fn iterate_dir(arg1: *mut file, arg2: *mut dir_context) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_fstatat(
        dfd: core::ffi::c_int,
        filename: *const core::ffi::c_char,
        stat: *mut kstat,
        flags: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_fstat(fd: core::ffi::c_int, stat: *mut kstat) -> core::ffi::c_int;
}
extern "C" {
    pub fn vfs_get_link(arg1: *mut dentry, arg2: *mut delayed_call) -> *const core::ffi::c_char;
}
extern "C" {
    pub fn vfs_readlink(
        arg1: *mut dentry,
        arg2: *mut core::ffi::c_char,
        arg3: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn get_filesystem(fs: *mut file_system_type) -> *mut file_system_type;
}
extern "C" {
    pub fn put_filesystem(fs: *mut file_system_type);
}
extern "C" {
    pub fn get_fs_type(name: *const core::ffi::c_char) -> *mut file_system_type;
}
extern "C" {
    pub fn drop_super(sb: *mut super_block);
}
extern "C" {
    pub fn drop_super_exclusive(sb: *mut super_block);
}
extern "C" {
    pub fn iterate_supers(
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut super_block, arg2: *mut core::ffi::c_void),
        >,
        arg2: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn iterate_supers_type(
        arg1: *mut file_system_type,
        arg2: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut super_block, arg2: *mut core::ffi::c_void),
        >,
        arg3: *mut core::ffi::c_void,
    );
}
extern "C" {
    pub fn dcache_dir_open(arg1: *mut inode, arg2: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn dcache_dir_close(arg1: *mut inode, arg2: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn dcache_dir_lseek(arg1: *mut file, arg2: loff_t, arg3: core::ffi::c_int) -> loff_t;
}
extern "C" {
    pub fn dcache_readdir(arg1: *mut file, arg2: *mut dir_context) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_setattr(
        arg1: *mut mnt_idmap,
        arg2: *mut dentry,
        arg3: *mut iattr,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_getattr(
        arg1: *mut mnt_idmap,
        arg2: *const path,
        arg3: *mut kstat,
        arg4: u32_,
        arg5: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_statfs(arg1: *mut dentry, arg2: *mut kstatfs) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_open(inode: *mut inode, file: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_link(arg1: *mut dentry, arg2: *mut inode, arg3: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_unlink(arg1: *mut inode, arg2: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_rmdir(arg1: *mut inode, arg2: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_rename_timestamp(
        old_dir: *mut inode,
        old_dentry: *mut dentry,
        new_dir: *mut inode,
        new_dentry: *mut dentry,
    );
}
extern "C" {
    pub fn simple_rename_exchange(
        old_dir: *mut inode,
        old_dentry: *mut dentry,
        new_dir: *mut inode,
        new_dentry: *mut dentry,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_rename(
        arg1: *mut mnt_idmap,
        arg2: *mut inode,
        arg3: *mut dentry,
        arg4: *mut inode,
        arg5: *mut dentry,
        arg6: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_recursive_removal(
        arg1: *mut dentry,
        callback: ::core::option::Option<unsafe extern "C" fn(arg1: *mut dentry)>,
    );
}
extern "C" {
    pub fn noop_fsync(
        arg1: *mut file,
        arg2: loff_t,
        arg3: loff_t,
        arg4: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn noop_direct_IO(iocb: *mut kiocb, iter: *mut iov_iter) -> isize;
}
extern "C" {
    pub fn simple_empty(arg1: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_write_begin(
        file: *mut file,
        mapping: *mut address_space,
        pos: loff_t,
        len: core::ffi::c_uint,
        pagep: *mut *mut page,
        fsdata: *mut *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static ram_aops: address_space_operations;
}
extern "C" {
    pub fn always_delete_dentry(arg1: *const dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn alloc_anon_inode(arg1: *mut super_block) -> *mut inode;
}
extern "C" {
    pub fn simple_nosetlease(
        arg1: *mut file,
        arg2: core::ffi::c_int,
        arg3: *mut *mut file_lease,
        arg4: *mut *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static simple_dentry_operations: dentry_operations;
}
extern "C" {
    pub fn simple_lookup(
        arg1: *mut inode,
        arg2: *mut dentry,
        flags: core::ffi::c_uint,
    ) -> *mut dentry;
}
extern "C" {
    pub fn generic_read_dir(
        arg1: *mut file,
        arg2: *mut core::ffi::c_char,
        arg3: usize,
        arg4: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub static simple_dir_operations: file_operations;
}
extern "C" {
    pub static simple_dir_inode_operations: inode_operations;
}
extern "C" {
    pub fn make_empty_dir_inode(inode: *mut inode);
}
extern "C" {
    pub fn is_empty_dir_inode(inode: *mut inode) -> bool_;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tree_descr {
    pub name: *const core::ffi::c_char,
    pub ops: *const file_operations,
    pub mode: core::ffi::c_int,
}
impl Default for tree_descr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn d_alloc_name(arg1: *mut dentry, arg2: *const core::ffi::c_char) -> *mut dentry;
}
extern "C" {
    pub fn simple_fill_super(
        arg1: *mut super_block,
        arg2: core::ffi::c_ulong,
        arg3: *const tree_descr,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_pin_fs(
        arg1: *mut file_system_type,
        mount: *mut *mut vfsmount,
        count: *mut core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_release_fs(mount: *mut *mut vfsmount, count: *mut core::ffi::c_int);
}
extern "C" {
    pub fn simple_read_from_buffer(
        to: *mut core::ffi::c_void,
        count: usize,
        ppos: *mut loff_t,
        from: *const core::ffi::c_void,
        available: usize,
    ) -> isize;
}
extern "C" {
    pub fn simple_write_to_buffer(
        to: *mut core::ffi::c_void,
        available: usize,
        ppos: *mut loff_t,
        from: *const core::ffi::c_void,
        count: usize,
    ) -> isize;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct offset_ctx {
    pub mt: maple_tree,
    pub next_offset: core::ffi::c_ulong,
}
impl Default for offset_ctx {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn simple_offset_init(octx: *mut offset_ctx);
}
extern "C" {
    pub fn simple_offset_add(octx: *mut offset_ctx, dentry: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_offset_remove(octx: *mut offset_ctx, dentry: *mut dentry);
}
extern "C" {
    pub fn simple_offset_empty(dentry: *mut dentry) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_offset_rename(
        old_dir: *mut inode,
        old_dentry: *mut dentry,
        new_dir: *mut inode,
        new_dentry: *mut dentry,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_offset_rename_exchange(
        old_dir: *mut inode,
        old_dentry: *mut dentry,
        new_dir: *mut inode,
        new_dentry: *mut dentry,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_offset_destroy(octx: *mut offset_ctx);
}
extern "C" {
    pub static simple_offset_dir_operations: file_operations;
}
extern "C" {
    pub fn __generic_file_fsync(
        arg1: *mut file,
        arg2: loff_t,
        arg3: loff_t,
        arg4: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_file_fsync(
        arg1: *mut file,
        arg2: loff_t,
        arg3: loff_t,
        arg4: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_check_addressable(arg1: core::ffi::c_uint, arg2: u64_) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_set_sb_d_ops(sb: *mut super_block);
}
extern "C" {
    pub fn may_setattr(
        idmap: *mut mnt_idmap,
        inode: *mut inode,
        ia_valid: core::ffi::c_uint,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn setattr_prepare(
        arg1: *mut mnt_idmap,
        arg2: *mut dentry,
        arg3: *mut iattr,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn inode_newsize_ok(arg1: *const inode, offset: loff_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn setattr_copy(arg1: *mut mnt_idmap, inode: *mut inode, attr: *const iattr);
}
extern "C" {
    pub fn file_update_time(file: *mut file) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Default)]
pub struct simple_transaction_argresp {
    pub size: isize,
    pub data: __IncompleteArrayField<core::ffi::c_char>,
}
extern "C" {
    pub fn simple_transaction_get(
        file: *mut file,
        buf: *const core::ffi::c_char,
        size: usize,
    ) -> *mut core::ffi::c_char;
}
extern "C" {
    pub fn simple_transaction_read(
        file: *mut file,
        buf: *mut core::ffi::c_char,
        size: usize,
        pos: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn simple_transaction_release(inode: *mut inode, file: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_transaction_set(file: *mut file, n: usize);
}
extern "C" {
    pub fn simple_attr_open(
        inode: *mut inode,
        file: *mut file,
        get: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut core::ffi::c_void, arg2: *mut u64_) -> core::ffi::c_int,
        >,
        set: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut core::ffi::c_void, arg2: u64_) -> core::ffi::c_int,
        >,
        fmt: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_attr_release(inode: *mut inode, file: *mut file) -> core::ffi::c_int;
}
extern "C" {
    pub fn simple_attr_read(
        file: *mut file,
        buf: *mut core::ffi::c_char,
        len: usize,
        ppos: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn simple_attr_write(
        file: *mut file,
        buf: *const core::ffi::c_char,
        len: usize,
        ppos: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn simple_attr_write_signed(
        file: *mut file,
        buf: *const core::ffi::c_char,
        len: usize,
        ppos: *mut loff_t,
    ) -> isize;
}
extern "C" {
    pub fn list_bdev_fs_names(buf: *mut core::ffi::c_char, size: usize) -> core::ffi::c_int;
}
extern "C" {
    pub fn path_noexec(path: *const path) -> bool_;
}
extern "C" {
    pub fn inode_nohighmem(inode: *mut inode);
}
extern "C" {
    pub fn vfs_fadvise(
        file: *mut file,
        offset: loff_t,
        len: loff_t,
        advice: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn generic_fadvise(
        file: *mut file,
        offset: loff_t,
        len: loff_t,
        advice: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
pub const ARCH_SLAB_MINALIGN: usize = 8;
pub const GFP_ATOMIC: gfp_t = 2080;
pub const GFP_KERNEL: gfp_t = 3264;
pub const GFP_KERNEL_ACCOUNT: gfp_t = 4197568;
pub const GFP_NOWAIT: gfp_t = 10240;
pub const __GFP_ZERO: gfp_t = 256;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: core::ffi::c_uint,
    pub fp_offset: core::ffi::c_uint,
    pub overflow_arg_area: *mut core::ffi::c_void,
    pub reg_save_area: *mut core::ffi::c_void,
}
impl Default for __va_list_tag {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kernel_symbol {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct module_sect_attrs {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct module_notes_attrs {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct static_call_mod {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct sched_class {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct files_struct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct rt_mutex_waiter {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct maple_pnode {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct maple_enode {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ldt_struct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct page_pool {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct anon_vma {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct linux_binfmt {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct kernfs_root {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct module_param_attrs {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cgroup {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct k_clock {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tty_struct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct request_queue {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct wait_page_queue {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct file_lock_context {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cdev {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct xattr_handler {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct block_device {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct mtd_info {
    pub _address: u8,
}
